var ptx_lunr_docs = [
{
  "id": "colophon-1",
  "level": "1",
  "url": "colophon-1.html",
  "type": "Colophon",
  "number": "",
  "title": "Colophon",
  "body": "copyright "
},
{
  "id": "dedication-1",
  "level": "1",
  "url": "dedication-1.html",
  "type": "Dedication",
  "number": "",
  "title": "Dedication",
  "body": "\n      To my family, who didn't even know I was writing a book and who was very surprised when I said I finished it.\n     "
},
{
  "id": "acknowledgement-1",
  "level": "1",
  "url": "acknowledgement-1.html",
  "type": "Acknowledgements",
  "number": "",
  "title": "Acknowledgements",
  "body": "\n      Thank you to the Grand Valley State University ( GVSU ) Libraries, specifically the Scholarly Communications section, for their support while writing this book. This book would not have been written had it not been for Matt Ruen of  GVSU  who provided useful feedback on accessibility, general  OER  guidance, organization, and who arranged for a university grant to hire me as a student employee to assist with  OER  creation and mangement at  GVSU .\n     \n      I am also indebted to Alicia Huber and Jackie Rander for their feedback on the clarity, concision, and effectiveness of the book. The book has benefitted because of them.\n     \n      Kudos also go to David Farmer, Rob Beezer, Oscar Levin, and the many others who work to maintain and update  PreTeXt  and its functions.  PreTeXt  is a great, free resource for authors.\n     \n      All branch diagrams found in this book were created by the author using  the online creator, Miro .\n     "
},
{
  "id": "preface-1",
  "level": "1",
  "url": "preface-1.html",
  "type": "Preface",
  "number": "",
  "title": "Publisher's Note",
  "body": "Publisher's Note About this Edition \n       Better Git Started: An Introduction to the Command Line, GitHub, and Git  was written by Ian Curtis, a senior at Grand Valley State University and Editorial Assistant for the  GVSU  Libraries. This text was developed as part of the  Accelerating Open Educational Resources Initiative at Grand Valley State University , with support from the University Libraries and the President's Innovation Fund.\n     \n      This edition is released under a Creative Commons - Attribution - Sharealike license ( CC-BY-SA 4.0 ). This allows users to use, share, and adapt the work as long as they provide attribution to the creator(s) and apply the same license to any derivative work or adaptation.\n     \n      The code used to generate this book can be found in  the author's GitHub repository . This includes the  PreTeXt   XML  files, figures, customization files ( XSL ), and the output ( HTML  and  PDF ). Contributors are encouraged to submit an issue or a pull request with changes, especially regarding accessibility (as mentioned below).\n     \n      Suggested Attribution:  Better Git Started: An Introduction to the Command Line, GitHub, and Git , by Ian Curtis, published by the Grand Valley State University Libraries, 2022.\n     Accessibility Statement \n      The Grand Valley State University Libraries strive to ensure our tools, devices, services, and environments are available to and usable by as many people as possible.\n     \n      The web version of  Better Git Started  incorporates the following features to support accessibility:\n       \n           \n            All content can be navigated by use of a keyboard\n           \n         \n           \n            Links, headings, and tables have been designed to work with screen readers\n           \n         \n           \n            Code in  PreTeXt  is rendered with separate blocks so they can be understood by using screen readers and\/or other assistive devices.\n           \n         \n     "
},
{
  "id": "fm_howtouse",
  "level": "1",
  "url": "fm_howtouse.html",
  "type": "Preface",
  "number": "",
  "title": "How To Use This Book",
  "body": "How To Use This Book \n    Congratulations on deciding to explore the command line! The ideas explained in this book are quite useful, espeically if you plan to go into a coding career, need to store code files publicly, and\/or need some version control. This book is designed for those who have no experience with Git, GitHub, or the command line. I assume that you have never touched your terminal (or even know what one is). I don't assume you have a GitHub account or know anything about how to use Git.\n   \n    Git is an incredibly powerful tool, but it does come with a learning curve. While there are text editors and interfaces out there that make using Git somewhat easier, I believe that it is best to learn the Git essentials the  harder  way. I hope that in doing so you will be able to better understand the steps in the Git process and that using the features in text editors will be easier. Rather than just memorizing how to use a text editor or the commands to enter, I take a more direct approach and show you Git on the command line to help you understand the process. Once you have that down, you can apply the same skills to a variety of different interfaces as you explore new software and resources.\n   \n    The book is broken up into a few pieces:\n     \n         \n          Multiple prefaces explaining necessary materials depending on your operating system ( ,  ,  )\n         \n       \n         \n          Introductory materials introducing general computer basics, etiquette, and recommended practices ( ) and an introduction to the command line ( )\n         \n       \n         \n          A detailed introduction and get-started guide to GitHub ( ) and Git ( ) when working alone\n         \n       \n         \n          A detailed introduction and get-started guide to GitHub ( ) and Git ( ) when working with collaborators\n         \n       \n         \n          Appendices with some bonus features, resources, and troubleshooting\n         \n       \n   \n    The best way to use this book is to first determine where you are in terms of knowledge. Do you know anything about the terminal? If so, you might consider jumping to  . Do you know about GitHub, but not the terminal? Perhaps start with   then move to  . Regardless of the path you choose, I highly recommend at least scanning the sections in  . I do assume you have an idea of the topics in that chapter and hope you at least consider adopting some of the recommended practices. If you have no idea what anything is in this book, start at the beginning and just read consecutively.\n   \n    That being said, be aware that skipping chapters or sections may cause a disconnect between the book activities and your participation. Most sections have activities scattered throughout and some chapters even have a lengthy extensive activity at their ends and these activites build off of one another. Even if you want to skip chapters, it might be worth it to take the time to participate in these activities along the way. If you are unfamiliar with the content, be sure to follow along with the activities.\n   \n    The book is designed to be interactive where you follow along as you read; however, it is not a traditional textbook filled with exercises, definitions, and theorems. I am not testing you on any of this as I believe that Git and GitHub are skills best learned by doing, not through an exam. Feel free to make mistakes, break things, and revist chapters you forgot or didn't understand completely. Answers to activities and exercises can be found in  .\n   \n    As you read, if anything starts to become too confusing or overwhelming, take a break. While a dedicated reader might be able to read this book and complete the activities in one day, it is not recommended to do so. There is quite a bit of new content here and too much at once will certainly lead to an information overload. So take your time, read carefully, and, again, don't be afraid to reread parts of the book anytime you need a refresher on things. If you think that something deserves more attention and more explanation, feel free to open an issue on GitHub (don't know how? see  ) and let me know.\n   \n    If you are prepared to dive in, visit the following prefaces to download the necessary materials, then proceed to learning!\n   Known Issues \n      There are certain parts of the book that could be better. I list some below.\n\n       \n           \n            Some figures, particularly the branch diagrams, are blurry from file conversion.\n           \n         \n           \n            Images could probably use better alt text\n           \n         \n           \n            Certain parts of the appendices need more content for Windows and Linux users\n           \n         \n           \n            As I am not a professional index creator, some entries may need to be moved around, some may need to be added, and\/or other edits\n           \n         \n     "
},
{
  "id": "materials-windows",
  "level": "1",
  "url": "materials-windows.html",
  "type": "Preface",
  "number": "",
  "title": "Materials (Windows)",
  "body": "Materials (Windows) \n    As this book was written on the assumption that you have no experience with Git or the command line, it also assumes you do not have necessary materials (software). Downloads will differ slightly depending on it you have a Mac or a  PC  and if you are running Linux. The following will provide necessary materials to use this book as well as links and some relevant instructions  for those who are using Windows . If you are running Windows Subsystem for Linux, instructions might be slightly different; however, start here and jump to a quick Google search if something goes wrong.\n   A Text Editor \n      In order to edit files as demonstrated in this book, you will need a text editor outside of the basic default editor. Any editor will work such as  Sublime Text  or  Atom .\n     \n      If you are already familiar with an editor or if you like a particular one, use it! However, I personally prefer  Visual Studio Code  which can be downloaded at the previous link. Throughout this book, I will refer to  VS  Code with some guidelines on how to find certain features. Should you decide to use another editor, it is up to you to learn how to use it. If you are a beginner with Git and the command line, I would stick with  VS  Code although as you gain experience you might think about switching to Atom or Sublime Text. I am currently considering a change to Atom myself.\n     Git\/Git Bash \n      To use Git, you need to download and install it on your computer. Depending on your computer and where you got it, you may actually already have Git (for instance, university laptops). To run a quick check, use  Windows  +  S  and search for  git bash . If an application pops up, great! You do not need to install anything. If not, carry on.\n     \n      Windows does come with its own command prompt. (What's a command prompt? See  .) However, its syntax doesn't match other terminals and notably is different from Macs. Thus, to ensure that everyone is on the same page, we will download a piece of software called Git Bash that allows everyone to use the same commands.\n     \n      To install Git Bash, follow these next steps. Yuvraj Chandra wrote  a useful Git Bash installation guide  that may help you if you get stuck.\n       \n           \n             Visit the  Git website  and select the \n             download for Windows.\n           \n         \n           \n            Open the  .exe  file and follow the instructions to install Git Bash. Most of the default \n            options should not be changed. However, please read the following notes before installing. \n             \n                 \n                  Your computer may ask you if you want to allow the app to modify your computer; it is safe to say yes.\n                 \n               \n                 \n                  When you reach the  Select Components  screen, I recommend leaving the default boxes checked as they will be useful later on.\n                 \n               \n                 \n                  When you reach the  Choosing the default editor used by Git  screen, I recommend selecting the  Use Visual Studio Code...  option (if you have decided to use  VS  Code).\n                 \n               \n                 \n                  When you reach the  Adjusting the name of the initial branch...  screen, I recommend selecting  Override the default branch name...  and type in  main  (lowercase) into the box. This will help us match the Mac version and respect  Git's attempts to be more inclusive . \n                 \n               \n           \n          \n         \n     GitHub \n      You will also need a GitHub account. Since this is an extensive topic, this is covered in  .\n     "
},
{
  "id": "materials-mac",
  "level": "1",
  "url": "materials-mac.html",
  "type": "Preface",
  "number": "",
  "title": "Materials (Mac)",
  "body": "Materials (Mac) \n    As this book was written on the assumption that you have no experience with Git or the command line, it also assumes you do not have necessary materials (software). Downloads will differ slightly depending on if you have a Mac or a  PC  and if you are running Linux. The following will provide necessary materials to use this book as well as links and some relevant instructions  for those who are using a Mac with macOS .\n   A Text Editor \n      In order to edit files as demonstrated in this book, you will need a text editor outside of the basic default editor. Any editor will work such as  Sublime Text  or  Atom .\n     \n      If you are already familiar with an editor or if you like a particular one, use it! However, I personally prefer  Visual Studio Code  which can be downloaded at the previous link. Throughout this book, I will refer to  VS  Code with some guidelines on how to find certain features. Should you decide to use another editor, it is up to you to learn how to use it. If you are a beginner with Git and the command line, I would stick with  VS  Code although as you gain experience you might think about switching to Atom or Sublime Text. I am currently considering a change to Atom myself.\n     Git \n      To use Git, you need to download and install it on your computer. You already have a command line, you just need to make sure that you have Git. Depending on your computer and where you got it, you may actually already have Git (for instance, university laptops). First, run a check to see if it is already installed. Don't worry about how or why these steps work, all will be explained later on.\n       \n           \n            Press  Command  +  Space  to open Spotlight Search.\n           \n         \n           \n            Start typing  terminal.app . When the correct application opens up, click on it.\n           \n         \n           \n            Your terminal will pop up. Don't be scared of it! Type  git --version  and press  Enter .\n           \n         \n           \n            If it spits out something like  git version 2.35.1  (the numbers could be different), you're good! If not, carry on.\n           \n         \n     \n      Even if you do not know what Homebrew is, it recommend using it to install Git. It can also be used to quickly (  in one line) install other pieces of software. You might find Homebrew useful in the future, even if it can be confusing to install at present:\n\n       \n           \n            To install Homebrew, go back to your terminal that you opened when checking if Git was installed. Paste in  \/bin\/bash -c \"$(curl -fsSL https:\/\/raw.githubusercontent.com\/Homebrew\/install\/HEAD\/install.sh)\"  as one line (not two) and press  Enter . Don't worry about what each part does (to be honest, I'm not entirely sure either). It is safe and trustworthy (I did it on my computer).\n           \n           \n            If you want to be sure you're pasting the correct command, you can visit  the Homebrew homepage  and navigate to the  Install Homebrew  heading.\n           \n         \n           \n            Follow the instructions and prompts given until Homebrew is installed.\n           \n         \n           \n            To install Git, simply type in  brew install git  at the terminal and press  Enter .\n           \n         \n\n      And that's it!\n     GitHub \n      You will also need a GitHub account. Since this is an extensive topic, this is covered in  .\n     "
},
{
  "id": "materials-linux",
  "level": "1",
  "url": "materials-linux.html",
  "type": "Preface",
  "number": "",
  "title": "Materials (Linux)",
  "body": "Materials (Linux) \n    As this book was written on the assumption that you have no experience with Git or the command line, it also assumes you do not have necessary materials (software). Downloads will differ slightly depending on it you have a Mac or a  PC  and if you are running Linux. The following will provide necessary materials to use this book as well as links and some relevant instructions  for those who are using Linux .\n   \n    Please note that I have no experience with using Linux. These instructions will likely be superficial and without detail. I simply provide you with links; I am currently not able to provide information on how to install software correctly.\n   A Text Editor \n      In order to edit files as demonstrated in this book, you will need a text editor outside of the basic default editor. Any editor will work such as  Sublime Text  or  Atom . Both have Linux downloads.\n     \n      If you are already familiar with an editor or if you like a particular one, use it! However, I personally prefer  Visual Studio Code  which can be downloaded at the previous link (there is a Linux download). Throughout this book, I will refer to  VS  Code with some guidelines on how to find certain features. Should you decide to use another editor, it is up to you to learn how to use it. If you are a beginner with Git and the command line, I would stick with  VS  Code although as you gain experience you might think about switching to Atom or Sublime Text. I am currently considering a change to Atom myself.\n     Git \n      To use Git, you need to download and install it on your computer. You already have a command line, you just need to make sure that you have Git. Depending on your computer and where you got it, you may actually already have Git (for instance, university laptops). You can install Git for Linux from the many options  at the GitHub download page . \n     GitHub \n      You will also need a GitHub account. Since this is an extensive topic, this is covered in  .\n     "
},
{
  "id": "S_filenames",
  "level": "1",
  "url": "S_filenames.html",
  "type": "Section",
  "number": "1.1",
  "title": "File and Folder Names",
  "body": "File and Folder Names file names folder names \n    Take a minute and look at some of the files and folders on your computer. What do the names look like?\n   \n    Sorry, that probably wasn't very clear. Specifically, I want you to see if there are  spaces  in your file and folder names. My guess is probably! Mine certainly had spaces before I learned more about computers and got involved in Git and the command line.\n   \n    Take another look at some files\/folders. What is your  capitalization scheme ? Is there a pattern? Do you name your files by what they contain? Do you have dates in your files? Do you have a group of files with something like  File First Draft ,  File Second Draft ,  File, revisions from colleague , etc.? All of these can be problematic for computers and even more so for humans interacting with computers.\n   \n    The following chunks go through my opinions on file naming conventions. But that's what they are: opinions. Suggestions. Following them will make your life easier later on. But by all means, go ahead and ignore me and decide for yourself later if you want to make a change. I probably won't pop up in your home and check your file names. Try not to get \n    too lost with these; an extensive example will be provided at the end of the section.\n   Naming Conventions File Names With Revisions file names with revisions version control \n      You might be familiar with this situation: You write one draft, get feedback, save a second draft as a new file, get feedback again, and finally make a new file with a final draft. Then, you decide to make modifications to that final draft which is saved as a new file, etc., etc.This is great until you realize that now you have way too many files for a single document. How do you know which one is real final draft? What if you open the wrong one and start editing? Now you have to edit all of the files to make them match. \n     \n      Sure, a computer can handle that many files and doesn't really care how many drafts or revisions you have. But more files take up more storage space and increases the chances of confusing you! How on earth can we solve this problem? It's not like there's a magic software that can keep track of all of our changes in a single file.\n     version control \n      For now, don't worry about Git; we will get there in  . Just know that after reading this book, you won't have to worry about excess drafts and should never have to save so many drafts again. \n     File Names With Dates file names with dates \n      Ok, this isn't entirely problematic. But I never understood why dates in file names had to be so specific. Having years makes sense, maybe months. But days? Times? Seconds? Once you start getting that specific with dates and times, you run into the same issue as in  . Dates and times just make your file names incredibly long, hard to read, and hard to use in the command line. Please try to avoid dates, other than years, perhaps.\n     Descriptive File Names file names descriptive file names shortening tricks \n      File names should be descriptive! Furthermore, they should describe  what the file actually contains\/is about  and not some random name. Probably most of your files are descriptive? That's great! But what's the catch? File names should also be short. Short, sweet, to the point, and also descriptive. \n     \n      That's pretty tricky, you might say. Sure, I respond, but you can take advantage of abbreviations and \n      word-shortening tricks. For instance, suppose I had a file name like this:\n         \n          Chapters3_4_Overview of Sampling and Simple Random Sampling (SRS).pdf\n         \n      This is clearly descriptive. We know exactly what this PDF is about: it refers to chapters 3 and 4 \n      of a textbook which is about sampling in general and digs into simple random sampling. But wow,\n      it's really long. On my computer, it shows up as\n         \n          Chapters3_4_Overview of SRS).pdf\n         \n      Now do you know what this file contains? I don't. Yes, it's on chapters 3 and 4 but we are left \n      hanging as to what the chapters are an overview of! Moreover, what does the random  SRS  mean \n      at the end?\n     \n      If it were me, I would rather name this file (based on the conventions discussed so far)\n         \n          Ch3_4_Sampling and SRS.pdf\n         \n      Wow! So much shorter. Do you still have an idea of what the file contains? Hopefully!  Ch  is \n      usually accepted as an abbreviation for  Chapter  so it is clear that this file is over \n      chapters 3 and 4. The subject of these chapters is sampling and simple random sampling ( SRS  is \n      a widely-used abbreviation in statistics for simple random sampling).\n     File Naming Trick file names shortening tricks \n        An easy way to shorten file names is to remove the vowels from words. The human brain is \n        incredible in that it can determine what a word should be based on a small amount of context. \n        Assuming the file above was in a folder pertaining to statistics, I could shorten it even more:\n           \n            Ch3_4_Smplng and SRS.pdf\n           \n        And we still know what it's about!\n       \n        A quick word of caution. Take care not to over-abbreviate. It may not be necessary to abbreviate every \n        word. For instance, I wouldn't change  you  to  y  \n        or  gate  to  gt . You may be confused later: does  gt  mean  gate ,  git , \n         get ,  gut ,  agate , etc., etc.?\n       \n      Summary: keep your file names short and to the point. Describe what the file is (I wouldn't name the file above  bananas.pdf !).\n     File Names With Spaces file names with spaces \n      If you only follow one convention in this section, this would be the one. This the most important for working with the command line. Spaces in file names increase the amount of typing you have to do and make it more difficult to understand what's going on on the command line.\n     \n      For instance, suppose I wanted to open the file we discussed earlier. On the command line, I would open the file like this (don't worry about the commands, just notice what it looks like):\n         open 'Chapters3_4_Overview of Sampling and Simple Random Sampling (SRS).pdf' \n      I could also do it like this:\n         open Chapters3_4_Overview\\ of\\ Sampling\\ and\\ Simple\\ Random\\ Sampling\\ (SRS).pdf \n\n      First, notice how long these titles are. That's a lot to type! What you should really notice is that in the first example, the file is surrounded in quotes and in the second, there are a bunch of backslashes. For each file name with spaces, you have to either remember to enclose the entire name in quotes or to take the time to put a backslash before every space. It may not seem like too much of a hassle, but you will get annoyed with it pretty quickly. It also can cause setbacks inside code editors when you want to import or export files with spaces.\n     cases \n      Using the shortened file name above, I would use the following as my file name:\n         \n          ch3_4_smplng_srs.pdf\n         \n      Note that I got rid of the  and . Cases are useful in that they make it easy to remove articles \n      and prepositions which in turn helps us keep file names nice and short.\n     \n      It is also important to keep your file names consistent. If I had another file about chapter 5 of \n      this textbook which is about cluster sampling, let's say, I would want to name it something like \n       \n        ch5_clstr_smplng.pdf\n       \n      Notice that the structure is the same as before: first I have  ch5  to represent the chapter \n      number, then I describe the chapter with  clstr_smplng . Like before, I use snake_case and \n      I made sure to use the same abbreviation for  sampling  as I did before. Consistency is key \n      for our own sanity and so we can quickly scan for the file we need.\n     \n      It's worth repeating once again. File names should not contain spaces. Files about related content \n      should have a similar naming scheme.\n     \n      Sorry, once more. This time, I'm going to yell.  File names should not contain spaces. \n     A Quick Note on Folder Names folder names directory names folder names \n      Folder names should also follow all of the conventions above. This is a lot harder to get used to. I still feel like I'm breaking the Human Code of Folder Names everytime I ignore spaces and capital letters. For whatever reason, I'm fine with file names, but folder names just don't feel right.\n     \n      But too bad for me! I name my folders according to the conventions anyways. And you should too. (As I mentioned earlier, I use snake_case for files and kebab-case for folders. You might consider doing so as well; they are the two most popular cases.)\n     Exploring File and Folder Naming Techniques \n      There were a lot of words in  . Let's make sense of them here \n      with an extensive example. There will be some questions throughout the way. I encourage you to think about them and make sure you have understood the naming conventions above.\n     Folder Naming folder names \n        Suppose you work for Taylor Swift (wouldn't that be cool!). She is super busy right now recording albums, writing songs, spending time with family and friends, and making TikToks and needs your help. She has all of her songs saved on her computer in folders which are divided up by one album per folder. She has asked you to help her rename her folders so that she still knows what each folder is, but follows proper naming conventions. Use your knowledge from above to help Taylor out.\n       \n       Following is a list of her current folder names:\n        \n            \n             Taylor Swift\n            \n          \n            \n             Taylor Swift (Deluxe)\n            \n          \n            \n             Live From Clear Channel Stripped 2008\n            \n          \n            \n             Fearless\n            \n          \n            \n              Fearless (Platinum Edition)\n            \n          \n            \n             The Taylor Swift Holiday Collection\n            \n          \n            \n             Speak Now\n            \n          \n            \n             Speak Now (Deluxe Edition)\n            \n          \n            \n             Speak Now World Tour Live\n            \n          \n            \n             Red\n            \n          \n            \n             Red (Deluxe Edition)\n            \n          \n            \n             1989\n            \n          \n            \n             1989 (Deluxe Edition)\n            \n          \n            \n             reputation\n            \n          \n            \n             Lover\n            \n          \n            \n             folklore\n            \n          \n            \n             folklore (deluxe edtion)\n            \n          \n            \n             folklore: the long pond studio sessions (from the Disney+ special) [deluxe edition]\n            \n          \n            \n             evermore\n            \n          \n            \n             evermore (deluxe version)\n            \n          \n            \n             Fearless (Taylor's Version)\n            \n          \n            \n             Red (Taylor's Version)\n            \n          \n           \n            Midnights\n           \n          \n            \n             Unreleased Music\n            \n          \n            \n             Singles\n            \n           \n       \n        Wow! That's a lot of albums!\n        Complete the following tasks to make Taylor's life a little easier for the future.\n       \n        Please note that the answers to many of these exercises will vary depending on personal preferences. \n        I will give answers depending on how I might approach the problem; they are certainly not the only answer you could have given.\n       \n          Before we trying fixing a problem, let's figure out what the problem is. What do you notice \n          about these folder names? What about them is  incorrect ?\n         \n          The main thing that pops out to me are the spaces. Every multi-word folder name has a space. \n          Secondly, some of the names are very long. Third, there is not much consistency. Some names are \n          capitalized, others aren't. There are clearly deluxe versions of albums but some say  deluxe ,\n          others say  deluxe version , and even others say  deluxe edition . \n         \n          The three here are the \n          main issues; you may have thought of others. Great! I'm sure they are good observations. \n         \n          Ok, we've identified a problem. How can we go about deciding what to do about it? You may \n          already have some ideas, but stick with me here. Let's not just dive in and start removing spaces \n          and shortening folder names. Instead, let's make a plan.\n         \n          Identify some naming patterns. Are there any album names that are similar? Can you form any groups \n          of names?\n         \n          There are probably a lot of patterns you could have noticed. I grouped folder names into\n           \n               \n                Standard albums\n               \n             \n               \n                Deluxe albums\n               \n             \n               \n                Live albums\n               \n             \n               \n                Taylor's Version albums\n               \n             \n               \n                Other\n               \n             \n         \n          I am going to continue with the groups in the solution to  . \n          Feel free to branch off with your own groups or stick with me. \n         \n          Now that we have groups, we can figure out how to name one of each group, then apply that \n          naming style to all names in the group. Start with the standard albums, such as  Taylor \n          Swift . How can you change this name to stick with the conventions discussed above? \n         \n          Since there aren't any special modifiers to this album (such as deluxe or live), I say we just keep its name, but write them in kebab-case. Therefore,  Taylor Swift  would become  taylor-swift .\n         \n          Apply the naming to scheme to all folders with  regular  album titles.\n         \n          The following names are the modified versions:\n           \n               \n                 taylor-swift \n               \n             \n               \n                 fearless \n               \n             \n               \n                 speak-now \n               \n             \n               \n                 red \n               \n             \n               \n                 1989 \n               \n             \n               \n                 reputation \n               \n             \n               \n                 lover \n               \n             \n               \n                 folklore \n               \n             \n               \n                 evermore \n               \n             \n               \n                 midnights \n               \n             \n         \n          Continue with the deluxe group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          For the deluxe albums, the similarity is the word  deluxe . I don't bother with \n           edition  or  version ,  deluxe  is enough to convey the necessary information.\n          I also would like to abbreviate  deluxe  to  dlx . You could also choose to keep the \n          full word, but since we can't ask Taylor what she would prefer, I am sticking with the shorter. \n           dlx  gets the point across (this is a deluxe album) with 3 less characters. Following are \n          my changes for the deluxe group. There is one outlier: the Fearless Platinum Edition. I am \n          going to retain the  platinum  name since that is its true name.\n\n           \n               \n                 taylor-swift-dlx \n               \n             \n               \n                 fearless-pltnm \n               \n             \n               \n                 speak-now-dlx \n               \n             \n               \n                 red-dlx \n               \n             \n               \n                 1989-dlx \n               \n             \n               \n                 folklore-dlx \n               \n             \n               \n                 folklore-dsny-dlx \n               \n             \n               \n                 evermore-dlx \n               \n             \n         \n          Continue with the live group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          There are only two in this group, but there could be more in the future. Let's use  live  \n          to differentiate these folders from the others. I am choosing to not use  lve  or  lv  because \n          I think there are slightly ambiguous (it could mean  love !).\n           \n               \n                 clear-chnl-live \n               \n             \n               \n                 speak-now-live \n               \n             \n         \n          Continue with the Taylor's Version group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          I am going to again use kebab-case and use  tv  to indicate that the album is a Taylor's \n          Version. This will help cut down on name length.\n           \n               \n                 fearless-tv \n               \n             \n               \n                 red-tv \n               \n             \n         \n          Continue with the other group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          These are mostly up to you. They have no specific pattern, but I will still apply kebab-case \n          and shorten the names.\n           \n               \n                 holiday-clctn  (I could even use  holiday  since there is only one holiday album)\n               \n             \n               \n                 unreleased \n               \n             \n               \n                 singles \n               \n             \n         \n        I think that's all of them! That may have seemed like a lot of work but I hope it was worthwhile.\n        It should now be much easier for Taylor to navigate her folders and quickly know that album they \n        contain.\n       \n    If you feel like you have a good grasp of naming systems, feel free to skip  . \n    If not, let's explore file naming a little further. In  , we focused on Taylor's folder names and since you helped her there, she is asking for your guidance with her file names as well.\n   File Naming file names \n        We will focus on the folder that I renamed to be  speak-now-dlx . A list of her current file \n        names for these tracks follow. I should note that it is often helpful to prefix song names with \n        their track position so that they stay in order when in a folder. We won't remove those numbers. \n        Also,  .wav  indicates that the song is a WAV file (see   for more). We should not remove these either as this could result in file loss or corruption.\n         \n             \n              01 Mine.wav\n             \n           \n             \n              02 Sparks Fly.wav\n             \n           \n             \n              03 Back To December.wav\n             \n           \n             \n              04 Speak Now.wav\n             \n           \n             \n              05 Dear John.wav\n             \n           \n             \n              06 Mean.wav\n             \n           \n             \n              07 The Story Of Us.wav\n             \n           \n             \n              08 Never Grow Up.wav\n             \n           \n             \n              09 Enchanted.wav\n             \n           \n             \n              10 Better Than Revenge.wav\n             \n           \n             \n              11 Innocent.wav\n             \n           \n             \n              12 Haunted.wav\n             \n           \n             \n              13 Last Kiss.wav\n             \n           \n             \n              14 Long Live.wav\n             \n           \n             \n              15 Ours.wav\n             \n           \n             \n              16 If This Was A Movie.wav\n             \n           \n             \n              17 Superman.wav\n             \n           \n             \n              18 Back To December (Acoustic).wav\n             \n           \n             \n              19 Haunted (Acoustic Version).wav\n             \n           \n             \n              20 Mine (POP Mix).wav\n             \n           \n       \n        Like before, complete the following tasks to make Taylor's life a little easier for the future.\n       \n        Again note that the answers to many of these exercises will vary depending on personal preferences. \n        I will give answers depending on how I might approach the problem; these are not the only correct responses.\n       \n          Before we trying fixing a problem, let's figure out what the problem is. What do you notice \n          about these file names? What about them is  incorrect ?\n         \n          The main thing that pops out to me are the spaces. Every multi-word file name has a space. \n          Secondly, there are a few cases of non-consistency: Back To December says  Acoustic  whereas \n          Haunted says  Acoustic Version . \n         \n          The two here are the \n          main issues; you may have thought of others. Great! I'm sure they are good observations. \n         \n          Ok, we've identified a problem. How can we go about deciding what to do about it? You may \n          already have some ideas, but stick with me here. Let's not just dive in and start removing spaces \n          and shortening file names. Instead, let's make a plan.\n         \n          Identify some naming patterns. Are there any track names that are similar? Can you form any groups \n          of names?\n         \n          There are probably a couple patterns you could have noticed. I grouped track names into\n           \n               \n                 Regular  album tracks\n               \n             \n               \n                Acoustic tracks\n               \n             \n               \n                The last track\n               \n             \n         \n          I am going to continue with the groups in the solution to  . \n          Feel free to branch off with your own groups or stick with me.\n         \n          Now that we have groups, we can figure out how to name one of each group, then apply that \n          naming style to all names in the group. Start with the  regular  tracks.\n          How can you change these names to stick with the conventions discussed above?\n         \n          There isn't much we can do here. I will write the names in snake_case which will remove the \n          spaces and change every word to lowercase. Since we can't ask Taylor for her preferences, \n          it is up to you whether you want to abbreviate words or not. For the most part, I do not since \n          most track names are short already.\n\n           \n               \n                 01_mine.wav \n               \n             \n               \n                 02_sparks_fly.wav \n               \n             \n               \n                 03_back_to_dec.wav \n               \n             \n               \n                 04_speak_now.wav \n               \n             \n               \n                 05_dear_john.wav \n               \n             \n               \n                 06_mean.wav \n               \n             \n               \n                 07_story_of_us.wav \n               \n             \n               \n                 08_never_grow_up.wav \n               \n             \n               \n                 09_enchanted.wav \n               \n             \n               \n                 10_better_than_revenge.wav \n               \n             \n               \n                 11_innocent.wav \n               \n             \n               \n                 12_haunted.wav \n               \n             \n               \n                 13_last_kiss.wav \n               \n             \n               \n                 14_long_live.wav \n               \n             \n               \n                 15_ours.wav \n               \n             \n               \n                 16_if_this_was_movie.wav \n               \n             \n               \n                 17_superman.wav \n               \n             \n         \n          Apply the naming to scheme to all the acoustic tracks.\n         \n          I am choosing to abbreviate  acoustic  to  acoust . Notice I used the same names \n          as the regular tracks, but just appended  _acoust  at the end.\n           \n               \n                 18_back_to_dec_acoust.wav \n               \n             \n               \n                 19_haunted_acoust.wav \n               \n             \n         \n          Apply the naming to scheme to all the last track.\n         \n          I am choosing to abbreviate  POP Mix  to  pop_mix . Notice I used the same name \n          as the regular tracks, but just appended  _pop_mix  at the end.\n           \n               \n                 20_mine_pop_mix.wav \n               \n             \n         \n        And that's it! If you would like more practice, look up the track listing for her other albums \n        and repeat this activity. It would be a great activity in consistency; for example, for the tracks \n        on the Taylor's Version albums, you would want to use the same naming scheme as in the folders. For \n        me, I would say  02_red_tv.wav  for  Red (Taylor's Version)  and to any acoustic \n        tracks, I would append  _acoust .\n       "
},
{
  "id": "p-74",
  "level": "2",
  "url": "S_filenames.html#p-74",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "version control "
},
{
  "id": "p-85",
  "level": "2",
  "url": "S_filenames.html#p-85",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cases "
},
{
  "id": "taylorswiftfolders",
  "level": "2",
  "url": "S_filenames.html#taylorswiftfolders",
  "type": "Activity",
  "number": "1.1",
  "title": "Folder Naming.",
  "body": "Folder Naming folder names \n        Suppose you work for Taylor Swift (wouldn't that be cool!). She is super busy right now recording albums, writing songs, spending time with family and friends, and making TikToks and needs your help. She has all of her songs saved on her computer in folders which are divided up by one album per folder. She has asked you to help her rename her folders so that she still knows what each folder is, but follows proper naming conventions. Use your knowledge from above to help Taylor out.\n       \n       Following is a list of her current folder names:\n        \n            \n             Taylor Swift\n            \n          \n            \n             Taylor Swift (Deluxe)\n            \n          \n            \n             Live From Clear Channel Stripped 2008\n            \n          \n            \n             Fearless\n            \n          \n            \n              Fearless (Platinum Edition)\n            \n          \n            \n             The Taylor Swift Holiday Collection\n            \n          \n            \n             Speak Now\n            \n          \n            \n             Speak Now (Deluxe Edition)\n            \n          \n            \n             Speak Now World Tour Live\n            \n          \n            \n             Red\n            \n          \n            \n             Red (Deluxe Edition)\n            \n          \n            \n             1989\n            \n          \n            \n             1989 (Deluxe Edition)\n            \n          \n            \n             reputation\n            \n          \n            \n             Lover\n            \n          \n            \n             folklore\n            \n          \n            \n             folklore (deluxe edtion)\n            \n          \n            \n             folklore: the long pond studio sessions (from the Disney+ special) [deluxe edition]\n            \n          \n            \n             evermore\n            \n          \n            \n             evermore (deluxe version)\n            \n          \n            \n             Fearless (Taylor's Version)\n            \n          \n            \n             Red (Taylor's Version)\n            \n          \n           \n            Midnights\n           \n          \n            \n             Unreleased Music\n            \n          \n            \n             Singles\n            \n           \n       \n        Wow! That's a lot of albums!\n        Complete the following tasks to make Taylor's life a little easier for the future.\n       \n        Please note that the answers to many of these exercises will vary depending on personal preferences. \n        I will give answers depending on how I might approach the problem; they are certainly not the only answer you could have given.\n       \n          Before we trying fixing a problem, let's figure out what the problem is. What do you notice \n          about these folder names? What about them is  incorrect ?\n         \n          The main thing that pops out to me are the spaces. Every multi-word folder name has a space. \n          Secondly, some of the names are very long. Third, there is not much consistency. Some names are \n          capitalized, others aren't. There are clearly deluxe versions of albums but some say  deluxe ,\n          others say  deluxe version , and even others say  deluxe edition . \n         \n          The three here are the \n          main issues; you may have thought of others. Great! I'm sure they are good observations. \n         \n          Ok, we've identified a problem. How can we go about deciding what to do about it? You may \n          already have some ideas, but stick with me here. Let's not just dive in and start removing spaces \n          and shortening folder names. Instead, let's make a plan.\n         \n          Identify some naming patterns. Are there any album names that are similar? Can you form any groups \n          of names?\n         \n          There are probably a lot of patterns you could have noticed. I grouped folder names into\n           \n               \n                Standard albums\n               \n             \n               \n                Deluxe albums\n               \n             \n               \n                Live albums\n               \n             \n               \n                Taylor's Version albums\n               \n             \n               \n                Other\n               \n             \n         \n          I am going to continue with the groups in the solution to  . \n          Feel free to branch off with your own groups or stick with me. \n         \n          Now that we have groups, we can figure out how to name one of each group, then apply that \n          naming style to all names in the group. Start with the standard albums, such as  Taylor \n          Swift . How can you change this name to stick with the conventions discussed above? \n         \n          Since there aren't any special modifiers to this album (such as deluxe or live), I say we just keep its name, but write them in kebab-case. Therefore,  Taylor Swift  would become  taylor-swift .\n         \n          Apply the naming to scheme to all folders with  regular  album titles.\n         \n          The following names are the modified versions:\n           \n               \n                 taylor-swift \n               \n             \n               \n                 fearless \n               \n             \n               \n                 speak-now \n               \n             \n               \n                 red \n               \n             \n               \n                 1989 \n               \n             \n               \n                 reputation \n               \n             \n               \n                 lover \n               \n             \n               \n                 folklore \n               \n             \n               \n                 evermore \n               \n             \n               \n                 midnights \n               \n             \n         \n          Continue with the deluxe group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          For the deluxe albums, the similarity is the word  deluxe . I don't bother with \n           edition  or  version ,  deluxe  is enough to convey the necessary information.\n          I also would like to abbreviate  deluxe  to  dlx . You could also choose to keep the \n          full word, but since we can't ask Taylor what she would prefer, I am sticking with the shorter. \n           dlx  gets the point across (this is a deluxe album) with 3 less characters. Following are \n          my changes for the deluxe group. There is one outlier: the Fearless Platinum Edition. I am \n          going to retain the  platinum  name since that is its true name.\n\n           \n               \n                 taylor-swift-dlx \n               \n             \n               \n                 fearless-pltnm \n               \n             \n               \n                 speak-now-dlx \n               \n             \n               \n                 red-dlx \n               \n             \n               \n                 1989-dlx \n               \n             \n               \n                 folklore-dlx \n               \n             \n               \n                 folklore-dsny-dlx \n               \n             \n               \n                 evermore-dlx \n               \n             \n         \n          Continue with the live group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          There are only two in this group, but there could be more in the future. Let's use  live  \n          to differentiate these folders from the others. I am choosing to not use  lve  or  lv  because \n          I think there are slightly ambiguous (it could mean  love !).\n           \n               \n                 clear-chnl-live \n               \n             \n               \n                 speak-now-live \n               \n             \n         \n          Continue with the Taylor's Version group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          I am going to again use kebab-case and use  tv  to indicate that the album is a Taylor's \n          Version. This will help cut down on name length.\n           \n               \n                 fearless-tv \n               \n             \n               \n                 red-tv \n               \n             \n         \n          Continue with the other group. Identify patterns, change one name, then apply those \n          changes to all the names in the group. Use your best judgement, but don't stress about the \n           perfect  name.\n         \n          These are mostly up to you. They have no specific pattern, but I will still apply kebab-case \n          and shorten the names.\n           \n               \n                 holiday-clctn  (I could even use  holiday  since there is only one holiday album)\n               \n             \n               \n                 unreleased \n               \n             \n               \n                 singles \n               \n             \n         \n        I think that's all of them! That may have seemed like a lot of work but I hope it was worthwhile.\n        It should now be much easier for Taylor to navigate her folders and quickly know that album they \n        contain.\n       "
},
{
  "id": "taylorswiftfiles",
  "level": "2",
  "url": "S_filenames.html#taylorswiftfiles",
  "type": "Activity",
  "number": "1.2",
  "title": "File Naming.",
  "body": "File Naming file names \n        We will focus on the folder that I renamed to be  speak-now-dlx . A list of her current file \n        names for these tracks follow. I should note that it is often helpful to prefix song names with \n        their track position so that they stay in order when in a folder. We won't remove those numbers. \n        Also,  .wav  indicates that the song is a WAV file (see   for more). We should not remove these either as this could result in file loss or corruption.\n         \n             \n              01 Mine.wav\n             \n           \n             \n              02 Sparks Fly.wav\n             \n           \n             \n              03 Back To December.wav\n             \n           \n             \n              04 Speak Now.wav\n             \n           \n             \n              05 Dear John.wav\n             \n           \n             \n              06 Mean.wav\n             \n           \n             \n              07 The Story Of Us.wav\n             \n           \n             \n              08 Never Grow Up.wav\n             \n           \n             \n              09 Enchanted.wav\n             \n           \n             \n              10 Better Than Revenge.wav\n             \n           \n             \n              11 Innocent.wav\n             \n           \n             \n              12 Haunted.wav\n             \n           \n             \n              13 Last Kiss.wav\n             \n           \n             \n              14 Long Live.wav\n             \n           \n             \n              15 Ours.wav\n             \n           \n             \n              16 If This Was A Movie.wav\n             \n           \n             \n              17 Superman.wav\n             \n           \n             \n              18 Back To December (Acoustic).wav\n             \n           \n             \n              19 Haunted (Acoustic Version).wav\n             \n           \n             \n              20 Mine (POP Mix).wav\n             \n           \n       \n        Like before, complete the following tasks to make Taylor's life a little easier for the future.\n       \n        Again note that the answers to many of these exercises will vary depending on personal preferences. \n        I will give answers depending on how I might approach the problem; these are not the only correct responses.\n       \n          Before we trying fixing a problem, let's figure out what the problem is. What do you notice \n          about these file names? What about them is  incorrect ?\n         \n          The main thing that pops out to me are the spaces. Every multi-word file name has a space. \n          Secondly, there are a few cases of non-consistency: Back To December says  Acoustic  whereas \n          Haunted says  Acoustic Version . \n         \n          The two here are the \n          main issues; you may have thought of others. Great! I'm sure they are good observations. \n         \n          Ok, we've identified a problem. How can we go about deciding what to do about it? You may \n          already have some ideas, but stick with me here. Let's not just dive in and start removing spaces \n          and shortening file names. Instead, let's make a plan.\n         \n          Identify some naming patterns. Are there any track names that are similar? Can you form any groups \n          of names?\n         \n          There are probably a couple patterns you could have noticed. I grouped track names into\n           \n               \n                 Regular  album tracks\n               \n             \n               \n                Acoustic tracks\n               \n             \n               \n                The last track\n               \n             \n         \n          I am going to continue with the groups in the solution to  . \n          Feel free to branch off with your own groups or stick with me.\n         \n          Now that we have groups, we can figure out how to name one of each group, then apply that \n          naming style to all names in the group. Start with the  regular  tracks.\n          How can you change these names to stick with the conventions discussed above?\n         \n          There isn't much we can do here. I will write the names in snake_case which will remove the \n          spaces and change every word to lowercase. Since we can't ask Taylor for her preferences, \n          it is up to you whether you want to abbreviate words or not. For the most part, I do not since \n          most track names are short already.\n\n           \n               \n                 01_mine.wav \n               \n             \n               \n                 02_sparks_fly.wav \n               \n             \n               \n                 03_back_to_dec.wav \n               \n             \n               \n                 04_speak_now.wav \n               \n             \n               \n                 05_dear_john.wav \n               \n             \n               \n                 06_mean.wav \n               \n             \n               \n                 07_story_of_us.wav \n               \n             \n               \n                 08_never_grow_up.wav \n               \n             \n               \n                 09_enchanted.wav \n               \n             \n               \n                 10_better_than_revenge.wav \n               \n             \n               \n                 11_innocent.wav \n               \n             \n               \n                 12_haunted.wav \n               \n             \n               \n                 13_last_kiss.wav \n               \n             \n               \n                 14_long_live.wav \n               \n             \n               \n                 15_ours.wav \n               \n             \n               \n                 16_if_this_was_movie.wav \n               \n             \n               \n                 17_superman.wav \n               \n             \n         \n          Apply the naming to scheme to all the acoustic tracks.\n         \n          I am choosing to abbreviate  acoustic  to  acoust . Notice I used the same names \n          as the regular tracks, but just appended  _acoust  at the end.\n           \n               \n                 18_back_to_dec_acoust.wav \n               \n             \n               \n                 19_haunted_acoust.wav \n               \n             \n         \n          Apply the naming to scheme to all the last track.\n         \n          I am choosing to abbreviate  POP Mix  to  pop_mix . Notice I used the same name \n          as the regular tracks, but just appended  _pop_mix  at the end.\n           \n               \n                 20_mine_pop_mix.wav \n               \n             \n         \n        And that's it! If you would like more practice, look up the track listing for her other albums \n        and repeat this activity. It would be a great activity in consistency; for example, for the tracks \n        on the Taylor's Version albums, you would want to use the same naming scheme as in the folders. For \n        me, I would say  02_red_tv.wav  for  Red (Taylor's Version)  and to any acoustic \n        tracks, I would append  _acoust .\n       "
},
{
  "id": "S_fileextensions",
  "level": "1",
  "url": "S_fileextensions.html",
  "type": "Section",
  "number": "1.2",
  "title": "File Extensions",
  "body": "File Extensions file extensions File extensions \n      Hint:  Control  +  F  or  Command  +  F  work well on this page.\n     Images file extensions images \n      Why would we need more than on extension for an image? A photo is a photo, right? Wrong.\n      Each of the file extensions have unique aspects and features. For instance, the Apple  .heic \n      file often takes up less storage space. However, not all programs can open them. \n      The  University of Michigan  \n      and  Kinsta \n      have great guides on the differences between some image file extensions. The table here just lists \n      the extensions and what they are, not the details on their use.\n     Image File Extensions Extension File Type .jpg  or  .jpeg Joint Photographic Experts Groups image .png Portable Network Graphics image .svg Scalable Vector Graphics image .gif A looped image\/video blend .eps Encapsulated PostScript (vector) image .bmp Bitmap image .tif  or  .tiff Tagged Image File Format .raw Raw image (usually from a camera) .HEIF High Efficiency Image File .HEIC High Efficiency Image Container (Apple) .psd Adobe Photoshop .ai Adobe Illustrator Videos file extensions videos \n       Adobe  \n      has a great guide on the differences between some video file extensions. The table here just lists \n      the extensions and what they are, not the details on their use.\n     Video File Extensions Extension File Type .mp4 MPEG-4 .mov QuickTime Movie .wmv Windows Media Viewer .avi Audio Video Interleave .prproj Adobe Premiere Pro Project .aep Adobe After Effect Project .fcp Apple Final Cut Project .camproj Camtasia Project .m4v iTunes Movie File Documents file extensions documents \n      There are many different file extensions that refer to documents. Many of them you will never \n      encounter. Only the main file types are listed here.\n       File Stack \n      has a good explanation on some of the file types here.\n     Extension File Type .doc  or  .docx Microsoft Word Document .xsl  or  .xslx Microsoft Excel Spreadsheet .ppt  or  .pptx Microsoft PowerPoint Presentation .pages Apple Document .key Apple Keynote Presentation .numbers Apple Numbers Spreadsheet .pdf Adobe Portable Document Format .rtf Rich Text Format Document .txt Plain Text Document .log Text Log File (often records messages) .md MarkDown Document .Rmd MarkDown Document for use in R \n        Note: technically,  .html  and  .xml  are considered document-type files. I am choosing \n        to place them under coding-type files instead.\n       Audio file extensions audio \n       makeuseof.com  has \n      great descriptions of the most common audio file types.\n     Extension File Type .mp3 MPEG Layer 3 (lossy compression) .wav Waveform Audio Format (uncompressed) .aiff Audio Interchange File Format (uncompressed) .aac Advanced Audio Coding (lossy compression) .wma Windows Media Audio (lossy compression) .flac Free Lossless Audio Codec (lossless compression) .aa  or  .aax Audible Audio File .m4a Audio-Only MPEG-4 (iTunes) .midi MIDI File Coding and Programming file extensions coding \n      There is a plethora of programming languages, software, and interfaces and each of them uses a \n      different file extension. \n     Extension File Type .R R Script .py Python Script .ipynb Jupyter Notebook .html HyperText Markup Language .css Cascading Style Sheets .js Javascript .sas SAS Script .xml eXtensible Markup Language .xslt eXtensible Style Sheet Transformations .ptx PreTeXt Markup File .tex LaTeX Document (typically for mathematics) .c C and C++ File .cpp C++ File .java Java Source .swift Swift Code File .vb Visual Basic File .vbs Visual Basic Script Data file extensions data \n      Many of these extensions also belong in   but are related enough to \n      merit another subsection.\n     Extension File Type .csv Comma Separated Values .tsv  or  .tab Tab Separated Values .json JavaScript Object Notation .csv Comma Separated Values .tsv Tab Separated Values .rds Single R Object .RData Multiple R Objects .sas7bdat SAS Data File Other File Exensions file extensions other Extension File Type .band Apple GarageBand File .logicx Apple Logic Pro File .exe Windows Executable File .zip Compressed Files .tar.gz Collection of (archived) files .app Mac Application .dmg Mac Disc Image (executable file) .pkg Package of Software or Files .otf Open Type Font .ttf TrueType Font "
},
{
  "id": "p-239",
  "level": "2",
  "url": "S_fileextensions.html#p-239",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "File extensions "
},
{
  "id": "tbl-image-extensions",
  "level": "2",
  "url": "S_fileextensions.html#tbl-image-extensions",
  "type": "Table",
  "number": "1.2.1.1",
  "title": "Image File Extensions",
  "body": "Image File Extensions Extension File Type .jpg  or  .jpeg Joint Photographic Experts Groups image .png Portable Network Graphics image .svg Scalable Vector Graphics image .gif A looped image\/video blend .eps Encapsulated PostScript (vector) image .bmp Bitmap image .tif  or  .tiff Tagged Image File Format .raw Raw image (usually from a camera) .HEIF High Efficiency Image File .HEIC High Efficiency Image Container (Apple) .psd Adobe Photoshop .ai Adobe Illustrator "
},
{
  "id": "tbl-video-extensions",
  "level": "2",
  "url": "S_fileextensions.html#tbl-video-extensions",
  "type": "Table",
  "number": "1.2.2.1",
  "title": "Video File Extensions",
  "body": "Video File Extensions Extension File Type .mp4 MPEG-4 .mov QuickTime Movie .wmv Windows Media Viewer .avi Audio Video Interleave .prproj Adobe Premiere Pro Project .aep Adobe After Effect Project .fcp Apple Final Cut Project .camproj Camtasia Project .m4v iTunes Movie File "
},
{
  "id": "S_filepaths",
  "level": "1",
  "url": "S_filepaths.html",
  "type": "Section",
  "number": "1.3",
  "title": "File Paths",
  "body": "File Paths file paths paths file paths \n      Imagine that I bring you to the edge of a forest, an immense, thick, unexplored forest. When we get there, I tell you that somewhere in that forest lays a chest of pure diamonds, put there 1000 years ago. Then I give you a task: I need you to go find that chest for me (yes, you get a portion of the loot). \n     \n      Think about how you might go about this task. The forest is unexplored; we only know that the chest exists inside. Where will you look first? Where will you enter? How will you keep track of where you've been? If you find it, how will you get back? There are many issues preventing you from doing your task efficiently. Sure, you could get lucky and the chest might be only 50 feet from the edge. But maybe it's 3000 feet away (or more!).\n     \n      Think of your computer like the forest. If I ask my computer to open a file called  poem.pdf , how will it know where to look for that file? Like you in the forest, it wouldn't even know where to start. Likewise, what if I had two files named  poem.pdf  in different folders? What if I had two files named  poem.pdf  in the same folder? How would it know which one to grab? It wouldn't! It's like me telling you there are two identical chests of diamonds in the forest and I want you to bring me the one I am thinking about. But you don't know the one I am thinking about.\n     \n      This situation necessitates file paths. Literally, they are the direct path through which the computer can find the exact file you are thinking of. You are basically telling the computer where the file is. Continuing the forest example, it's as if I told you to enter the forest, take a right at the first tree with a triangle, turn left at the lake, and walk six steps past the boulder that looks like a watermelon. You'd know exactly how to get there and would always find the correct file.\n     Constructing File Paths file paths file paths constructing difference mac and windows \n      What do computer file paths look like? You might have seen one before. Here is an example of a file path on a Mac:\n       \/Users\/<username>\/Documents\/poem.pdf \n      With this you can see exactly where my poem lies. First, go to a list of all the users on my computer. Second, look at the files for my username, go to the documents folder, and access the file called  poem.pdf . Easy!\n     \n      Maybe. Here's what that would look like on a Windows computer:\n       C:\\Users\\<username>\\Documents\\poem.pdf \n      That looks a little different. This one says to go to the C drive. Then look at the list of the users on the computer. Then go to the files for my username, then the documents folder, then the file  poem.pdf . \n     \n      However, they both work the same. The fundamental structure is  start at the outmost folder and work your way in through folders until you get to the file or folder you are looking for . Recall from   that files must have an extension while folders do not. This is an easy way to differentiate between folders and files.\n     \n      The key thing to note is that Mac and Windows are designed differently. Mac uses forward slashes to indicate a folder change and Windows uses backslashes (in Git Bash, Windows users can use forward slashes one reason for sticking with Git Bash!). But their structures are different as well. Notice that Windows has  C:  at the beginning. This is the C drive and there are other drives. Other differences are beyond the scope of this book. A brief history on file paths is given by  How-To Geek  and a rather hard-to-read explanation can be found on  Wikipedia .\n     \n      There are a few important points to remember when reading or finding a file path. The main goal from \n      this section is that you understand how a file path is structured. Paths will come back later.\n       \n           \n            File paths do not like spaces. Recall the lesson learned in  . \n            To a computer spaces indicate that you are ending the file path and starting something new. \n            Do not name folders or files you are planning on accessing with the command line with spaces.\n           \n         \n           \n            When you want to enter a new folder, use a slash (forward or backward) to indicate that you are going further in the document tree.\n           \n         \n           \n            File paths are unique; you cannot have one file path refer to two objects. This is why \n            your computer will never let you have two files with the same name and extension in the \n            same folder.\n           \n           \n            You can however have files with the same name in different folders. Since the file path is different, there are no issues with duplicate files.\n           \n         \n     Helpful Hints and Reminders file paths reminders File and Folder Naming \n        Recall   for alternative naming methods for files and folders. \n        Please, please, please do not use spaces (and consider renaming your existing files that you plan to use with the terminal). I know \n        it looks weird to name things using these cases, but if you really are set on learning Git and \n        the command line, you will want to follow this convention.\n       Finding File Paths file paths find \n        In theory, you will never need to type out the full file path. Your computer actually records \n        this information for you to just copy.\n       \n        On a Mac, right click on any file or folder you want the path for. Click  Get Info . \n        Under a label called  Where:  you can find the path. Right click on that path and hit \n         Copy as pathname  to copy the path in the same format as the paths above.\n       \n        On Windows, right click on any file or folder you want the path for. Click  Properties .\n        Under a label called  Location:  you can find the path. Highlight the text and copy it.\n       Using the fish Shell fish (shell) file paths fish shell fish \n         Advanced users only. \n       \n        If you changed your shell to fish as described in  , you won't \n        even have to copy a path or remember a path. fish contains autocomplete that looks for files \n        and folders in your current folder and recommends completions. \n       "
},
{
  "id": "S_whatiscommline",
  "level": "1",
  "url": "S_whatiscommline.html",
  "type": "Section",
  "number": "2.1",
  "title": "What is the Command Line?",
  "body": "What is the Command Line? command line command prompt command line command-line interface command line terminal command line shell \n      The first step to tackling the command line is to not be scared. Sure, it looks daunting and if you \n      make a mistake you might produce some lengthy error messages, but at the very minimum, the command line \n       is just another way to interact with your computer .\n     command line command prompt command-line interface terminal \n      Terminals are powerful and fast. Think of them as a more direct way to interact with your computer.\n      You can delete files with the terminal. You can create new files. You can move files. You can open \n      files. And more. There are many, many complicated and hard-to-comprehend functions of the command \n      line. Rest assured, this chapter sticks with the basics; we will learn necessary functions for \n      using Git (and a few others).\n     shell "
},
{
  "id": "p-272",
  "level": "2",
  "url": "S_whatiscommline.html#p-272",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "command line command prompt command-line interface terminal "
},
{
  "id": "p-274",
  "level": "2",
  "url": "S_whatiscommline.html#p-274",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "shell "
},
{
  "id": "whereiscommline",
  "level": "1",
  "url": "whereiscommline.html",
  "type": "Section",
  "number": "2.2",
  "title": "Where is the Command Line?",
  "body": "Where is the Command Line? command line command line location \n      If you have a computer, you have a terminal. You may not have ever used it or known it was there,\n      but it's hiding, waiting for use. Let's find it.\n     On a Mac command line mac \n        Luckily, the terminal is easy to find on a Mac: it's called  terminal.app  and can be \n        found in numerous ways.\n         \n             \n              (Recommended) Press  Command  +  Space  to open Spotlight Search.\n              Start typing  terminal  and the app should pop up quickly. Press  Enter  \n              or click on the result.\n             \n           \n             \n              Navigate to the Applications folder in the Finder. Then, open the Utilities folder and \n              double click on  terminal.app \n             \n           \n             \n              Find it through the Launchpad. What's the Launchpad, you ask? On most Mac keyboards, it \n              is on the key corresponding to  F4  and looks like a bunch of boxes arranged in \n              rows. You can also access the Launchpad by clicking the Launchpad icon in the Dock (also \n              boxes arranged in rows) or by going into the Applications folder in the Finder and double \n              clicking on the  Launchpad.app  icon. \n             \n             \n              Once in the Launchpad, find the Terminal. You can either search for it in the search bar \n              at the tope of the screen or scroll through your apps until you find it. (Note: it might \n              be in the Other folder).\n             \n           \n       Shells \n          At the top of my (Mac) terminal, it says  <my-username>  -bash . This indicates that I am using the  bash  shell. This is no longer the default for MacOS Catalina and later (as the terminal states). I will be sticking with  bash  in this book to avoid major differences between Windows and Mac instructions. If your terminal states something other than  bash  (such as  zsh  or  fish ) and you would like to use  bash  to follow along, paste  chsh -s \/bin\/bash This command stands for  CHange the SHell to the shell called bash in the bin folder  into the command line, press  Enter , enter your password to your computer, and restart the terminal. Otherwise, you are free to stick with the default shell; just know that there may be slight differences between this book and your terminal.\n         On Windows command line windows \n      For Windows users, the situation is a slightly more complicated. The underlying makeup of the \n      operating systems on Windows is differet than the basis for MacOS and other Unix-like systems \n      (such as Linux). This means that certain applications for Windows do not have a MacOS \n      compliment (and likewise some Mac applications do not have Windows versions). In addition, the \n      file system and organization are different bewteen the two.\n     \n      Separate instructions must be given for Windows users for certain tasks. \n      To make life easier for you, me, and everyone else, I recommend  not  using the default \n      Windows terminal. \n       \n          The default terminal for Windows is usually the Command Prompt. To access it, activate the \n          search feature of your computer by clicking the search box at the bottom of \n          your screen or by typing  Windows  +  S . Then search for  command prompt \n          and click on the result that comes up.\n         \n     \n      Instead, let's use a new terminal (Git Bash) that works with Git and conveniently uses the  bash  shell which allows me to use the same instructions for Mac as Windows. Detailed download instructions can be found in  . I will assume that you are using Git Bash for the remainder of the book.\n     On Linux command line linux \n      This will depend on the version and distribution you have installed. For this reason, I will not be able to provide instructions here. Please use the internet for help. Contributions for your specific distribution are welcome through a pull request or issue on GitHub.\n     "
},
{
  "id": "S_commands",
  "level": "1",
  "url": "S_commands.html",
  "type": "Section",
  "number": "2.3",
  "title": "Basic Commands",
  "body": "Basic Commands command line command line commands commands command line \n      Now that we have understand what a terminal does and how to find it, let's learn some commands. \n      We'll start with the basics.\n     Navigating Your Computer With the Command Line command line navigate \n      When your first open your terminal, you aren't given very much information. On Mac and Windows, \n      you get your username and maybe your computer name\/id but not much else. This isn't very helpful.\n      How can we do anything with our computer when we don't even know where we are on the computer?\n     Using  pwd command line pwd present working directory pwd present working directory directory folder Trying  pwd \n        Enter  pwd  at your terminal. What does it tell you?\n       \n        Anytime I talk about  enter something at your terminal , type in the desired command \n        and press  Enter .\n       \n       pwd  prints one thing: the file path to the folder that is  active  at your terminal. \n      When you first open your terminal, Mac users might see something like  \/Users\/<your-username>  \n      and Windows (Git Bash) users  \/c\/Users\/<your-username> . If you ever get lost in your terminal, \n      type in  pwd  for some reassurance. \n     Using  cd cd change directory file-path syntax syntax file-path command line cd change directory File-path syntax \n         \/Users\/your-username\/main-folder\/sub-folder1\/...\/file_name.file_extension \n     \n      Note the forward slashes; the slashes separate folder names whereas periods separate file names \n      and file extensions. \n     Trying  cd \n          Enter  cd Desktop\/  into your terminal. Did anything change?\n         \n          Try running  pwd  after  cd . Do you notice anything different here?\n         \n      If everything went correctly, you should now be  in  your Desktop directory (folder, if you \n      insist). You may have even noticed that your terminal changed. On any operating system, you should \n      see that the word  Desktop  appeared before your cursor. This is a nice check to make sure that \n       cd  worked and that you are where you want to be. \n     Using  ls command line ls ls list contents list contents Trying  ls \n          Enter  ls  into your terminal. What is the output? Is it what you expected?\n         \n        Perhaps unsurprisingly, your terminal should have just listed every single element on your \n        Desktop. If you every forget what files are in your  active  directory (and you don't want to \n        open your file browswer and navigate to the folder), use  ls  as \n        a refresher.\n       \n        You may have noticed that some files\/directories show up in your terminal that are not visible \n        on your Desktop. This is because most operating systems by default hide certain files that should \n        not be deleted. They still exist, they are just invisible to prevent accidental deletion. \n       Adding Files and Directories command line add files \n        Now that we are familiar with navigating our computer with the command line, let's learn a little \n        more. Suppose you are in your Desktop (which we are) and you want to add a text file. Since you \n        are already in the terminal, you don't want to open a text editor, create a new file, and save it \n        to your desktop. Or, suppose you have a file on the Desktop that you no longer need and you don't \n        to open you file browser, navigate to the Desktop, and delete the file. These examples may seem \n        silly, but now suppose you are six folders deep. It would take much more time to navigate to those \n        folders in a file browser than it would in the terminal.\n       Using  touch touch command line touch touch \n        Note: Don't forget to follow   when creating your files!\n       Trying  touch \n            Enter  touch test.txt  into your terminal. What happened? Did it work as you expected?\n           \n              Can you use a command we learned earlier to check if your  touch  worked?\n             \n        Oh dear, nothing happened! When you press enter after a  touch  command, the terminal gives \n        you no output at all. How can we verify that a  test.txt  file got created? Let's try \n         ls . Recall from   that we can use  ls  to give us a list \n        of all the items in our present working directory. (Remember that term? See  .) \n        Since we are currently on the Desktop and we want to see what files are on the Desktop, we can use \n         ls  to see if our file was created. Try it now!\n       File Extensions Matter file extensions extentions file extensions \n            When  touch ing a file, you  must  put the file extension at the end of the file name. \n            Otherwise, your computer won't know what type of file to create!\n           \n              Enter  touch text  at your terminal (it's safe, don't worry). \n             \n              Everything should still work as before. Did the terminal print any output? \n              Try running  ls . Does a file named  text  appear?\n             \n              Find the  text  file in your file browser and try to open it (by double clicking.)  \n              What happens?\n             \n              Mac users likely see the TextEdit app open. This is the default app for opening files like \n              this. Windows users will be prompted to determine which application should be used to open \n              the file.\n             \n            The purpose of this activity is to demonstrate the importance of file extensions. When none \n            are provided, your computer either has to guess what the file's contents are or simply cannot \n            interpret the file and asks you for help. We would like to avoid computer confusion as much as \n            possible. Common file extensions and their file types are listed in \n             . \n           \n        Just remember, anytime you wish to create a file, you need  touch , a name, and an extension.\n       Using  open open start open file command line open command line start open start Trying  open \n              In  , we created a new file called  test.txt . Open this file \n              with the terminal. If you are on a Mac, don't close it yet! Windows users may close the file \n              manually.\n             \n               open test.txt  or  start text.txt \n             Using  killall killall close file command line killall \n         This command is only on Mac. \n       kill all Trying  killall \n            Use the terminal to close the  test.txt  file that we just opened in  .\n            Remember that the command is case sensitive!\n           \n            Your computer should have opened up TextEdit (the default text editor for Mac). To close \n            this application, you should enter  killall TextEdit  at the command line.\n           Using  mkdir mkdir make directory command line mkdir make directory Trying  mkdir \n            Enter  mkdir testdir  on your command line. What happens? Is this what you expected \n            after learning about  touch ?\n           \n              Use  ls  to verify that the command worked.\n             \n        You should see, with  ls , that a new directory was created. Windows users may see that their \n        new  testdir  is a different color (and has a  \/ ). They both indicate that  testdir  \n        is a directory. Mac users may not see these which thus stresses the importance of \n         . When  ls  is used, the file extension is printed (when there is one). \n        Directories do not have file extensions so when interpreting  ls  output, it can usually be safely \n        assumed that any item without an extension is a directory. Note that for any OS, \n          applies for  mkdir  as well.\n       Putting It All Together, Part 1 command line commands \n          It's time to put your skills to the test! Using your terminal and the knowledge gained from \n          this section so far, \n          complete the following tasks. This activity assumes you have been following along with the \n          checkpoints. \n         \n            Navigate into the newly-created directory,  testdir .\n           \n             cd testdir  should do the trick!\n           \n            Determine if there are any files inside of this directory. What is the file path to \n             testdir ?\n           \n            Use  ls  and  pwd  here.\n           \n            Since we just created this directory,  ls  should not show any files; no output should \n            be provided.  pwd  can be used to find the file path which should look like \n             \/Users\/<your-username>\/Desktop\/testdir  or \n             \/c\/Users\/<your-username>\/Desktop\/testdir \n           \n            Create a new text file with a name of  My Greeting . Be sure to use proper naming techniques \n            and correct terminal syntax.\n           \n            You can use  ls  to verify that everything worked.\n           \n             touch my_greeting.txt  OR  touch myGreeting.txt  OR  touch my-greeting.txt  \n            OR  MyGreeting.txt  OR  MY_GREETING.txt \n           \n            Whenever we create a new file (of any type), we use  touch . Recall that  touch  \n            requires three pieces: the command, the file name, and the file extension. The command is \n             touch , the file name is  my_greeting  (recommended, although there are other \n            possible names), \n            and the file extension is  .txt . Put these together, and we get  touch my_greeting.txt .\n           \n            Open your text file and type a greeting into the first line. Save the file.\n            Remember to only use the command line to open the file!\n           \n             open my_greeting.txt  OR  open <file-name>.txt \n           \n            Close your text file. Mac users should use the command line whereas Windows users will have \n            to close it manually.\n           \n            This is a  .txt  file:  killall TextEdit .\n           Removing Files and Directories command line remove \n        Over the course of this section, we have added useless files and directories. We do not need our \n        test files or folders anymore, so let's learn how to delete them (with the terminal, of course!)\n       Using  rm rm remove file command line rm Removing Trying  rm \n              Use  ls  and  pwd  to verify that you are still in the  testdir  directory \n              and that the file  my_greeting.txt  exists.\n             \n              Remove the file  my_greeting.txt \n             \n               rm my_greeting.txt \n             \n              Use  ls  to verify that the process was successful.\n             Removing Files is Permanent remove files \n          Removing files is easy...Too easy. Notice that the terminal provided no output or verification \n          that the process was happening. Also notice that there was no dialog box asking if we were \n          really sure that we wanted to remove the file.\n         \n           Removing files with the terminal is permanent.  There is no recycle bin for these \n          files. There is no  undo  or  restore . The terminal deletes and forgets. Use extreme \n          caution when using  rm ; only remove what you are  absolutely sure  you need to remove. \n          You will not get a second chance and your computer will not ask you if you for verification.\n         cd  Backwards cd cd backwards change directory backwards backwards  cd command line cd change directories backwards parent directory Trying  cd  Backwards \n            Try it! Move backwards into the parent directory of  testdir . \n           \n            If successful,  pwd  should indicate that you are in the Desktop.\n           \n             cd .. \n           \n            As mentioned,  cd ..  will move you backwards. If you run  pwd , you should see \n            that you have returned to the Desktop;  ls  should give you all of the files we were \n            working with before.\n           Using  rmdir rmdir remove directory command line rmdir \n        You have the tools you need to remove files, but what about directories? If you'd like, try \n        removing our  testdir  directory with  rm . What happens? \n       remove directories Trying  rmdir \n            Use  rmdir  to remove the test directory,  testdir . \n           \n             rmdir testdir \n           Removing Directories is Permanent command line remove \n          Similar to  , removing directories is too easy. \n          Notice again that the terminal provides no output or verification \n          that the process was happening. Also notice that there was again no dialog box asking if we were \n          really sure that we wanted to remove the directory.\n         \n           Removing directories with the terminal is permanent.  \n          There is no recycle bin for these \n          files. There is no  undo  or  restore . The terminal deletes and forgets. Use extreme \n          caution when using  rmdir ; only remove what you are  absolutely sure  you need \n          to remove. \n          You will not get a second chance and your computer will not ask you for verification.\n         \n          Note: you can add in an extra layer of security with the  sudo  command, which requires your \n          computer's password to be entered.\n         Putting It All Together, Part 2 command line commands \n          You now know the basics of using using the command line. In this activity, \n          you will practice what you have learned. Be sure to use the command line for each task.\n         \n            Verify that you are still on your Desktop. Remove the rest of the test files we created \n            throughout the chapter. Check to make sure all the files have been removed.\n           \n            Use  pwd  to check if still on Desktop,  rm <file-name>  to remove files,\n            and  ls  to check if the files are gone.\n           \n            Navigate backwards one folder level.\n           \n             cd .. \n           \n            Navigate to your  Documents  folder. If you don't have one, create one and then navigate \n            to it.\n           \n             cd Documents  OR  mkdir Documents , then  cd Documents \n           \n            Create a new folder called  My Favorites . Remember to use proper naming techniques.\n           \n             mkdir my-favorites  (could use a different case)\n           \n            Navigate into your newly-created directory. Verify that you are there.\n           \n             cd my_favorites ,  pwd \n           \n            Create three files:  Food  (a text file),  Hobbies  (a Word document), and \n             Smells  (an Excel spreadsheet). Verify that these were created correctly.\n           \n             touch food.txt ,  touch hobbies.docx ,  touch smells.xslx ;  ls \n           \n            Open each of the three files, type your top three favorites of each category, and close \n            the files again. (Remember, Windows users will have to close the files manually).\n           \n            Mac:  open food.txt ,  killall TextEdit ; \n             open hobbies.docx ,  killall 'Microsoft Word' ,\n             open smells.xslx ,  killall 'Microsoft Excel' \n           \n            Windows:  start food.txt ,  start hobbies.docx ,  start smells.xslx \n           \n            Sorry, I know you just edited the documents, but now, it's time to delete them. Remove \n            all three of the files you edited. Verify they were removed.\n           \n             rm food.txt ,  rm hobbies.docx ,  rm smells.xslx ;  ls \n           \n            Navigate back to your Documents folder. Verify you are indeed there.\n           \n             cd .. ,  pwd \n           \n            Remove the directory we created in this activity. Verify that is was removed.\n           \n             rmdir my-favorites ,  ls \n           "
},
{
  "id": "p-289",
  "level": "2",
  "url": "S_commands.html#p-289",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "present working directory directory folder "
},
{
  "id": "try-pwd",
  "level": "2",
  "url": "S_commands.html#try-pwd",
  "type": "Checkpoint",
  "number": "2.3.1.2",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">pwd<\/code>.",
  "body": "Trying  pwd \n        Enter  pwd  at your terminal. What does it tell you?\n       "
},
{
  "id": "p-294",
  "level": "2",
  "url": "S_commands.html#p-294",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "change directory "
},
{
  "id": "p-295",
  "level": "2",
  "url": "S_commands.html#p-295",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "File-path syntax "
},
{
  "id": "try-cd",
  "level": "2",
  "url": "S_commands.html#try-cd",
  "type": "Checkpoint",
  "number": "2.3.1.3",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">cd<\/code>.",
  "body": "Trying  cd \n          Enter  cd Desktop\/  into your terminal. Did anything change?\n         \n          Try running  pwd  after  cd . Do you notice anything different here?\n         "
},
{
  "id": "p-301",
  "level": "2",
  "url": "S_commands.html#p-301",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "list contents "
},
{
  "id": "try-ls",
  "level": "2",
  "url": "S_commands.html#try-ls",
  "type": "Checkpoint",
  "number": "2.3.1.4",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">ls<\/code>.",
  "body": "Trying  ls \n          Enter  ls  into your terminal. What is the output? Is it what you expected?\n         "
},
{
  "id": "p-306",
  "level": "2",
  "url": "S_commands.html#p-306",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "touch "
},
{
  "id": "try-touch",
  "level": "2",
  "url": "S_commands.html#try-touch",
  "type": "Checkpoint",
  "number": "2.3.2.1",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">touch<\/code>.",
  "body": "Trying  touch \n            Enter  touch test.txt  into your terminal. What happened? Did it work as you expected?\n           \n              Can you use a command we learned earlier to check if your  touch  worked?\n             "
},
{
  "id": "fileextensions",
  "level": "2",
  "url": "S_commands.html#fileextensions",
  "type": "Activity",
  "number": "2.1",
  "title": "File Extensions Matter.",
  "body": "File Extensions Matter file extensions extentions file extensions \n            When  touch ing a file, you  must  put the file extension at the end of the file name. \n            Otherwise, your computer won't know what type of file to create!\n           \n              Enter  touch text  at your terminal (it's safe, don't worry). \n             \n              Everything should still work as before. Did the terminal print any output? \n              Try running  ls . Does a file named  text  appear?\n             \n              Find the  text  file in your file browser and try to open it (by double clicking.)  \n              What happens?\n             \n              Mac users likely see the TextEdit app open. This is the default app for opening files like \n              this. Windows users will be prompted to determine which application should be used to open \n              the file.\n             \n            The purpose of this activity is to demonstrate the importance of file extensions. When none \n            are provided, your computer either has to guess what the file's contents are or simply cannot \n            interpret the file and asks you for help. We would like to avoid computer confusion as much as \n            possible. Common file extensions and their file types are listed in \n             . \n           "
},
{
  "id": "p-321",
  "level": "2",
  "url": "S_commands.html#p-321",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "open start "
},
{
  "id": "try-open",
  "level": "2",
  "url": "S_commands.html#try-open",
  "type": "Checkpoint",
  "number": "2.3.2.2",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">open<\/code>.",
  "body": "Trying  open \n              In  , we created a new file called  test.txt . Open this file \n              with the terminal. If you are on a Mac, don't close it yet! Windows users may close the file \n              manually.\n             \n               open test.txt  or  start text.txt \n             "
},
{
  "id": "p-328",
  "level": "2",
  "url": "S_commands.html#p-328",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "kill all "
},
{
  "id": "try-killall",
  "level": "2",
  "url": "S_commands.html#try-killall",
  "type": "Checkpoint",
  "number": "2.3.2.3",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">killall<\/code>.",
  "body": "Trying  killall \n            Use the terminal to close the  test.txt  file that we just opened in  .\n            Remember that the command is case sensitive!\n           \n            Your computer should have opened up TextEdit (the default text editor for Mac). To close \n            this application, you should enter  killall TextEdit  at the command line.\n           "
},
{
  "id": "p-333",
  "level": "2",
  "url": "S_commands.html#p-333",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "make directory "
},
{
  "id": "try-mkdir",
  "level": "2",
  "url": "S_commands.html#try-mkdir",
  "type": "Checkpoint",
  "number": "2.3.2.4",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">mkdir<\/code>.",
  "body": "Trying  mkdir \n            Enter  mkdir testdir  on your command line. What happens? Is this what you expected \n            after learning about  touch ?\n           \n              Use  ls  to verify that the command worked.\n             "
},
{
  "id": "trycdtouch",
  "level": "2",
  "url": "S_commands.html#trycdtouch",
  "type": "Activity",
  "number": "2.2",
  "title": "Putting It All Together, Part 1.",
  "body": "Putting It All Together, Part 1 command line commands \n          It's time to put your skills to the test! Using your terminal and the knowledge gained from \n          this section so far, \n          complete the following tasks. This activity assumes you have been following along with the \n          checkpoints. \n         \n            Navigate into the newly-created directory,  testdir .\n           \n             cd testdir  should do the trick!\n           \n            Determine if there are any files inside of this directory. What is the file path to \n             testdir ?\n           \n            Use  ls  and  pwd  here.\n           \n            Since we just created this directory,  ls  should not show any files; no output should \n            be provided.  pwd  can be used to find the file path which should look like \n             \/Users\/<your-username>\/Desktop\/testdir  or \n             \/c\/Users\/<your-username>\/Desktop\/testdir \n           \n            Create a new text file with a name of  My Greeting . Be sure to use proper naming techniques \n            and correct terminal syntax.\n           \n            You can use  ls  to verify that everything worked.\n           \n             touch my_greeting.txt  OR  touch myGreeting.txt  OR  touch my-greeting.txt  \n            OR  MyGreeting.txt  OR  MY_GREETING.txt \n           \n            Whenever we create a new file (of any type), we use  touch . Recall that  touch  \n            requires three pieces: the command, the file name, and the file extension. The command is \n             touch , the file name is  my_greeting  (recommended, although there are other \n            possible names), \n            and the file extension is  .txt . Put these together, and we get  touch my_greeting.txt .\n           \n            Open your text file and type a greeting into the first line. Save the file.\n            Remember to only use the command line to open the file!\n           \n             open my_greeting.txt  OR  open <file-name>.txt \n           \n            Close your text file. Mac users should use the command line whereas Windows users will have \n            to close it manually.\n           \n            This is a  .txt  file:  killall TextEdit .\n           "
},
{
  "id": "p-352",
  "level": "2",
  "url": "S_commands.html#p-352",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Removing "
},
{
  "id": "try-rm",
  "level": "2",
  "url": "S_commands.html#try-rm",
  "type": "Checkpoint",
  "number": "2.3.3.1",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">rm<\/code>.",
  "body": "Trying  rm \n              Use  ls  and  pwd  to verify that you are still in the  testdir  directory \n              and that the file  my_greeting.txt  exists.\n             \n              Remove the file  my_greeting.txt \n             \n               rm my_greeting.txt \n             \n              Use  ls  to verify that the process was successful.\n             "
},
{
  "id": "removing-files",
  "level": "2",
  "url": "S_commands.html#removing-files",
  "type": "Warning",
  "number": "2.3.3.2",
  "title": "Removing Files is Permanent.",
  "body": "Removing Files is Permanent remove files \n          Removing files is easy...Too easy. Notice that the terminal provided no output or verification \n          that the process was happening. Also notice that there was no dialog box asking if we were \n          really sure that we wanted to remove the file.\n         \n           Removing files with the terminal is permanent.  There is no recycle bin for these \n          files. There is no  undo  or  restore . The terminal deletes and forgets. Use extreme \n          caution when using  rm ; only remove what you are  absolutely sure  you need to remove. \n          You will not get a second chance and your computer will not ask you if you for verification.\n         "
},
{
  "id": "p-362",
  "level": "2",
  "url": "S_commands.html#p-362",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "change directories backwards parent directory "
},
{
  "id": "try-cd-backwards",
  "level": "2",
  "url": "S_commands.html#try-cd-backwards",
  "type": "Checkpoint",
  "number": "2.3.3.3",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">cd<\/code> Backwards.",
  "body": "Trying  cd  Backwards \n            Try it! Move backwards into the parent directory of  testdir . \n           \n            If successful,  pwd  should indicate that you are in the Desktop.\n           \n             cd .. \n           \n            As mentioned,  cd ..  will move you backwards. If you run  pwd , you should see \n            that you have returned to the Desktop;  ls  should give you all of the files we were \n            working with before.\n           "
},
{
  "id": "p-368",
  "level": "2",
  "url": "S_commands.html#p-368",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "remove directories "
},
{
  "id": "try-rmdir",
  "level": "2",
  "url": "S_commands.html#try-rmdir",
  "type": "Checkpoint",
  "number": "2.3.3.4",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">rmdir<\/code>.",
  "body": "Trying  rmdir \n            Use  rmdir  to remove the test directory,  testdir . \n           \n             rmdir testdir \n           "
},
{
  "id": "removing-directories",
  "level": "2",
  "url": "S_commands.html#removing-directories",
  "type": "Warning",
  "number": "2.3.3.5",
  "title": "Removing Directories is Permanent.",
  "body": "Removing Directories is Permanent command line remove \n          Similar to  , removing directories is too easy. \n          Notice again that the terminal provides no output or verification \n          that the process was happening. Also notice that there was again no dialog box asking if we were \n          really sure that we wanted to remove the directory.\n         \n           Removing directories with the terminal is permanent.  \n          There is no recycle bin for these \n          files. There is no  undo  or  restore . The terminal deletes and forgets. Use extreme \n          caution when using  rmdir ; only remove what you are  absolutely sure  you need \n          to remove. \n          You will not get a second chance and your computer will not ask you for verification.\n         \n          Note: you can add in an extra layer of security with the  sudo  command, which requires your \n          computer's password to be entered.\n         "
},
{
  "id": "try-removing",
  "level": "2",
  "url": "S_commands.html#try-removing",
  "type": "Activity",
  "number": "2.3",
  "title": "Putting It All Together, Part 2.",
  "body": "Putting It All Together, Part 2 command line commands \n          You now know the basics of using using the command line. In this activity, \n          you will practice what you have learned. Be sure to use the command line for each task.\n         \n            Verify that you are still on your Desktop. Remove the rest of the test files we created \n            throughout the chapter. Check to make sure all the files have been removed.\n           \n            Use  pwd  to check if still on Desktop,  rm <file-name>  to remove files,\n            and  ls  to check if the files are gone.\n           \n            Navigate backwards one folder level.\n           \n             cd .. \n           \n            Navigate to your  Documents  folder. If you don't have one, create one and then navigate \n            to it.\n           \n             cd Documents  OR  mkdir Documents , then  cd Documents \n           \n            Create a new folder called  My Favorites . Remember to use proper naming techniques.\n           \n             mkdir my-favorites  (could use a different case)\n           \n            Navigate into your newly-created directory. Verify that you are there.\n           \n             cd my_favorites ,  pwd \n           \n            Create three files:  Food  (a text file),  Hobbies  (a Word document), and \n             Smells  (an Excel spreadsheet). Verify that these were created correctly.\n           \n             touch food.txt ,  touch hobbies.docx ,  touch smells.xslx ;  ls \n           \n            Open each of the three files, type your top three favorites of each category, and close \n            the files again. (Remember, Windows users will have to close the files manually).\n           \n            Mac:  open food.txt ,  killall TextEdit ; \n             open hobbies.docx ,  killall 'Microsoft Word' ,\n             open smells.xslx ,  killall 'Microsoft Excel' \n           \n            Windows:  start food.txt ,  start hobbies.docx ,  start smells.xslx \n           \n            Sorry, I know you just edited the documents, but now, it's time to delete them. Remove \n            all three of the files you edited. Verify they were removed.\n           \n             rm food.txt ,  rm hobbies.docx ,  rm smells.xslx ;  ls \n           \n            Navigate back to your Documents folder. Verify you are indeed there.\n           \n             cd .. ,  pwd \n           \n            Remove the directory we created in this activity. Verify that is was removed.\n           \n             rmdir my-favorites ,  ls \n           "
},
{
  "id": "S_advcommands",
  "level": "1",
  "url": "S_advcommands.html",
  "type": "Section",
  "number": "2.4",
  "title": "Advanced Commands",
  "body": "Advanced Commands command line advanced commands command line terminal advanced \n      If you seek a more advanced glance into the potential of the command line, you have come to the right place. Each of the following commands are not necessary to proceed through this book but may ease your workflow in the future. As you get comfortable with the terminal, consider adopting some of these commands.\n     Using  sudo sudo command line sudo \n      According to  University Information Technology Services ,\n       \n        The sudo command allows you to run programs with the security privileges of another user (by default, as the superuser). It prompts you for your personal password and confirms your request to execute a command by checking a file, called sudoers, which the system administrator configures. Using the sudoers file, system administrators can give certain users or groups access to some or all commands without those users having to know the root password. It also logs all commands and arguments so there is a record of who used it for what, and when.\n       \n     \n      This is a little too much for what is necessary here but has good information. Essentially,  sudo  exists to allow you to run commands as an admin who, in some cases, might have more permissions to run certain commands. The benefit of  sudo  is that your password is required.\n     \n      So, if there is ever a command that involves risky business (such as permanently deleting files or folders) or if you ever want to purposefully add a layer of safety, use the  sudo  command. The command is actually very simple: add the word  sudo  to the beginning of any terminal command and you will be required to enter your computer's password before the command executes.\n     Using  mv mv command line mv cp command line cp \n      The  mv  command has many uses, all revolving around moving and renaming files. There are a few use cases as described below. The title of each case is the situation you may find yourself in followed by a shell of the command, an example command, and a more detailed description of the command. This content is inspired by  the University of Alberta .\n       \n           You already have a file and you want to  rename  it \n           \n             mv <existing-file-name> <new-file-name> \n           \n           \n             mv birds.txt cats.txt \n           \n           \n            Takes prexisting file  birds.txt  and  renames  it to  cats.txt \n           \n         \n            You already have a file and you want to  move  it AND  rename  the file \n           \n             mv <existing-file-name> \t<destination-folder-name>\/<new-file-name> \n           \n           \n             mv birds.txt animals\/cats.txt \n           \n           \n            Takes prexisting file  birds.txt ,  renames  it to  cats.txt  and  moves  it to the  animals\/  folder. (Also removes the original  birds.txt )\n           \n         \n           You already have a file and you want to  move  it AND keep the same file name \n           \n             mv <existing-file-name> <destination-folder-name> \n           \n           \n             mv birds.txt animals\/ \n           \n           \n            Takes prexisting file  birds.txt  and  moves  it to the  animals\/  folder.\n           \n         \n           You already have a folder and you want to  rename  it OR you want to  move  files and folders in an existing folder to a different folder \n           \n             mv <folder-to-move> <destination-folder-name> \n           \n           \n             mv drums\/ instruments\/ \n           \n           \n            Takes prexisting folder  drums\/  and  moves  it into the folder  instruments\/ . If  instruments\/  didn't exists,  drums\/  would have been  renamed  to  instruments\/ \n           \n         \n           You already have  multiple  files and you want to  move  them to another folder \n           \n             mv <existing-file-name1> <existing-file-name2> ... \t<destination-folder-name> \n           \n           \n             mv dogs.txt cats.txt animals\/mammals\/ \n           \n           \n            Takes prexisting files  dogs.txt  and  cats.txt  and  moves  them to the  animals\/mammals\/  folder.\n           \n         \n           You already have a file and you want to  copy  it to another folder \n           \n             cp <existing-file-name> <destination-folder-name> \n           \n           \n             cp dogs.txt animals\/mammals\/ \n           \n           \n            (Notice the different command,  cp ) Takes prexisting file  dogs.txt  and  copies  it to the  animals\/mammals\/  folder. Keeps the original  dogs.txt .\n           \n         \n\n     \n      You can also use pattern-matching commands (wildcards) such as the asterisk (*) and period (.) but these are beyond the scope of this book.\n     Using  which which command line which \n      You may never need to use  which  but it might be useful in the future.  which  is used for finding the location of certain execetuables on your computer. The syntax follows  which <program-to-find>  and outputs the file path of that program.\n     \n      To test this out, try  which git ,  which bash , or  which fish .\n     "
},
{
  "id": "S_hubnavigate",
  "level": "1",
  "url": "S_hubnavigate.html",
  "type": "Section",
  "number": "3.1",
  "title": "Navigating GitHub",
  "body": "Navigating GitHub github navigate github \n      So what is GitHub? It is a website that allows us to share our \n      files with the world and it widely used by the coding\/programming community. With GitHub, any public code can be viewed by anyone. Each person is able to copy the code and mess with it on their own computer, all without the original being changed. But if someone wants to change the original, they can submit a request asking the owners to incorporate their changes. GitHub keeps track of all of this information and can also help with version control. If you make a big mistake, you can revert back to old versions and try again. GitHub works closely with Git (hence its name) and is a nice interface for many common Git functions.\n     \n      Before attempting to tackle Git, I think it's best to show you the ropes of GitHub. After we get set up here and get more comfortable with the jargon, we can move to Git. In this section we will create a GitHub account and get familiar with the layout of GitHub. Much of what is said in this section and chapter is directly applicable to Git ( ).\n     Creating A GitHub Account github create account account github \n      Creating a GitHub account is easy and free. Just be careful along the way; there are a few things \n      to take into consideration. If you already have a GitHub account, skip to  .\n      If you don't, keep reading.\n     \n      First, navigate to  GitHub . Any browser should work. Click on the \n       Sign Up  in the top right corner. A welome box should pop up. Follow the instructions to create\n      an account:\n       \n           \n            Enter your email\n           \n         \n           \n            Create a password\n           \n         \n           \n            Choose a username. Attention! Choose your username carefully. \n             Jennifer Bryan  \n            has some great tips for choosing a username. A few are reproduced here:\n            \n             \n                 \n                  Incorporate your actual name! People like to know who they're dealing with. Also \n                  makes your username easier for people to guess or remember.\n                 \n               \n                 \n                  Reuse your username from other contexts, e.g., Twitter or Slack. But, of course, \n                  someone with no GitHub activity will probably be squatting on that.\n                 \n               \n                 \n                  Pick a username you will be comfortable revealing to your future [or current] boss.\n                 \n               \n                 \n                  Shorter is better than longer.\n                 \n               \n                 \n                  Be as unique as possible in as few characters as possible. \n                  In some settings GitHub auto-completes or suggests usernames.\n                 \n               \n                 \n                  Make it timeless. Don't highlight your current university, employer, or place of \n                  residence, e.g. JennyFromTheBlock.\n                 \n               \n                 \n                  Avoid the use of upper vs. lower case to separate words. We highly recommend all \n                  lowercase. GitHub treats usernames in a case insensitive way, but using all \n                  lowercase is kinder to people doing downstream regular expression work with \n                  usernames, in various languages. A better strategy for word separation is to use a \n                  hyphen - or underscore _. [Again the ideas from   come back.]\n                 \n               \n                 \n                  I would like to add one note to her list: avoid gaming usernames. GitHub is a serious professional community and something like  Xx_sp1cyMU3TARD_xX  would not be appropriate.\n                 \n               \n            \n            While it is possible to change your username later, it is better to not fall back on that as \n            that can cause complications. As an example, my username is  ian-curtis . I would have \n            preferred to have it without any spaces but that was taken. It is short, simple, timeless, \n            and I do not feel bad sharing it with anyone. If you have a very common name, consider using \n            hyphens and underscores or rearranging your name. I could have tried  curtisi  or \n             curtian  (which sounds like I'm an alien). \n           \n         \n     \n      Once you finish setting up the account (email verification may be required), navigate back to the \n      home page ( github.com ) and carry on.\n     The Profile Page github profile repo repository repository github repo github repository \n      You should be on the home page of GitHub which might look something like my homepage in  . You may not see much if you just created an account. \n      Probably lots of buttons telling you to get started or take a tutorial and whatnot. Feel free to \n      click on those if you'd like, but I'd suggest following along here first and revisiting those later if you need more explanation. \n     My GitHub Homepage The GitHub home page \n      Your profile page can be found by clicking on the robot-y icon (see  ) in the top right and clicking on \n       Your profile . (Notice that the URL uses your username.) You probably don't see much. That's ok, \n      you haven't created anything yet! On this page (the  Overview  tab) you can see your popular \n      repositories, a graph of your contributions and a summary of your activity. Check out \n       my profile page  for an example.\n     The GitHub Navigation Bar The GitHub Navigation Bar \n      First, you can edit your basic profile information on the left hand side including your profile image, \n      name, bio, and location. I would recommend filling as much of that out as possible; it allows companies \n      and other people to find you and confirm that you are who you are.\n     repository repo \n      There are a few other tabs at the top of the page. The  Repositories  tab simply lists all of \n      your repos. (You can also find this page from the drop-down menu by your profile image in the top \n      right.) The other three are not important for basic use (I haven't even used them yet).\n     Settings and Customizations github settings github customize \n      Click on the profile icon in the top right ( ) and select  Settings . Don't be scared of the long \n      list of possible customizations that are available. Most are only applicable to experienced GitHub users. \n      I will introduce the settings you may be interested in right now. The headings of the following \n      paragraphs match up with the headings of the tabs on the GitHub page. Note that some tabs have been \n      excluded as well as some settings within some tabs. This does not mean that they are not important; \n      it just means that I don't think they are necessary for a beginner.\n     Profile github profile \n        Here, you can change your name, public email (if you have multiple AND if you have chosen to \n        make your email public), a mini bio, relevant info about your other social media and company, \n        location, and whether or not you are searching for a job. See   for more info.\n       Account github account \n        Here is where you can change your username.  I would strongly recommend against changing your \n        username except in dire circumstances.  This could lead to broken links or, if someone claims your old username, links to the wrong repository. This is why I hope you took the time to really think of a good username when created your account.\n       \n        Ok fine. If you have just created your account, have no repositories, have done pretty much \n        nothing on GitHub other than editng settings, AND are truly unhappy with your username, change it now. NOW. Then try not to do it again. \n       \n        This tab will also let you delete your entire account. It is in red for a reason. I would highly recommend never deleting your account. Even if you are done with GitHub and don't plan on ever using it again, others can still benefit from your code. Obviously some exceptions could apply here but for most purposes, you probably shouldn't delete your account.\n       Appearance github appearance \n        Here you can change how GitHub looks. Is white annoying? Switch to a dark theme. There are three \n        of them. You can choose to have it change automatically with your computer (assuming your \n        computer changes automatically). You can also edit the default emoji appearance.\n       \n        There is currently a feature in testing allowing a theme designed for colorblind users. To enable this, click on your avatar in the top right and select  Feature preview , then  Colorblind Themes , then  Enable . If you have feedback to give GitHub, you can also do that.\n       Account security github security \n        Change your password here and you can enable two-factor authentication. You can also see where you are currently logged in. If an unfamiliar session is active, I would recommend changing your password and\/or enabling two-factor authentication.\n       Billing & plans github billing \n        GitHub offers different  paid plans . Each of the plans has its own benefits (e.g., more storage, more collaborators) but the GitHub essentials work perfectly fine under the free plan and many people do not upgrade. Once you become more familiar with Git, GitHub, and start developing more projects, you might like an upgrade. However, there is no need to pay anything at this point. \n       \n        Bonus! Students get free GitHub Pro and access to a multitude of extra deals with their  Student Developer Pack .  Teachers  and  Schools  can also find benefits (some require a payment).\n       Emails github emails \n        You can choose to have multiple emails on your GitHub account. This may be something you want to \n        do as you can also select to have one of your emails be a backup email for security. You can \n        also select if you would like to keep your emails private or not.\n       Notifications github notifications \n        Pretty simple here. You can choose which notifications you would like to receive. Maybe keep the \n        defaults for now and you can edit them later when you get an idea of what exactly GitHub \n        sends notifications for. I still have the defualts selected and I don't get many emails at all.\n       Repositories github repository repository \n        If you just created your account, this is probably empty. That's ok! It will be populated soon with a list of all your repositories and repositories you have access to. I do want to point out the first setting,  Repository default branch . It may say  master  in the text box. If so, please change it to  main  (by typing and clicking  Update  which is the new Git\/GitHub standard. \n       \n        For more information on the transition from  master  to  main , please visit \n         TheServerSide .\n       Blocked Users github blocked \n        Hopefully you won't ever have to, but if you need to block a user, you can do so here.\n       \n      Hopefully you now have an idea of how GitHub is organized and are aware of the customizations you can make. However, we have barely scratched the surface of what GitHub can do. In the next section, you will create your own repository and learn some GitHub vocabulary.\n     "
},
{
  "id": "fig-hub-home",
  "level": "2",
  "url": "S_hubnavigate.html#fig-hub-home",
  "type": "Figure",
  "number": "3.1.2.1",
  "title": "",
  "body": "My GitHub Homepage The GitHub home page "
},
{
  "id": "fig-hub-navbar",
  "level": "2",
  "url": "S_hubnavigate.html#fig-hub-navbar",
  "type": "Figure",
  "number": "3.1.2.2",
  "title": "",
  "body": "The GitHub Navigation Bar The GitHub Navigation Bar "
},
{
  "id": "p-441",
  "level": "2",
  "url": "S_hubnavigate.html#p-441",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "repository repo "
},
{
  "id": "S_hubfirstrepo",
  "level": "1",
  "url": "S_hubfirstrepo.html",
  "type": "Section",
  "number": "3.2",
  "title": "The First Repository and File",
  "body": "The First Repository and File github repository repository \n      Buckle your seatbelts! Here we go into GitHub and the first repository. In this section, we will \n      create a repository with some information about ourselves. I recommend that you \n      don't just read the book; follow along with your own account. Practice makes improvement!\n     Creating a Repository github create repository \n    There are a few different ways to create a new repo (remember this abbreviation? see  ).\n     \n         \n          In the top right of the page, next to the profile avatar we saw in  , \n          there is a plus (+) sign. Click on that and then  new repository . \n         \n         \n          Note: GitHub differentiates bewteen a repository and a project. Don't get confused. We want \n          repository (and you will want that for most purposes). \n         \n       \n         \n          From the  GitHub homepage  there is a section on the left \n          called  Repositories . Next to the title is a green button that says  New . Click on that.\n         \n       \n         \n          If you navigate to the profile avatar in the top right, and click on  Your repositories , \n          there will also be a green  New  button near the top.\n         \n       \n\n    Each of these three methods will get you to the same page. It doesn't matter which one you click. \n   Various Methods to Create a New Repo Where to click for a new repo from the navigation bar Where to click for a new repo from the home page Where to click for a new repo from the  Your repositories  page \n        Let's begin the process of creating our first repo. Use one of the methods above get into \n        the  Create a new repository  screen ( ).\n       The New Repository Screen \n    It is not difficult to create a repo. It is difficult, however, to come up with a repo name. \n    Repository name requirements are similar to the conventions for file and folder names \n    ( ) in that they can have no spaces and should briefly describe what the \n    repo is for.  Please take the time to think about your repo names before you create them. \n    Renaming repositories is possible, but can cause complications in the future (such as broken links).\n    Again, names should be short, to the point, and descriptive. The repo name for this book is \n     gitstarted , the shortened title.\n   \n    If you are thinking  Wait! I don't know the details of my project!  then you are not alone. The problem with this is that you have to decide what your repo is going to be about before you name it. I have definitely been victim to this and have made some rather stupid names that I should've made better. For right now, I will tell you what to name your repo. In the future, it might be best to start with a private repo and then change the name (if you need to) before you make it public. Otherwise, just be aware of the consequences should you change it at any other time.\n   \n    In the  Repository name  box, \n    type the name  aboutme . Adding a description is optional and is not necessary for us right now. Next is the viewability. You may choose to make your repos private (only you and authorized collaborators can view\/edit) or public (everyone can view and attempt to edit, only you and authorized collabortors can approve edits). It does not matter what you select for this; do whatever your heart desires.\n   README file gitignore license \n    You now should have entered  aboutme  into the name box, selected if you wanted the repo to be \n    public or private, and checked the  README  box. Now, click the green  Create repository  \n    button to finalize the process.\n   Exploring the Code Tab github code tab \n      Whew, we made it! A new repo has just been created aaaaand a lot of new buttons and options \n      just appeared. A lot of new unfamiliar words and tabs. Please don't give up here! I will go through \n      all of the important aspects. Many of the pieces are not applicable to beginners and some will not \n      be applicable until we start working with Git and GitHub together. In this section, I will only be \n      explaining the key features and will slowly add in more as we learn more about GitHub.\n     The main new repository contents The top of the newly-created repository screen. Username, repo name, and various tabs (Code, Issues, Pull requests,  ) \n      Assuming you didn't click on anything, you should see a pretty empty page. In the top left, you should see your username and your repo name. This is common throughout GitHub so you always know where you are. Underneath that is a set of tabs that can be used to navigate through the repository-level settings and options (see  ). You should currently be on the  Code  tab. As may be expected, this tab displays all of the files associated with the repo; it is the  home page  for every repository. You should see that a  README.md  file shows up. Also notice that the contents of the README are displayed under the list of files. GitHub knows how important the READMEs are to explaining code that it automatically displays the contents of the file. Right now, ours is empty (except for the default title).\n     \n      To summarize, this is all you should care about for now:\n       \n           \n            The navigation at the top\n           \n         \n           \n            The content of the  Code  tab\n           \n         \n           \n            Noticing our README file in the list of files\n           \n         \n           \n            Noticing the contents of the README file underneath the list of files\n           \n         \n     Editing a File github edit files \n      Well, we have a README file, let's edit it! GitHub makes it rather simple to edit files. \n      There are a two main ways to edit the README file on GitHub:\n       \n           \n            Click on the file name  README.md  in the list of files. Click on the pencil icon on the \n            right of the header of the README file.\n           \n         \n           \n            Click on the pencil icon found along the header of the README file (under the list of files).\n           \n         \n     Two ways to edit a README file Pencil icon on the README file found on the Code tab under the list of files. Pencil icon on the README file found after clicking on the README file in the list of files. \n          Use one of the methods above to open the README file and get to its editing screen.\n         \n    As discussed in  , a file ending with  .md  is a markdown file. \n    All README files should be markdown files and are able to understand markdown syntax. Essentially, \n    markdown allows us to communicate basic word processing functions simply by typing certain symbols. \n    Have you ever noticed that you can't bold or italicize text in Google? \n     Control  ( Command ) +  B  or  I \n    don't work there! They also won't work in markdown files, unfortunately. But that doesn't mean we can't \n    bold or italicize text. \n    I will not discuss everything on markdown here, so some basic functions are below. It will be in your best \n    interest to become familiar with markdown and its more advanced features sooner rather than later.\n     Markdown Basics markdown \n        The most basic markdown tool is simple text. Just type like you normally would into the text field \n        and the result will be normal, unformatted text. However \n\n         \n             \n              To italicize a word or phrase, put one asterisk around it:  *I'm italicized* \n             \n           \n             \n              To bold a word or phrase, put two asterisks around it:  **I'm bold** \n             \n           \n             \n              To create headings, place hashtags (pound signs, if you insist)  and a space before the text \n              you wish to be in the heading:  # A Title . The more hashtags you add, the deeper the \n              heading level. Thus,  ## A Subheading  is a level two heading whereas  ### Another Subheading  \n              is a level three heading.\n             \n           \n             \n              To create a bulleted list, start a line with an asterisk (*) and a space. For numbered lists, \n              start a line with a number and a period (and a space). \n             \n           \n             \n              To put words into a code cell, place a backtick around the code:  `import requests` . \n              (The backtick is located \n              to the left of the 1 key on American keyboards.)\n             \n           \n\n        You can also add images, gifs, links, links with text intead of urls, tables, and \n        multi-line code chunks. For more information, see \n         Basic Markdown Syntax \n        and  Extended Markdown Syntax .\n\n       \n        It is also important to note that GitHub Markdown differs slightly from other flavors of Markdown. See  a nice table from GitHub user vimtaai .\n       markdown \n          Let's practice your markdown skills! Here, you will make the \"aboutme\" repo name true. Feel \n          free to use the guidelines and sources above. You could also search online if you aren't sure \n          how to do what you want to do. I have provided my (basic) example  in the repo for this book  (titled  README_aboutme.md  in the  book-activities  folder). \n          But be creative! There aren't any  right  answers here.\n         \n          Github is pretty cool in that it will show you realtime updates of what your Markdown file will \n          look like after you're done typing. There is a  Preview  tab right above the first line of \n          your README file (you are currently on  Edit file ). After each task below, check the preview \n          to verify that what you typed worked as expected.\n         \n            Currently, the title of the README is the repo name. Change the title to a more human-readable \n            one.\n           \n            In the first paragraph, type your name (or your username), how many pets you have, and your \n            favorite hobby.\n           \n            In a second paragraph, type a sentence stating who your favorite music artist is. Then, make \n            an ordered list of your favorite songs from that artist.\n           \n            Create a heading level two titled  Oh Look, More Things About Me \n           \n            In a third paragraph, write two sentences with two cool facts about you. These could be made up, \n            no one will know! After those facts, create an unordered list of your favorite musical artists \n            after the one in the second paragraph.\n           \n            Go back to the previous paragraphs and bold two words and italicize two words.\n           \n            Extra Credit: Add an image, a nested list of your favorite colors and why they are your favorite, \n            a link to your favorite YouTube video, and, if you know a coding language, some code.\n           \n          Don't leave your file yet! There's one more thing left to do.\n         The GitHub Commit Changes Dialog Shows dialog box of commit message, description, commit branch, and commit button for a commit on GitHub commit \n      Take care to notice the difference between committing and saving. Saving is easy. You can add a word, then save. Add a word, save. And so on. Think of commiting as adding a word, saving,  and closing the document . Now everytime you want to add another word you have to open the entire document again, add the word, save, and close the document again. This system is put in place to help with version control. Instead of there being one version for each new word you add, there is one version for each commit. Each commit represents a stamp on the version control timeline. When coding, you save your files, but commit your changes. This will become more apparent when we work with Git and with multiple files.\n     \n      It might be worth saying again just to make sure you've got it. Instead of there being one version for each new word you add, there is one version for each commit. Projects are typically broken up into tiny pieces. Each of these pieces would correspond to a commit. So if something goes wrong, you can revert back to a previous commit. We don't want commits to be for every word since it would take forever to find the commit you want to revert to. Conversely, we don't want commits to contain too many edits as that would require more work if we had to revert backwards.\n     An Extra Commit Example github commit commit \n        Let's consider one example to help understand the benefits of thinking in commits. Suppose I \n        was working on a small video game and I was tasked with creating different worlds a character could visit. With commits in mind, I decide to break down the task into chunks: I will build one world at a time. When I am done with one world, I will commit. When I am done with another world, I will commit a second time. And so on.\n       \n        This is different than creating a window in a building in the first world, then saving. Then creating two more windows and a door, then saving. Then adding some a tree and some flowers, then saving. We save much more often than we commit. But  we save using our computer and commit using Git\/Gitub.  I would never save to Github or commit to my computer. Saving is light, commiting is heavy.\n       \n        That being said, do make sure to save your files! You want to save your progress on your computer, but there is no need to commit after each time you save.\n       \n      You know should feel slightly more comfortable with the Code tab and editing a file on Github. The \n      next chapter will look at branches which help with adding new features to our code.\n     "
},
{
  "id": "fig-hub-new-repo",
  "level": "2",
  "url": "S_hubfirstrepo.html#fig-hub-new-repo",
  "type": "Figure",
  "number": "3.2.1.1",
  "title": "",
  "body": "Various Methods to Create a New Repo Where to click for a new repo from the navigation bar Where to click for a new repo from the home page Where to click for a new repo from the  Your repositories  page "
},
{
  "id": "exercise-11",
  "level": "2",
  "url": "S_hubfirstrepo.html#exercise-11",
  "type": "Checkpoint",
  "number": "3.2.1.2",
  "title": "",
  "body": "\n        Let's begin the process of creating our first repo. Use one of the methods above get into \n        the  Create a new repository  screen ( ).\n       "
},
{
  "id": "fig-hub-new-repo-screen",
  "level": "2",
  "url": "S_hubfirstrepo.html#fig-hub-new-repo-screen",
  "type": "Figure",
  "number": "3.2.1.3",
  "title": "",
  "body": "The New Repository Screen "
},
{
  "id": "p-469",
  "level": "2",
  "url": "S_hubfirstrepo.html#p-469",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "README file gitignore license "
},
{
  "id": "fig-hub-repo-tabs",
  "level": "2",
  "url": "S_hubfirstrepo.html#fig-hub-repo-tabs",
  "type": "Figure",
  "number": "3.2.2.1",
  "title": "",
  "body": "The main new repository contents The top of the newly-created repository screen. Username, repo name, and various tabs (Code, Issues, Pull requests,  ) "
},
{
  "id": "fig-hub-edit-readme",
  "level": "2",
  "url": "S_hubfirstrepo.html#fig-hub-edit-readme",
  "type": "Figure",
  "number": "3.2.3.1",
  "title": "",
  "body": "Two ways to edit a README file Pencil icon on the README file found on the Code tab under the list of files. Pencil icon on the README file found after clicking on the README file in the list of files. "
},
{
  "id": "exercise-12",
  "level": "2",
  "url": "S_hubfirstrepo.html#exercise-12",
  "type": "Checkpoint",
  "number": "3.2.3.2",
  "title": "",
  "body": "\n          Use one of the methods above to open the README file and get to its editing screen.\n         "
},
{
  "id": "try-markdown",
  "level": "2",
  "url": "S_hubfirstrepo.html#try-markdown",
  "type": "Checkpoint",
  "number": "3.2.3.3",
  "title": "",
  "body": "markdown \n          Let's practice your markdown skills! Here, you will make the \"aboutme\" repo name true. Feel \n          free to use the guidelines and sources above. You could also search online if you aren't sure \n          how to do what you want to do. I have provided my (basic) example  in the repo for this book  (titled  README_aboutme.md  in the  book-activities  folder). \n          But be creative! There aren't any  right  answers here.\n         \n          Github is pretty cool in that it will show you realtime updates of what your Markdown file will \n          look like after you're done typing. There is a  Preview  tab right above the first line of \n          your README file (you are currently on  Edit file ). After each task below, check the preview \n          to verify that what you typed worked as expected.\n         \n            Currently, the title of the README is the repo name. Change the title to a more human-readable \n            one.\n           \n            In the first paragraph, type your name (or your username), how many pets you have, and your \n            favorite hobby.\n           \n            In a second paragraph, type a sentence stating who your favorite music artist is. Then, make \n            an ordered list of your favorite songs from that artist.\n           \n            Create a heading level two titled  Oh Look, More Things About Me \n           \n            In a third paragraph, write two sentences with two cool facts about you. These could be made up, \n            no one will know! After those facts, create an unordered list of your favorite musical artists \n            after the one in the second paragraph.\n           \n            Go back to the previous paragraphs and bold two words and italicize two words.\n           \n            Extra Credit: Add an image, a nested list of your favorite colors and why they are your favorite, \n            a link to your favorite YouTube video, and, if you know a coding language, some code.\n           \n          Don't leave your file yet! There's one more thing left to do.\n         "
},
{
  "id": "fig-hub-commit",
  "level": "2",
  "url": "S_hubfirstrepo.html#fig-hub-commit",
  "type": "Figure",
  "number": "3.2.3.4",
  "title": "",
  "body": "The GitHub Commit Changes Dialog Shows dialog box of commit message, description, commit branch, and commit button for a commit on GitHub "
},
{
  "id": "p-500",
  "level": "2",
  "url": "S_hubfirstrepo.html#p-500",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "commit "
},
{
  "id": "S_hubbranches",
  "level": "1",
  "url": "S_hubbranches.html",
  "type": "Section",
  "number": "3.3",
  "title": "Working With Branches",
  "body": "Working With Branches branches github branches \n      Suppose you were writing a three-stanza poem for a contest. The final product must be handwritten on fancy letterhead, in high-quality black pen. As multiple drafts go by, you finalize the first and the third stanza. You're so confident in them that you write them on the letterhead in pen. But you're stuck on the second stanza.\n     \n      After some introspection and brainstorming, you finally come up with two potential second stanzas. But you can't decide between the two! You decide that the best way to figure out which one you like is to write each one in the poem and see if it flows with the rest. You can't just write one in the official poem (in pen!). What if the one you choose isn't what you like? Then you have to rewrite the entire poem.\n     \n      Instead, you decide to get out two pieces of scratch paper and write the poem in pencil and with a respective second stanza. That way you can hold them side-by-side and compare their flow. This method makes it easier for you to decide which of the two candidates you prefer. Once you have done so, you write the final stanza in pen on the letterhead and recycle the scratch paper with your drafts.\n     branches Thinking About Branches main branch branches main branch Diagram of a commit from  main  to  main Arrow diagram. Main branch to README right back to main branch through commit \n     This type of editing is usually discouraged.  It is best practice to create a new branch, made some edits there, then submit a pull request to merge your changes into the main branch.\n   \n    Whoa. I said a lot of stuff there. Lots of new words and things you don't know how to do. Don't worry, I'll guide you through it in this section. When you get a new project, you want to try and break it up into pieces. Each piece will have its own branch on the Github tree. For instance, the two poems that you wrote on scratch paper above were two branches off of the official poem. They each had the same first and third stanzas; only their second stanzas differed. See   for a visualization of branches in this instance.\n   Diagram of two branches off of main Arrow diagram. Main branch splits into two branches, Poem 1 and Poem 2. committing merge pull request Diagram showing two possible merges into main Arrow Diagram. Main branch splits into two branches, Poem 1 and Poem 2. Poem 1 branch goes back into main. Arrow Diagram. Main branch splits into two branches, Poem 1 and Poem 2. Poem 2 branch goes back into main. \n    You will also often hear about pull requests. Recall how GitHub allows anyone to edit anyone else's code, but in order to change the official version, they have to ask for permission. The asking for permission is sending a pull request. You are asking the creator of the main branch their permission to pull in your changes. Don't worry too much about this now; we will cover it when we get to multi-person collaboration. You will see the term come up in this chapter however which is why I chose to introduce it here.\n   Creating a Branch github branches branches create \n      Creating a branch is not difficult. To do so, first make sure you are on the  Code  tab \n      of your repository titled  aboutme . Below the list of tabs, you should have a row of \n      items. The first is a button with a branch-like icon with the word  main . Next to that, there\n      is the same branch-like icon with  1 branch  and then a tag-like icon with  0 tags  ( ).\n       Your numbers may be different if you played around with GitHub before this step.  Now,\n\n       \n           \n            Click on the word  main . This will open a drop-down menu with all of your current branches ( ). You probably only have one branch: the main branch.\n           \n         \n           \n            We will be adding a part to our README file: our favorite animal.\n            Type  animal  in to the textbox that appears. Your cursor should navigate their automatically.\n           \n         \n           \n            Since we don't have a branch named  animal , GitHub asks us if we want to create a new \n            branch with that name. That is indeed what we want to do. Click on  Create branch: animal from 'main' \n           \n         \n     Reference for creating a new branch on GitHub \n      Once you have created the new branch  animal , your screen will have changed slightly. The \n      branch-like icon with the word  main  has changed to say  animal . This is how you will \n      know what branch you are looking at. Also notice how it says we have  2 branches . We do: main \n      and animal. Right underneath those items, you may also notice GitHub has placed a box stating that \n       This branch is up to date with main. . This is what we should expect. This statement indicates \n      that the  main  branch and the  animal  branch are identical (see  ).\n     Diagram mapping branches after creating the animal branch Arrow diagram. Main branch to animal branch. A Few Notes on Branches branches \n         \n             \n              Take caution when naming branches. You should follow the same guidelines the were discussed \n              with file and folder names in  . \n             \n           \n             \n              Branch names should be extremely descriptive in the shortest way possible. It is wise to \n              break up your project into distinct chunks and assign one branch for each chunk.\n             \n           \n             \n              It is very easy to get lost within branches. You can create sub-branches off of normal \n              branches. You can delete branches or ignore them. I advise only creating the branches you \n              need at the current moment. If sub-branches (i.e., sub-tasks) are something you are interested\n              in working with, I would recommend keeping a picture of the relationship between branches.\n             \n           \n             \n              Once you are done with a branch, delete it. Otherwise, it will clog up your branch list. You can always create it again.\n             \n           \n       Working On a Branch branches edit \n      We named the new branch  animal  to describe the changes we plan to make: add our favorite\n      animal. Editing a file on a branch is no different than editing a file on  main . However, we \n      now have a safeguard. We can edit and commit as much as we want to the  animal  branch and \n      never make any changes to  main . Returning \n      to the analogy at the beginning of the section, we no longer have to write in pen on fancy paper \n      unless we are sure we want to change something.\n       \n     \n      Hopefully you are able to see the power in this. In a more serious project, commiting too early could have much bigger ramifications. Suppose I am coding a new character for a video game and the character has to use vulgar language. In a simple workflow, I would create a branch called  vulgar  or  new_npc  with a sub-branch of  language . Then, I would incorporate my code on my branches. Once that was done, I would run my code to test that it worked. Then I would submit a pull request, requesting my boss to pull in my new changes into the official version of the game. They would likely take a look at my code and try it themselves before accepting the changes. But let's say I forgot to add in the censorship beep over the language. If I had just merged right into main, my mistake may have been missed and I could get in serious trouble. But since I worked on a branch, my forgetfulness can be caught before the changes get incorporated and there won't be any flustering to quickly revert changes or fix the error.\n     Editing a File On a Branch \n          Exploring the ideas in  , add a level two heading to your README called \n           My Favorite Animal . Underneath that, type your favorite animal. Do not commit yet.\n         \n          The current state of the branch is shown in  .\n         Diagram showing branches after add a favorite animal Arrow diagram. Main branch to animal branch. Animal branch points to new edits. commit message \n      Let's create a commit message for our changes on the  animal  branch. In the  Commit changes  block, there is a text box that is autofilled with  Update README.md . This is the default and for some instances may be enough. But I have the tendency to write slightly more detailed messages for my commit and I recommend you do so as well. Instead, type  add favorite animal . There is no need to add the file name as this message will only be tied to the file(s) you have edited. (Later on, we will see that specific commit messages are only associated with the files you have staged and committed but that's a topic for  .)\n     A Note On Commit Messages commit message \n        It is up to you how to format your message. Some people write in complete sentences while others \n        use incomplete sentences with capital letters. Some people use past tense, others present tense, \n        and even others use present participles (add ing ). I choose to use present tense with \n        incomplete sentences and lowercase letters. But that's my preference. You should find what you \n        like and stick with it.\n       \n         Except when you're editing someone else's files. In this case, pay attention to how someone else words their commit messages and imitate them. This will make life easier for the owner of the files and for anyone else who looks at the files in the future. You may even find that your commit message is changed by the owner of a repository to match their guidelines.\n       \n      It is not necessary to fill out the description text box (feel free to do so if you would like!). Ensure the  Commit directly to the  animal  branch.  is selected, then click  Commit changes .Your file should be updated! Just remember,  you have only updated the copy of the file on the  animal  branch, not  main .\n     \n      Navigate back to the code tab to continue. Make sure you are still on the  animal  branch. \n      You can verify this by looking at the drop-down menu text or by checking the contents of your \n      README file (if your favorite animal is there, you are on the  animal  branch).\n     Diagram showing our commit from  animal  to  animal Arrow diagram. Main branch to animal branch. Animal branch points to new edits. New edits points back to animal. Creating a Pull Request (with Yourself) pull request github pull request merge github merge pull request \n      I admit, it is silly to have to work with pull requests when working solo. Why would I need to ask myself permission to pull in my own changes? But pull requests are essential when working with multiple collaborators and I recommend using branches and pull requests in your own individual work for practice and good habits.\n     \n     commit ahead and behind \n      Pull requests are only necessary when using branches (recall how when we edited the README file directly from the main branch we had no pull requests). We are currently in a situation that would require a pull request. How do we create one? First notice (on your GitHub repository for the  animal  branch) how a new message has appeared. This probably says\n       \n        This branch is 1 commit ahead of main.\n       \n      This is GitHub's way of telling you that the branch you are currenlty on has changes that are not reflected on the main branch. Specifically, we have committed one time and the changes from that single commit do not appear on main. We could go and edit the README file some more and commit those changes. In that case, we would be 2 commits ahead of main.\n     \n      The dialog box that contains this message also has another feature: a  Contribute  option.\n      If you click on this option, a box pops up telling us again that we are 1 commit ahead of main. \n      In green is a button inviting us to  Open pull request . Click on this. \n     \n      There is a lot on this page but most of it will be dealt with later. For right now, notice that \n      GitHub tells us which branch we are trying to send to main at the top.  animal  should be on \n      the right and is pointing towards  main . Next to this, you should see a check mark and an \n       Able to merge  message. This is good; see   if your branches cannot be automatically merged.\n     \n      Your cursor should have automatically navigated to a dialog box. This has defaulted to our latest \n      commit message. You should make sure that you have put an informative message on what your pull request accomplishes as a whole. Remember, it is possible to have multiple commits before opening a pull request so you could have adjusted a few things. For us,  add favorite animal  is sufficient and we can open the pull request. Click on the green  Create pull request  button.\n     \n      Nice, another new screen. This time notice how we have changed tabs. We are now in the  Pull requests  area, which should make sense. The pull requests page is for more than just accpeting pull requests. If someone else has contributed to your repo and has opened a pull request, you can start a conversation here. Suppose you have a question about someone's changes or think they should improve their addition before you approve it. You can say that here. \n     merge \n      Hopefully you were given the  Pull request successfully merged and closed  message. From here, click on  Delete branch . You should have no fear about deleting the branch at this point. Your changes will not be lost because you just incorporated them into  main . You now have two identical copies of the same files and can get rid of the extraneous copy: your old branch. If it makes you feel better, GitHub keeps track of commits and merges. If you ever want to revert back to an old version, you can in  . For now, go back to the  Code  tab and verify that your favorite animal appears in the README in the main branch.\n     Diagram showing a pull request from  animal  to  main Arrow diagram. Main branch to animal branch. Animal branch points to new edits. New edits points back to main. Branches and Pull Requests \n          It is time to put together what you learned in this section and make some edits of your own.\n          Don't be afraid to look back at what we did earlier for reassurance. Start this exercise on \n          the  Code  tab of your  aboutme  repo. The goal of this exercise is to add another section\n          to the README file.\n         \n          Think about something about you that you have not put in the README yet. Perhaps your favorite \n          food, quote, or historical character. Once you have chosen what you want to add, create a \n          branch with an appropriate name.\n         \n          Edit your README file. You should have at the very least a new level two heading indicating \n          what you are adding and a piece of text with your addition. \n         \n          Add an approporiate commit message and commit your changes to your new branch.\n         \n          Open a pull request to merge your changes into the main branch.\n         \n          Merge your new pull request into main and delete your old branch.\n         \n          Verify that your change did in fact get merged into main.\n         \n      Congratulations! Hopefully you have a better understanding of how branches and pull requests work\n      in GitHub (and their potential).\n     "
},
{
  "id": "p-510",
  "level": "2",
  "url": "S_hubbranches.html#p-510",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "branches "
},
{
  "id": "p-511",
  "level": "2",
  "url": "S_hubbranches.html#p-511",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "main branch "
},
{
  "id": "fig-commit-main-poem",
  "level": "2",
  "url": "S_hubbranches.html#fig-commit-main-poem",
  "type": "Figure",
  "number": "3.3.1.1",
  "title": "",
  "body": "Diagram of a commit from  main  to  main Arrow diagram. Main branch to README right back to main branch through commit "
},
{
  "id": "fig-branch-poem",
  "level": "2",
  "url": "S_hubbranches.html#fig-branch-poem",
  "type": "Figure",
  "number": "3.3.1.2",
  "title": "",
  "body": "Diagram of two branches off of main Arrow diagram. Main branch splits into two branches, Poem 1 and Poem 2. "
},
{
  "id": "p-514",
  "level": "2",
  "url": "S_hubbranches.html#p-514",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "committing merge pull request "
},
{
  "id": "fig-merge-poem",
  "level": "2",
  "url": "S_hubbranches.html#fig-merge-poem",
  "type": "Figure",
  "number": "3.3.1.3",
  "title": "",
  "body": "Diagram showing two possible merges into main Arrow Diagram. Main branch splits into two branches, Poem 1 and Poem 2. Poem 1 branch goes back into main. Arrow Diagram. Main branch splits into two branches, Poem 1 and Poem 2. Poem 2 branch goes back into main. "
},
{
  "id": "fig-hub-new-branch",
  "level": "2",
  "url": "S_hubbranches.html#fig-hub-new-branch",
  "type": "Figure",
  "number": "3.3.2.1",
  "title": "",
  "body": "Reference for creating a new branch on GitHub "
},
{
  "id": "fig-hub-animal-initial",
  "level": "2",
  "url": "S_hubbranches.html#fig-hub-animal-initial",
  "type": "Figure",
  "number": "3.3.2.2",
  "title": "",
  "body": "Diagram mapping branches after creating the animal branch Arrow diagram. Main branch to animal branch. "
},
{
  "id": "editbranch",
  "level": "2",
  "url": "S_hubbranches.html#editbranch",
  "type": "Checkpoint",
  "number": "3.3.3.1",
  "title": "Editing a File On a Branch.",
  "body": "Editing a File On a Branch \n          Exploring the ideas in  , add a level two heading to your README called \n           My Favorite Animal . Underneath that, type your favorite animal. Do not commit yet.\n         \n          The current state of the branch is shown in  .\n         "
},
{
  "id": "fig-hub-animal-edit",
  "level": "2",
  "url": "S_hubbranches.html#fig-hub-animal-edit",
  "type": "Figure",
  "number": "3.3.3.2",
  "title": "",
  "body": "Diagram showing branches after add a favorite animal Arrow diagram. Main branch to animal branch. Animal branch points to new edits. "
},
{
  "id": "p-530",
  "level": "2",
  "url": "S_hubbranches.html#p-530",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "commit message "
},
{
  "id": "fig-hub-animal-commit",
  "level": "2",
  "url": "S_hubbranches.html#fig-hub-animal-commit",
  "type": "Figure",
  "number": "3.3.3.3",
  "title": "",
  "body": "Diagram showing our commit from  animal  to  animal Arrow diagram. Main branch to animal branch. Animal branch points to new edits. New edits points back to animal. "
},
{
  "id": "p-536",
  "level": "2",
  "url": "S_hubbranches.html#p-536",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "pull request "
},
{
  "id": "p-543",
  "level": "2",
  "url": "S_hubbranches.html#p-543",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "merge "
},
{
  "id": "fig-hub-animal-merge",
  "level": "2",
  "url": "S_hubbranches.html#fig-hub-animal-merge",
  "type": "Figure",
  "number": "3.3.4.1",
  "title": "",
  "body": "Diagram showing a pull request from  animal  to  main Arrow diagram. Main branch to animal branch. Animal branch points to new edits. New edits points back to main. "
},
{
  "id": "solo-branch-pr",
  "level": "2",
  "url": "S_hubbranches.html#solo-branch-pr",
  "type": "Checkpoint",
  "number": "3.3.4.2",
  "title": "Branches and Pull Requests.",
  "body": "Branches and Pull Requests \n          It is time to put together what you learned in this section and make some edits of your own.\n          Don't be afraid to look back at what we did earlier for reassurance. Start this exercise on \n          the  Code  tab of your  aboutme  repo. The goal of this exercise is to add another section\n          to the README file.\n         \n          Think about something about you that you have not put in the README yet. Perhaps your favorite \n          food, quote, or historical character. Once you have chosen what you want to add, create a \n          branch with an appropriate name.\n         \n          Edit your README file. You should have at the very least a new level two heading indicating \n          what you are adding and a piece of text with your addition. \n         \n          Add an approporiate commit message and commit your changes to your new branch.\n         \n          Open a pull request to merge your changes into the main branch.\n         \n          Merge your new pull request into main and delete your old branch.\n         \n          Verify that your change did in fact get merged into main.\n         "
},
{
  "id": "S_gitsetup",
  "level": "1",
  "url": "S_gitsetup.html",
  "type": "Section",
  "number": "4.1",
  "title": "Getting Set Up with Git",
  "body": "Getting Set Up with Git git git setup \n    You should have Git installed at this point. If not, see  ,  , or  . This means you already have Git ready to go. But how do we use it? We created a repo on GitHub but need a way to connect that repo with our personal computer. That's a great feature of Git:  to connect the files on your computer to GitHub.  It also performs version control and automatically records changes that have been committed. \n   \n    It's not always feasible to edit file on GitHub, as we did in   and  . Certain text editors (for instance, Visual Studio Code which you might also have installed) have features built in to ease coding and file editing.  VS  Code extensions might add color to text to help you see what's going on in your code. Others provide bug fixing and error catching before the errors actually occur. In general, you will edit files on your personal computer and will want to share them with the world.  I would stay away from editing on GitHub unless you have a small correction and\/or you don't need any special editing tools. \n   Cloning a Repository clone repository cloning local editing locally git clone local files clone \n      Somewhat unfortunately, one thing must be done before we are able to clone a repo. Interacting with your GitHub materials in this way will require authentication; in other words, your password. This is necessary for safety and is a smart feature. However, Git\/GitHub has deprecated the use of passwords on the command line so we must generate an Personal Access Token ( PAT ). The following procedure guides you through this process. I recommend creating a new  PAT  for each repo to ensure that if anyone gets unauthorized access of one repo, they won't be able to get to your others.\n     Generating a  PAT github PAT \n          Click on your GitHub profile icon and navigate to Settings.\n         \n          Scroll down and click on  Developer Settings .\n         \n          Click on  Personal access tokens . This page will give you an overview of all the tokens \n          you have created, their expiration dates, and the things they have access to.\n         \n          Click on  Generate new token . Your GitHub password may be required.\n         \n          Enter a title for your token. What is your project? This name doesn't really matter; it exists \n          solely to help you remember why you made it. If this is your first  PAT , perhaps name it \n           Git Started Work  or  About Me .\n         \n          If you choose the above, make sure you only use the token for that purpose!\n         \n          Choose an expiration date. At what point do you plan on being done with this project? Set the \n          date for a month after that. Don't fret too much about it; you can always create a new  PAT  later\n          for the same project. But I can bet that you won't want to do this process more than once for \n          one project if you can help it.\n         \n          Select a scope or scopes. What do you want this  PAT  to give you access to? This will depend on \n          your project but less is better (for privacy in the event of hacking). Don't be super concerned as \n          it is difficult to hack  PAT s. If you do not give a  PAT  permission to do something, that something will not be \n          able to be done locally, even by you. \n         \n          For this project, you will want the  repo  scope and maybe the\n           user  scope. Once you have the scope(s) selected, click  Generate token .\n         \n          You will get an email that a  PAT  was created. Record your  PAT  somewhere. You will never see\n          it again after you close or refresh the page. Don't put it somewhere easily accessible. \n           Treat  PAT s like passwords.  They are confidential and should not be shared. \n          When Git (on the command line) asks for your password, you will enter in your  PAT  instead.\n         \n      Now that we have a  PAT , let's work on cloning a repo! You will likely need your  PAT  in this\n      procedure. Note that sometimes Git remembers old  PAT s. If Git does not ask you for a password, \n      this doesn't mean something went wrong, it just means that you are already authenticated.\n     Cloning from GitHub git clone \n          This procedure assumes you have a repo on GitHub called  aboutme  and have been following \n          along with the changes as described in  . \n         \n          Navigate to the Code tab your repo  aboutme . Make sure you are on the main branch.\n         \n          Find the green dialog box labeled  Code  (yes, the Code box inside the Code tab).\n          Notice you are able to add files manually through upload or through GitHub. You certainly \n          could do this but you will most likely be ignoring the version control and the wonderful experience \n          of using Git!\n         \n          Click on the green Code box. This box is titled  Clone  which is a good sign. \n          A url-like string should appear (if not, be sure you have the HTTPS tab selected.) Copy this\n          string.\n         \n          Open your terminal. Use  cd  to navigate to a folder where you want your repo to live \n          locally. Remember that repositories are essentially folders. When you clone your repo, it will\n          look like a folder on your computer. In some cases, it might not make sense to create a folder\n          and then clone your repo as it will look like a folder that contains a folder. Note that the\n          name of the cloned repo\/folder will be the name of your repository.\n         \n          You should be at the location you want your repo to be. It is now time to activate Git. Every\n          time you use a Git command, you start with  git , then the command. For cloning:\n         \n              git clone <copied-https-string>\n             \n              Cloning into 'aboutme'...\n              remote: Enumerating objects: 17, done.\n              remote: Counting objects: 100% (14\/14), done.\n              remote: Compressing objects: 100% (9\/9), done.\n              remote: Total 17 (delta 2), reused 0 (delta 0), pack-reused 3\n              Receiving objects: 100% (17\/17), 5.06 KiB | 1.01 MiB\/s, done.\n              Resolving deltas: 100% (2\/2), done.\n             \n          where <copied-https-string> is replaced with the HTTPS string you copied in  .\n          Press enter to run the command.\n         \n          Your terminal may ask you for your GitHub username and password. This is ok: enter your username\n          and instead of typing your normal GitHub password, paste\/type your  PAT  as found in  .\n         \n          Verify that the clone worked. In the location you chose (on your computer), you should see \n          a new folder with the\n          name of your repository. Inside of that folder will be your files!\n         \n       Cloning a repository does not navigate you into that repo.  In other words, when you clone a repo, you won't see the files in the repo until you  cd  into the newly-created directory. In order to use Git, you will have to navigate your terminal into the repo. In this instance, you would do  cd aboutme .\n     Branches With Git git branches branches switch \n      Great! We've cloned a repository. Now what? You probably want to jump into editing files but wait!\n      Best practice says to create a new branch first. Sure, you are working solo (if you aren't, see\n       ) and you can really do what ever you want. You could just edit\n      everything on the main branch and never have to worry about other branches. No one will be\n      able to screw with your files without permission. \n     \n      No one except you! Yes, you could make a mistake and break your program or project. You want to\n      avoid that. I would recommend  always  using branches whether you are working alone or not.\n      If you make a horrible mistake, branches help you fix mistakes without messing with your main branch.\n      Remember, if your repo is public, anyone can access it. Anyone can view the files, download the files,\n      clone your repo, or fork your repo ( ). You want to make sure that\n      the files on the main branch are up-to-date AND functional at all times. Branches will let you test\n      new things without breaking main.\n     \n      We saw earlier how to work with branches on GitHub, but you can also do this right from the command\n      line. This can be done with one command and doesn't involve navigating multiple pages as we did on\n      GitHub ( ). \n     Branches With Git git branches git switch git checkout \n          Later on in this chapter, you will be adding to your README file. You first will add\n          the country you were born in.\n         \n          Ensure that your terminal is navigated into your repo. You may have noticed that your\n          terminal changed! The name of your active branch is displayed by the file path.\n          Mine now has a  (main) . This is how you remember which branch you are editing on.\n         \n          Remember that each Git command begins with  git  to let your computer know you will\n          be using Git. To create a new branch, use the following:\n         \n            git branch <branch-name>\n           \n          where  <branch-name>  is the non-spaced name of your new branch. Try creating a new\n          branch now, with the name of  country . So,\n         \n            git branch country\n           \n            Well shoot. Git still says we're on the main branch. We want it to tell us that we are on\n            the  country  branch. That's because we need to tell Git what we want to work on\n            that new branch. Git doesn't move you to that branch in case you want to make more than\n            one branch at one time.\n           \n            With Git, navigating to a new branch is done with  switch . In general,\n           \n              git switch <branch-name>\n             \n              Switched to branch '<branch-name>'\n             \n            If done correctly, Git will tell you that it switched to the new branch. This should be\n            reflected in the branch name indicator. Switch to your new branch  country :\n           \n              git switch country\n             \n              Switched to branch 'country'\n             \n            My terminal now says  (country)  instead of  (main)  so I have verification\n            that the process worked.\n           Branch\/Checkout Shortcut \n        Using a little terminal trick, we can actually create a branch and switch to that branch at\n        the same time. This uses the  -c  switch. For our example in  ,\n       \n          git switch -c <branch-name>\n         \n          Switched to new branch '<branch-name>'\n         \n        By adding the  -c  switch to the  switch  command, Git creates a new branch with\n        the title given and checks out that branch. This is quite useful if you are only creating\n        one branch and want to switch right to it. If you are uncomfortable with this, then feel free\n        to continue using the method in  . Each will get you to the same place.\n       Note About  git switch \n      The  git switch  command was introduced to help remove user confusion. Previously, \n      the command was  git checkout <branch-name> . However  checkout  has two functions:\n      to switch branches and to reset files (if a file has edits that you want to restore, you can use\n       checkout  to restore the file to how it was before you made the changes). \n     \n       git checkout  still exists and you are welcome to use it to switch branches (you would use  git checkout -b <branch-name> ). However, to avoid confusion, I recommend using  git switch  for changing branches and  git restore  for restoring files.\n     \n      You are now ready to edit files! You determined a chunk of your project to start with\n      (adding your birth country), created a corresponding branch ( country ) and checked out\n      that branch. Until you change your branch again, all edits will take place on your current\n      branch  only . Continue on to edit your README file!\n     "
},
{
  "id": "p-558",
  "level": "2",
  "url": "S_gitsetup.html#p-558",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "local files "
},
{
  "id": "p-559",
  "level": "2",
  "url": "S_gitsetup.html#p-559",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "clone "
},
{
  "id": "gitproc-pat",
  "level": "2",
  "url": "S_gitsetup.html#gitproc-pat",
  "type": "Git Procedure",
  "number": "4.1",
  "title": "Generating a <abbr class=\"acronym\">PAT<\/abbr>.",
  "body": "Generating a  PAT github PAT \n          Click on your GitHub profile icon and navigate to Settings.\n         \n          Scroll down and click on  Developer Settings .\n         \n          Click on  Personal access tokens . This page will give you an overview of all the tokens \n          you have created, their expiration dates, and the things they have access to.\n         \n          Click on  Generate new token . Your GitHub password may be required.\n         \n          Enter a title for your token. What is your project? This name doesn't really matter; it exists \n          solely to help you remember why you made it. If this is your first  PAT , perhaps name it \n           Git Started Work  or  About Me .\n         \n          If you choose the above, make sure you only use the token for that purpose!\n         \n          Choose an expiration date. At what point do you plan on being done with this project? Set the \n          date for a month after that. Don't fret too much about it; you can always create a new  PAT  later\n          for the same project. But I can bet that you won't want to do this process more than once for \n          one project if you can help it.\n         \n          Select a scope or scopes. What do you want this  PAT  to give you access to? This will depend on \n          your project but less is better (for privacy in the event of hacking). Don't be super concerned as \n          it is difficult to hack  PAT s. If you do not give a  PAT  permission to do something, that something will not be \n          able to be done locally, even by you. \n         \n          For this project, you will want the  repo  scope and maybe the\n           user  scope. Once you have the scope(s) selected, click  Generate token .\n         \n          You will get an email that a  PAT  was created. Record your  PAT  somewhere. You will never see\n          it again after you close or refresh the page. Don't put it somewhere easily accessible. \n           Treat  PAT s like passwords.  They are confidential and should not be shared. \n          When Git (on the command line) asks for your password, you will enter in your  PAT  instead.\n         "
},
{
  "id": "try-git-clone",
  "level": "2",
  "url": "S_gitsetup.html#try-git-clone",
  "type": "Git Procedure",
  "number": "4.2",
  "title": "Cloning from GitHub.",
  "body": "Cloning from GitHub git clone \n          This procedure assumes you have a repo on GitHub called  aboutme  and have been following \n          along with the changes as described in  . \n         \n          Navigate to the Code tab your repo  aboutme . Make sure you are on the main branch.\n         \n          Find the green dialog box labeled  Code  (yes, the Code box inside the Code tab).\n          Notice you are able to add files manually through upload or through GitHub. You certainly \n          could do this but you will most likely be ignoring the version control and the wonderful experience \n          of using Git!\n         \n          Click on the green Code box. This box is titled  Clone  which is a good sign. \n          A url-like string should appear (if not, be sure you have the HTTPS tab selected.) Copy this\n          string.\n         \n          Open your terminal. Use  cd  to navigate to a folder where you want your repo to live \n          locally. Remember that repositories are essentially folders. When you clone your repo, it will\n          look like a folder on your computer. In some cases, it might not make sense to create a folder\n          and then clone your repo as it will look like a folder that contains a folder. Note that the\n          name of the cloned repo\/folder will be the name of your repository.\n         \n          You should be at the location you want your repo to be. It is now time to activate Git. Every\n          time you use a Git command, you start with  git , then the command. For cloning:\n         \n              git clone <copied-https-string>\n             \n              Cloning into 'aboutme'...\n              remote: Enumerating objects: 17, done.\n              remote: Counting objects: 100% (14\/14), done.\n              remote: Compressing objects: 100% (9\/9), done.\n              remote: Total 17 (delta 2), reused 0 (delta 0), pack-reused 3\n              Receiving objects: 100% (17\/17), 5.06 KiB | 1.01 MiB\/s, done.\n              Resolving deltas: 100% (2\/2), done.\n             \n          where <copied-https-string> is replaced with the HTTPS string you copied in  .\n          Press enter to run the command.\n         \n          Your terminal may ask you for your GitHub username and password. This is ok: enter your username\n          and instead of typing your normal GitHub password, paste\/type your  PAT  as found in  .\n         \n          Verify that the clone worked. In the location you chose (on your computer), you should see \n          a new folder with the\n          name of your repository. Inside of that folder will be your files!\n         "
},
{
  "id": "gitproc-branches",
  "level": "2",
  "url": "S_gitsetup.html#gitproc-branches",
  "type": "Git Procedure",
  "number": "4.3",
  "title": "Branches With Git.",
  "body": "Branches With Git git branches git switch git checkout \n          Later on in this chapter, you will be adding to your README file. You first will add\n          the country you were born in.\n         \n          Ensure that your terminal is navigated into your repo. You may have noticed that your\n          terminal changed! The name of your active branch is displayed by the file path.\n          Mine now has a  (main) . This is how you remember which branch you are editing on.\n         \n          Remember that each Git command begins with  git  to let your computer know you will\n          be using Git. To create a new branch, use the following:\n         \n            git branch <branch-name>\n           \n          where  <branch-name>  is the non-spaced name of your new branch. Try creating a new\n          branch now, with the name of  country . So,\n         \n            git branch country\n           \n            Well shoot. Git still says we're on the main branch. We want it to tell us that we are on\n            the  country  branch. That's because we need to tell Git what we want to work on\n            that new branch. Git doesn't move you to that branch in case you want to make more than\n            one branch at one time.\n           \n            With Git, navigating to a new branch is done with  switch . In general,\n           \n              git switch <branch-name>\n             \n              Switched to branch '<branch-name>'\n             \n            If done correctly, Git will tell you that it switched to the new branch. This should be\n            reflected in the branch name indicator. Switch to your new branch  country :\n           \n              git switch country\n             \n              Switched to branch 'country'\n             \n            My terminal now says  (country)  instead of  (main)  so I have verification\n            that the process worked.\n           "
},
{
  "id": "S_gitedits",
  "level": "1",
  "url": "S_gitedits.html",
  "type": "Section",
  "number": "4.2",
  "title": "Editing Files",
  "body": "Editing Files git edit edit files files edit \n      Admittedly, the title of this section is a little misleading. You can't edit files with\n      Git. Git just keeps track of your files and your changes. Take this section as a chance to familiarize yourself with your text editor ( VS  Code is recommended and is demonstrated here).\n     \n    To recap, we used the command line and Git to start the version control process for our next edits. We activated a branch called  country  which we chose intentionally because we plan on adding our country to the README file. Git will keep the  country  branch  active  until we tell it to switch to another branch. Any changes you make, files you delete, or files you create will be recorded under this  country  branch. In other words, only the  country  branch will change, not  main . \n   \n    But let's try editing our file. This is the main goal after all. Open your README file in your preferred text editor. If you're feeling adventurous, use the terminal to do it. If you are using  VS  Code, read   before using the terminal to open the file.\n   Opening Files With  VS  Code open VS  Code command line code \n      Try to open the README file with the terminal. (Remember how? See   if not.) What happened?\n     \n      Any number of things could have happened. It might have worked and  VS  Code opened with your file ready to edit. Maybe it didn't work at all and no applications opened. Maybe your terminal opened up a different app. The problem with the  open  command is that it picks the default application and opens that. For me, by default, all  .md  files open in RStudio. So, I have to specifically tell my terminal that I want  VS  Code to open the file, not anything else.\n     \n      Luckily,  VS  Code has its own command! Remember how every Git command starts with  git ? Well that same idea holds for many different commands. To open a file in  VS  Code, type  code <file-name-and-extension>  where  code  stands for  VS  Code. Now things should work correctly and  VS  Code should open your file.\n     \n    Hopefully, the contents of the file look familiar. Everything should be the same from when we edited it back in GitHub. Take a minute and add a heading called  My Birth Country  and type a sentence stating your birth country. (If you don't want that information on the internet, put any country   maybe your favorite country.) Save your file.\n   \n    I would like to point out some helpful features that  VS  Code has (other text editors will likely have these same features but not in the same places). In the bottom left corner,  VS  Code displays the name of your current active branch. This is incredibly useful in case you forget what branch you are on (especially if you are working with multiple branches) or if you want to verify that you are working on a branch and not on main.  VS  Code also displays (on the left side) a list of all of your files and directories that are inside your GitHub repository allowing easy access to any file you might wish to edit.\n   \n    All files you currently have open appear as tabs at the top of your screen. You might also have noticed that when you saved your file, the name of your README changed from white to a cheddar color and an M appeared.  VS  Code has Git integrated inside of it (one of the many benefits). As Git keeps track of your changes,  VS  Code tells you which files you have  m odified (M, yellow),  d eleted (D, red), or created (U,  u ntracked). If you were to undo  all  of your changes and saved the file again, the M would disappear and the color would go back to white.\n   \n      Hopefully editing the file was fairly straightforward. We now have changes that we have made and we want to get those changes back on to GitHub and on the  main  branch. Don't forget that the changes we made in this section are only local and only on the  country  branch. The next section covers how to stage, commit, and push your changes.\n     "
},
{
  "id": "S_gitfinalize",
  "level": "1",
  "url": "S_gitfinalize.html",
  "type": "Section",
  "number": "4.3",
  "title": "Sending Changes Back To GitHub: The Three-Step Process",
  "body": "Sending Changes Back To GitHub: The Three-Step Process three step process git three step process \n      Ok, great! We have some edits, but how do we let other people see them? Remember that we have been editing locally so nothing new has shown up on GitHub. The goal here is to share the work with the world, so we need a way to send the changes back to GitHub. Luckily, by cloning our repo, we set up a connection between our local repo and our GitHub repo.\n     \n      This is a very important section. Each step must be completed in the proper order to avoid Git errors, headaches, and file loss. \n     commit Wait, Which Files Did I Change Again? git status \n      This happenes often in large projects (and even in smaller projects). You have a branch, you've been working all day editing and creating files, making sure things work. But now it's time to stage the files and you don't remember what files you've edited! You aren't even positive what the file names are. True,  VS  Code color codes your edited files but you might have folders and subfolders throught your repository and don't really feel like searching through everything to record what files you changed and which of them you want to send to GitHub.\n     \n      Luckily, Git has the command for you! With one line in the terminal, you can easily see a list of files you changed, deleted, and added. Let's explore that with our small case.\n     Trying  git status tracking \n          You might see a console output such as the one below.\n         \n            git status\n           \n            On branch country\n            Changes not staged for commit:\n              (use \"git add <file>...\" to update what will be committed)\n              (use \"git restore <file>...\" to discard changes in working directory)\n                    modified:   README.md\n\n            no changes added to commit (use \"git add\" and\/or \"git commit -a\")\n           \n          We get a lot more information than needed right now, but we will break this output down shortly. For now, notice that we get a statement of the branch we are on and a file name that represents a file we have modified. It is not recreated here, but the modified file name is red in the output (any new, untracked files will be green). \n         A Small Note On  VS  Code \n      It is worth noting that if you are using  VS  Code, you do not need to navigate back and forth from a terminal window and the text editor.  VS  Code has a built-in interface to use your terminal. To access this, navigate to the  Terminal  heading in the navigation bar at the top of your screen and click on  New Terminal . You may also use the keyboard shortcut  Ctrl  +  Shift  +  `  (On a Mac, you would still use  Ctrl  not  command .)\n     Step 1: Staging Files git add staging files staging \n      The first step in sending files back to GitHub is to stage your files. Basically, this step is like you saying  I have edited some files and these are the ones I would like to send to GitHub . With our small example, this step is a little silly. We only edited one file, of course it's the one we want to send back.\n     \n      The magic of staging files, however, lets you choose which files you want to push back. Maybe I'm working on three files at once, but only two are ready to go back to GitHub. Maybe I'm writing a book and I want my editor to be able to see chapters 1-4 but not chapter 5 (which I'm currently working on). At any given time, you can decide which files you want to stage.\n     Trying  git add \n          All this is great but how do I stage my files? How do I tell Git which files I want to send back?\n         \n            The output from  git status  in   actually gives a hint on how to proceed. If you haven't completed  , I recommend doing so now.\n           \n            The staging command is done with  git add  and the command is followed by all the files you want to add. There are three cases with this command:\n             \n                 You want to add specific files \n                 \n                  Type in each file name and extension individually with a space between each file.\n                 \n               \n                 You want to add an entire folder of files \n                 \n                  Type in the name of the folder followed by a  \/  ( ,  images\/ ).\n                 \n               \n                 You want to add all changed \/ created \/ deleted files \n                 \n                  Type in a single period ( . ) instead of file names.\n                 \n               \n           \n            You can run as many or as little  git add  commands as you wish. For instance, you could do  git add images\/ my_file.txt  or you could do  git add images\/  and then do  git add my_file.txt  separately. It's up to you and how comfortable you feel with Git.\n           \n            Try now to stage your README file using one of the three cases above.\n           \n            Case 1 or Case 3 will work in this instance.\n           \n             git add README.md  OR  git add . . Neither will produce any output.\n           \n            Use  git status  to verify that your staging worked and that you didn't add any extra files on accident (see   if you did).\n           git status \n            On branch country\n            Changes to be committed:\n              (use \"git restore --staged <file>...\" to unstage)\n                    modified:   README.md\n             \n            The text color has changed to green which indicates the process worked.\n           Step 2: Committing Files git commit commit files commit commit message \n       Commit  is a great name for this step in the process. At this point, you are indeed ready to commit to what you have changed and to send your selected files to GitHub. \n     \n      Remember committing from  ? This commit is the same concept as it was before: telling Git\/GitHub that your changes are done, you are sure they are done, and that you would like them to be a part of your main, active branch. This is easy on GitHub; all we had to do was hit the  Commit changes  button. With Git and the command line, there are no buttons or fancy things to interact with. We instead have to tell Git exactly what we want to do.\n     Trying  git commit \n          Let's learn how to commit our files using Git. Note that you must have staged at least one file before moving on to this step. See   if you have not done this.\n         commit message \n          Take a minute to think about the edits you have just made. In a few words, how would you explain to future you and others what you changed? If you could summarize your changes in a sentence or less, how would you? Whatever you decide on will be your commit message. \n         \n          Do keep in mind the guidelines expressed in  . They apply here, too! (And any other time you are committing.)\n         \n          Type  git commit -m \"<your-commit-message>\"  into the command line. For our working example, I might type  git commit -m \"add birth country\" .\n         git commit -m \"add birth country\" \n          [country 137b0bc] add birth country\n           1 file changed, 4 insertions(+)\n           \n          Note that the message is surrounded by quotation marks. This is required so that Git doesn't think that each word in your message is a separate command. They can be either single or double quotes as long as the two match. \n         \n          Also take a look at the output. This tells you the name of your branch, a unique identifier for your commit (so yours will be different than mine), your commit message, how many files were changed, and how many lines were inserted or deleted. This can be useful to verify that the commit worked as you expected.\n         \n          Just for good measure, try  git status  as an extra verification step ( ). \n         git status \n            On branch country\n            nothing to commit, working tree clean\n             \n            This output is what is to be expected! Don't fret that it says nothing to commit. This is completely true since we just finished committing everything that we had staged. This output means that everything worked correctly.\n           \n     commit \n      It is worth mentioning a few notes about commits since they can be forgotten or confused.\n       \n           \n            A commit is similar to saving a Word document and closing Word completely. Sure, you can go back and reverse your changes or keep editing, but it would take some time to start Word back up and open the file. Same with commits. It is possible to reverse a commit, but it can be annoying to have to do so. Git gives you multiple stages in the finalizing process to help you catch any edits you forgot to make.\n           \n         \n           \n            If for whatever reason you find that you made a commit too early or did so accidentally, you can reset your current branch back to what it was before the commit, according to Git's knowledge. Details can be found in   in  .\n           \n         \n           \n            It is possible to have multiple commits in one push. See   for more details.\n           \n         \n     Step 3: Pushing Files git push remote origin upstream push files files pushings \n        Take a minute and go back to your GitHub repo for your  aboutme  files. Do the files there reflect your changes of an added country?\n       \n        Nope, nothing should have changed. Git has, in its three-step process, built in saving graces to help us in case we make a mistake. If  git commit  sent our files right to GitHub, it would be much more difficult to reverse things or correct our mistakes.\n       \n        Enter the third step in the process: the  git push . This step is new; we haven't seen it before. When we worked on GitHub, a commit  did  did send our changes to GitHub. But now that we are working locally, an extra step is needed to tell Git that we are truly finished editing  and  that we want our changes to show up on GitHub for the world to see.\n       remote origin upstream \n      This is necessary to understand  git push . The command has four parts:\n       \n           \n             git , telling our computer to use Git\n           \n         \n           \n             push , telling Git that we are going to be pushing our committed files somewhere\n           \n         \n           \n            The remote you want to push to. Here, we will use  origin .\n           \n         \n           \n            The branch you want to push to.\n           \n         \n      With this information, try   which will guide you through the process and some common errors should you forget one of the four parts.\n     Trying  git push \n          This procedure will start with telling you to do the wrong things so you gain an understanding of what to expect if you type the  push  command incorrectly. The second part will show you the recommended way to push your files back to GitHub.\n         \n            Let's start with some errors that Git can throw at us.\n           \n                What might happen if you forgot to specify the remote and branch? Let's find out: type  git push  into the command line.\n               git push \n                fatal: The current branch country has no upstream branch.\n                To push the current branch and set the remote as upstream, use\n\n                    git push --set-upstream origin country\n                 \n                Well that looks a little scary. Fatal! That just means that git wansn't able to complete your request and stopped trying. The reason this failed is because the branch  country  is only on your computer, it hasn't yet made it to GitHub (which is what we are trying to do). It is possible to create a remote connection between branches but I often don't especially if I am only working on one branch at a time and if I plan on deleting a branch when I'm done with it. Should you want to create a remote, use the command Git provided.\n               \n                What if you just forgot to specify the branch? Try  git push origin .\n               git push origin \n                fatal: The current branch country has no upstream branch.\n                To push the current branch and set the remote as upstream, use\n\n                    git push --set-upstream origin country\n                 \n                Well, look at that, the same error. This should make sense. You are telling Git to push changes to the origin repo but  country , the current branch, doesn't have an origin since we created the branch locally.\n               \n                What if you remembered the branch, but not the remote? Try  git push country \n               git push country \n                fatal: 'country' does not appear to be a git repository\n                fatal: Could not read from remote repository.\n\n                Please make sure you have the correct access rights\n                and the repository exists.\n                 \n                Remember the four parts to  git push ? Well since we forgot Step 3, the remote name, Git assumes that the word  country  is the name of the repo we want to push to. Since there is no repo named  country  on your computer nor on GitHub, it doens't know where to push and errors out.\n               \n          Now let's see how to properly push files back to GitHub. This part assumes you have already staged and committed all of the files you intend to push.\n         \n              Take a minute to think about where you are pushing to. Origin? Upstream (if applicable)? What is your current branch name?\n             \n              Here, to follow with the example, we will use  origin  and the branch name  country .\n             \n              Once you have decided, fill in the correct pieces of the  git push  formula.\n             git push origin country \n              Enumerating objects: 5, done.\n              Counting objects: 100% (5\/5), done.\n              Delta compression using up to 4 threads\n              Compressing objects: 100% (2\/2), done.\n              Writing objects: 100% (3\/3), 330 bytes | 82.00 KiB\/s, done.\n              Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\n              remote: Resolving deltas: 100% (1\/1), completed with 1 local object.\n              remote: \n              remote: Create a pull request for 'country' on GitHub by visiting:\n              remote:      <url-to-pull-request>\n              remote: \n              To <url-to-origin-repo>\n               * [new branch]      country -> country\n               \n              We get a lot of output for a successful push. Most of it is just information that can be useful in certain cases and might be worth a glance to make sure things worked as expected.\n             \n          At this point, you are ready to head back to GitHub and submit a pull request!\n         \n      As mentioned earlier, it is possible to have multiple commits per push. An example of such a situation might be typo correction. Suppose I just finished a long novel and now I'm going back to correct all of my typos. So I create a branch called  typos  and start editing my files to remove my typos. Instead of fixing all of my typos, then staging all of my files, then doing one commit and one push, I could break things up. I could fix all the typos in Chapter 1, then add the files and commit (with a message such as  correct typos ch1 ). Then fix typos in Chapter 2 and add and commit. When I'm done, I do one push and Git will push all of the commits to GitHub at one time. Breaking things up like this allows for better version control. More commits leads to more stamps on the version timeline. It also can give you peace of mind. If something horrible happens and I lost all of my book's files, then I only lose the changes for the chapter I'm currenlty working on whereas if I had been editing all at once, I would have lost  all  of my changes for all of my chapters.\n     \n    This section deserves a final summary.\n\n     The Three-Step Process three step process git three step process \n          When you are finished editing your files and are ready to send things back to GitHub, follow the Three-Step Process. Don't forget to use  git status  throughout this process!\n           \n               \n                Stage your files:  git add <files>  ( )\n               \n             \n               \n                Commit your staged files:  git commit -m \"<commit-message>\"  ( )\n               \n             \n               \n                Push your committed files:  git push <remote> <branch>  ( )\n               \n             \n         \n   \n      When we push to GitHub, your files are pushed to the branch you specified. If the branch had not existed before the push, then Git will create the branch for GitHub, but will not merge it with the main branch. To do so, we need to go back to GitHub and create a pull request. The next section revists the process of creating a pull request and builds on the ideas gained in  .\n     "
},
{
  "id": "p-610",
  "level": "2",
  "url": "S_gitfinalize.html#p-610",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "commit "
},
{
  "id": "try-git-status",
  "level": "2",
  "url": "S_gitfinalize.html#try-git-status",
  "type": "Git Procedure",
  "number": "4.4",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">git status<\/code>.",
  "body": "Trying  git status tracking \n          You might see a console output such as the one below.\n         \n            git status\n           \n            On branch country\n            Changes not staged for commit:\n              (use \"git add <file>...\" to update what will be committed)\n              (use \"git restore <file>...\" to discard changes in working directory)\n                    modified:   README.md\n\n            no changes added to commit (use \"git add\" and\/or \"git commit -a\")\n           \n          We get a lot more information than needed right now, but we will break this output down shortly. For now, notice that we get a statement of the branch we are on and a file name that represents a file we have modified. It is not recreated here, but the modified file name is red in the output (any new, untracked files will be green). \n         "
},
{
  "id": "try-git-add",
  "level": "2",
  "url": "S_gitfinalize.html#try-git-add",
  "type": "Git Procedure",
  "number": "4.5",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">git add<\/code>.",
  "body": "Trying  git add \n          All this is great but how do I stage my files? How do I tell Git which files I want to send back?\n         \n            The output from  git status  in   actually gives a hint on how to proceed. If you haven't completed  , I recommend doing so now.\n           \n            The staging command is done with  git add  and the command is followed by all the files you want to add. There are three cases with this command:\n             \n                 You want to add specific files \n                 \n                  Type in each file name and extension individually with a space between each file.\n                 \n               \n                 You want to add an entire folder of files \n                 \n                  Type in the name of the folder followed by a  \/  ( ,  images\/ ).\n                 \n               \n                 You want to add all changed \/ created \/ deleted files \n                 \n                  Type in a single period ( . ) instead of file names.\n                 \n               \n           \n            You can run as many or as little  git add  commands as you wish. For instance, you could do  git add images\/ my_file.txt  or you could do  git add images\/  and then do  git add my_file.txt  separately. It's up to you and how comfortable you feel with Git.\n           \n            Try now to stage your README file using one of the three cases above.\n           \n            Case 1 or Case 3 will work in this instance.\n           \n             git add README.md  OR  git add . . Neither will produce any output.\n           \n            Use  git status  to verify that your staging worked and that you didn't add any extra files on accident (see   if you did).\n           git status \n            On branch country\n            Changes to be committed:\n              (use \"git restore --staged <file>...\" to unstage)\n                    modified:   README.md\n             \n            The text color has changed to green which indicates the process worked.\n           "
},
{
  "id": "try-git-commit",
  "level": "2",
  "url": "S_gitfinalize.html#try-git-commit",
  "type": "Git Procedure",
  "number": "4.6",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">git commit<\/code>.",
  "body": "Trying  git commit \n          Let's learn how to commit our files using Git. Note that you must have staged at least one file before moving on to this step. See   if you have not done this.\n         commit message \n          Take a minute to think about the edits you have just made. In a few words, how would you explain to future you and others what you changed? If you could summarize your changes in a sentence or less, how would you? Whatever you decide on will be your commit message. \n         \n          Do keep in mind the guidelines expressed in  . They apply here, too! (And any other time you are committing.)\n         \n          Type  git commit -m \"<your-commit-message>\"  into the command line. For our working example, I might type  git commit -m \"add birth country\" .\n         git commit -m \"add birth country\" \n          [country 137b0bc] add birth country\n           1 file changed, 4 insertions(+)\n           \n          Note that the message is surrounded by quotation marks. This is required so that Git doesn't think that each word in your message is a separate command. They can be either single or double quotes as long as the two match. \n         \n          Also take a look at the output. This tells you the name of your branch, a unique identifier for your commit (so yours will be different than mine), your commit message, how many files were changed, and how many lines were inserted or deleted. This can be useful to verify that the commit worked as you expected.\n         \n          Just for good measure, try  git status  as an extra verification step ( ). \n         git status \n            On branch country\n            nothing to commit, working tree clean\n             \n            This output is what is to be expected! Don't fret that it says nothing to commit. This is completely true since we just finished committing everything that we had staged. This output means that everything worked correctly.\n           "
},
{
  "id": "p-652",
  "level": "2",
  "url": "S_gitfinalize.html#p-652",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "remote "
},
{
  "id": "p-653",
  "level": "2",
  "url": "S_gitfinalize.html#p-653",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "origin upstream "
},
{
  "id": "try-git-push",
  "level": "2",
  "url": "S_gitfinalize.html#try-git-push",
  "type": "Git Procedure",
  "number": "4.7",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">git push<\/code>.",
  "body": "Trying  git push \n          This procedure will start with telling you to do the wrong things so you gain an understanding of what to expect if you type the  push  command incorrectly. The second part will show you the recommended way to push your files back to GitHub.\n         \n            Let's start with some errors that Git can throw at us.\n           \n                What might happen if you forgot to specify the remote and branch? Let's find out: type  git push  into the command line.\n               git push \n                fatal: The current branch country has no upstream branch.\n                To push the current branch and set the remote as upstream, use\n\n                    git push --set-upstream origin country\n                 \n                Well that looks a little scary. Fatal! That just means that git wansn't able to complete your request and stopped trying. The reason this failed is because the branch  country  is only on your computer, it hasn't yet made it to GitHub (which is what we are trying to do). It is possible to create a remote connection between branches but I often don't especially if I am only working on one branch at a time and if I plan on deleting a branch when I'm done with it. Should you want to create a remote, use the command Git provided.\n               \n                What if you just forgot to specify the branch? Try  git push origin .\n               git push origin \n                fatal: The current branch country has no upstream branch.\n                To push the current branch and set the remote as upstream, use\n\n                    git push --set-upstream origin country\n                 \n                Well, look at that, the same error. This should make sense. You are telling Git to push changes to the origin repo but  country , the current branch, doesn't have an origin since we created the branch locally.\n               \n                What if you remembered the branch, but not the remote? Try  git push country \n               git push country \n                fatal: 'country' does not appear to be a git repository\n                fatal: Could not read from remote repository.\n\n                Please make sure you have the correct access rights\n                and the repository exists.\n                 \n                Remember the four parts to  git push ? Well since we forgot Step 3, the remote name, Git assumes that the word  country  is the name of the repo we want to push to. Since there is no repo named  country  on your computer nor on GitHub, it doens't know where to push and errors out.\n               \n          Now let's see how to properly push files back to GitHub. This part assumes you have already staged and committed all of the files you intend to push.\n         \n              Take a minute to think about where you are pushing to. Origin? Upstream (if applicable)? What is your current branch name?\n             \n              Here, to follow with the example, we will use  origin  and the branch name  country .\n             \n              Once you have decided, fill in the correct pieces of the  git push  formula.\n             git push origin country \n              Enumerating objects: 5, done.\n              Counting objects: 100% (5\/5), done.\n              Delta compression using up to 4 threads\n              Compressing objects: 100% (2\/2), done.\n              Writing objects: 100% (3\/3), 330 bytes | 82.00 KiB\/s, done.\n              Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\n              remote: Resolving deltas: 100% (1\/1), completed with 1 local object.\n              remote: \n              remote: Create a pull request for 'country' on GitHub by visiting:\n              remote:      <url-to-pull-request>\n              remote: \n              To <url-to-origin-repo>\n               * [new branch]      country -> country\n               \n              We get a lot of output for a successful push. Most of it is just information that can be useful in certain cases and might be worth a glance to make sure things worked as expected.\n             \n          At this point, you are ready to head back to GitHub and submit a pull request!\n         "
},
{
  "id": "three-step-summ",
  "level": "2",
  "url": "S_gitfinalize.html#three-step-summ",
  "type": "Git Procedure",
  "number": "4.8",
  "title": "The Three-Step Process.",
  "body": "The Three-Step Process three step process git three step process \n          When you are finished editing your files and are ready to send things back to GitHub, follow the Three-Step Process. Don't forget to use  git status  throughout this process!\n           \n               \n                Stage your files:  git add <files>  ( )\n               \n             \n               \n                Commit your staged files:  git commit -m \"<commit-message>\"  ( )\n               \n             \n               \n                Push your committed files:  git push <remote> <branch>  ( )\n               \n             \n         "
},
{
  "id": "S_gitpr",
  "level": "1",
  "url": "S_gitpr.html",
  "type": "Section",
  "number": "4.4",
  "title": "The Final Steps",
  "body": "The Final Steps pull request push pull \n      We're almost done! At this point, you should have completed the three-step process as outlined in  . What could be known as the fourth step is to head back to GitHub and submit a pull request. Again, it does seem silly to ask yourself for permission to include your own changes, but it makes more sense when contributing to someone elses repository. In order for your changes to be included into any main branch, you need to ask the repo owner\/moderator(s) for permission to pull in your changes.\n     push pull pull request Creating a Pull Request pull request \n        A lot of this section will look familiar to the ideas expressed in  . However, it is worth going over again just to make sure everything stuck.\n       \n        Note that it is possible to create a pull request using the terminal. However, I prefer to do so on GitHub. The interface is nicer and human-friendly which allows me to be sure that I am doing the right thing and to verify once more that I edited the correct files.\n       \n          Navigate back to your GitHub repository.\n         \n          Once there, you might see that a nice bar has popped up at the top of the page with a green button that says you can  Compare and pull request . If you see this, great! Click on the green button and proceed to  . If not, read on.\n         \n          If your repository looks like nothing changed, never fear. There are a couple of ways to get to where we need to get. Either of the following will work so pick what you like best.\n\n           \n               \n                When in the Code tab, click on the dropdown menu that currently has  main  selected. Click on your new branch title ( country ). A new box should pop up saying that this branch is 1 commit ahead of main. On the right of that box, click  contribute  and then  Open pull request .\n               \n             \n               \n                When in the Code tab, click on the branch icon that says  2 branches  (this is different from before previously it only said one branch). This gives a list of all the branches. Find the  country  branch and click on  New pull request \n               \n             \n               \n                Navigate to the Pull requests tab. Click on the green button near the top right that says  New pull request . Select the branch you want to pull into main from either the  Compare  drop-down menu at the top or the example comparisons table. Click  Create pull request .\n               \n             \n         \n          Regardless of the method you chose in   or if you had the automatic pop-up banner, you should be on the same screen. This might look familiar. Notice that your commit message you chose back in   appears here. You have the choice to add a further description. \n         \n          Note the drop-down menus at the top of the page. With these, you can easily decide which branches you want to merge into and which branches you are merging from. You should only see two choices since we only have two branches but this will not always be the case (especially if you are merging from an origin to an upstream, see  ).\n         \n          You can also scroll down and see all of the files that were changed and all of the changes. This is good to check that everything is as you expected. This also works to check that someone who is trying to contribute to your repo is not destroying your project.\n         \n          Once everything looks good, click on  Create pull request .\n         \n        All that's left to do now is to merge that pull request into your main branch. (Note that if you did not own the repository that you just submitted a pull request to, you will not be able to do this step.) Click on \"Merge pull reqeust\" and then \"Confirm merge\". Unless you plan on using the branch again, click on  Delete branch  so as to not clutter your branch list. Go back to your Code tab and make sure that the README has been updated with your additions.\n       pull Trying  git pull pull git pull \n        The easiest way to bring in new changes from GitHub is to use the  git pull  command.  git pull  works exactly like  git push . You need to tell Git which remote you are pulling from and which branch. \n       \n          Head back to your command line. If you need to, navigate ( cd ) to your repo. You should notice that you are still on your  country  branch.\n         \n          Switch back to your main branch (Remember how?)\n         \n           git switch main \n         \n          Just like with  git push , decide on your remote and your branch. These will be the remote and branch from which you are pulling. Type in the correct command.\n         git pull origin main \n          remote: Enumerating objects: 1, done.\n          remote: Counting objects: 100% (1\/1), done.\n          remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\n          Unpacking objects: 100% (1\/1), 631 bytes | 631.00 KiB\/s, done.\n          From <repo-url>\n             <commit-id>  main       -> origin\/main\n          Updating <commit-id>\n          Fast-forward\n           README.md | 4 ++++\n           1 file changed, 4 insertions(+)\n           \n        Note that it is possible to pull from other branches. Suppose you were working on the  country  branch and someone else made changes to just the  country  branch (but the changes hadn't been merged into main yet). You could use  git pull origin country  while on the country branch to update your local branch with the origin changes.\n       merge conflict merge conflict \n      When working by yourself, merge conflicts are easier to avoid. Just make sure that you only edit at one place at a time (  locally or remotely) then make sure both locations are up to date before editing in another place. \n     \n      Small note for advanced users: as explained in  , you can edit in both locations at once  as long as you do not edit the same line . Merge conflicts only arise when the same line(s) has been changed. So if I change lines 3 and 4 locally and 5 and 6 remotely, I can merge, pull, and push without any problems. But if I change line 7 in both locations   eek!\n     \n    And that's that! You now have made new changes and updated GitHub and your local computer and GitHub repo are on the same page. Great!\n   \n    This might seem like a lot of work for one tiny edit. And you're right. We edited four lines and it probably would have been easier to use GitHub for that edit. But it's always nice to start simple. But as it turns out, the steps discussed in this chapter are the same for each time you want to update GitHub with changes from local. The next section puts your skills to the test with an extensive activity and also provides a (hopefully) useful summary of the Git process. \n   "
},
{
  "id": "p-681",
  "level": "2",
  "url": "S_gitpr.html#p-681",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "push pull pull request "
},
{
  "id": "act-git-pr",
  "level": "2",
  "url": "S_gitpr.html#act-git-pr",
  "type": "Activity",
  "number": "4.9",
  "title": "Creating a Pull Request.",
  "body": "Creating a Pull Request pull request \n        A lot of this section will look familiar to the ideas expressed in  . However, it is worth going over again just to make sure everything stuck.\n       \n        Note that it is possible to create a pull request using the terminal. However, I prefer to do so on GitHub. The interface is nicer and human-friendly which allows me to be sure that I am doing the right thing and to verify once more that I edited the correct files.\n       \n          Navigate back to your GitHub repository.\n         \n          Once there, you might see that a nice bar has popped up at the top of the page with a green button that says you can  Compare and pull request . If you see this, great! Click on the green button and proceed to  . If not, read on.\n         \n          If your repository looks like nothing changed, never fear. There are a couple of ways to get to where we need to get. Either of the following will work so pick what you like best.\n\n           \n               \n                When in the Code tab, click on the dropdown menu that currently has  main  selected. Click on your new branch title ( country ). A new box should pop up saying that this branch is 1 commit ahead of main. On the right of that box, click  contribute  and then  Open pull request .\n               \n             \n               \n                When in the Code tab, click on the branch icon that says  2 branches  (this is different from before previously it only said one branch). This gives a list of all the branches. Find the  country  branch and click on  New pull request \n               \n             \n               \n                Navigate to the Pull requests tab. Click on the green button near the top right that says  New pull request . Select the branch you want to pull into main from either the  Compare  drop-down menu at the top or the example comparisons table. Click  Create pull request .\n               \n             \n         \n          Regardless of the method you chose in   or if you had the automatic pop-up banner, you should be on the same screen. This might look familiar. Notice that your commit message you chose back in   appears here. You have the choice to add a further description. \n         \n          Note the drop-down menus at the top of the page. With these, you can easily decide which branches you want to merge into and which branches you are merging from. You should only see two choices since we only have two branches but this will not always be the case (especially if you are merging from an origin to an upstream, see  ).\n         \n          You can also scroll down and see all of the files that were changed and all of the changes. This is good to check that everything is as you expected. This also works to check that someone who is trying to contribute to your repo is not destroying your project.\n         \n          Once everything looks good, click on  Create pull request .\n         \n        All that's left to do now is to merge that pull request into your main branch. (Note that if you did not own the repository that you just submitted a pull request to, you will not be able to do this step.) Click on \"Merge pull reqeust\" and then \"Confirm merge\". Unless you plan on using the branch again, click on  Delete branch  so as to not clutter your branch list. Go back to your Code tab and make sure that the README has been updated with your additions.\n       "
},
{
  "id": "p-695",
  "level": "2",
  "url": "S_gitpr.html#p-695",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "pull "
},
{
  "id": "try-git-pull",
  "level": "2",
  "url": "S_gitpr.html#try-git-pull",
  "type": "Git Procedure",
  "number": "4.10",
  "title": "Trying <code class=\"code-inline tex2jax_ignore\">git pull<\/code>.",
  "body": "Trying  git pull pull git pull \n        The easiest way to bring in new changes from GitHub is to use the  git pull  command.  git pull  works exactly like  git push . You need to tell Git which remote you are pulling from and which branch. \n       \n          Head back to your command line. If you need to, navigate ( cd ) to your repo. You should notice that you are still on your  country  branch.\n         \n          Switch back to your main branch (Remember how?)\n         \n           git switch main \n         \n          Just like with  git push , decide on your remote and your branch. These will be the remote and branch from which you are pulling. Type in the correct command.\n         git pull origin main \n          remote: Enumerating objects: 1, done.\n          remote: Counting objects: 100% (1\/1), done.\n          remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\n          Unpacking objects: 100% (1\/1), 631 bytes | 631.00 KiB\/s, done.\n          From <repo-url>\n             <commit-id>  main       -> origin\/main\n          Updating <commit-id>\n          Fast-forward\n           README.md | 4 ++++\n           1 file changed, 4 insertions(+)\n           \n        Note that it is possible to pull from other branches. Suppose you were working on the  country  branch and someone else made changes to just the  country  branch (but the changes hadn't been merged into main yet). You could use  git pull origin country  while on the country branch to update your local branch with the origin changes.\n       "
},
{
  "id": "warning-3",
  "level": "2",
  "url": "S_gitpr.html#warning-3",
  "type": "Warning",
  "number": "4.4.0.1",
  "title": "",
  "body": "merge conflict merge conflict \n      When working by yourself, merge conflicts are easier to avoid. Just make sure that you only edit at one place at a time (  locally or remotely) then make sure both locations are up to date before editing in another place. \n     \n      Small note for advanced users: as explained in  , you can edit in both locations at once  as long as you do not edit the same line . Merge conflicts only arise when the same line(s) has been changed. So if I change lines 3 and 4 locally and 5 and 6 remotely, I can merge, pull, and push without any problems. But if I change line 7 in both locations   eek!\n     "
},
{
  "id": "S_gitsumm",
  "level": "1",
  "url": "S_gitsumm.html",
  "type": "Section",
  "number": "4.5",
  "title": "Summary",
  "body": "Summary summary git solo \n    While the project in   is a test of your abilities, it is not a  traditional  test. I don't expect you to have memorized all of the content of the previous chapter. That will come with time. The process of cloning a repository and editing, staging, committing, and pushing files is something you will repeat over and over again as you work through projects. For right now, please go back to the previous sections if you forget how to do something! For your convenience, a summary of the Git process is provided here. Utilize this summary for the project and for your future endeavors. There is no shame in looking something up to make sure you're doing it right, espeically with Git.\n   \n      What follows is an ordered list of the steps in the Git process when working alone.\n\n       \n           \n            Create a repository on GitHub. (You can also do this with Git, see  Karl Broman's guide . I prefer starting with GitHub, however.) See  .\n           \n         \n           \n            Clone the repo to your local computer with  git clone . See   and  .\n           \n         \n           \n            Create an appropriately-named branch with  git branch  and  git switch  or with  git switch -c . See   and  .\n           \n         \n           \n            Edit\/create\/delete files as you please. See  \n           \n         \n           \n            Follow the three step process as described in  . Don't forget about the usefulness of  git status  throughout ( )!\n             \n                 \n                  Stage your files with  git add . See   and  .\n                 \n               \n                 \n                  Commit your files with  git commit -m . See   and  .\n                 \n               \n                 \n                  Push your files back to GitHub (on your current branch) with  git push origin . See   and  .\n                 \n               \n           \n         \n           \n            Create a pull request on GitHub and merge your changes into  main . See  .\n           \n         \n           \n            Go back to your local repo, switch to  main  with  git switch main  and pull in your changes with  git pull . See  .\n           \n         \n     "
},
{
  "id": "S_gitbigact",
  "level": "1",
  "url": "S_gitbigact.html",
  "type": "Section",
  "number": "4.6",
  "title": "Working Solo: The Culminating Experience",
  "body": "Working Solo: The Culminating Experience culminating experience git solo \n      As mentioned above, this part is a large activity designed to help you practice the skills and ideas learned in the previous sections. It also represents and example of what a typical workflow might look like. You are welcome and encouraged to refer back to the summary and the sections themselves.\n     \n      The activity below is broken up into multiple parts. In order to help you remember the procedures, I will not be adding in cross references to the corresponding chapters. That being said, I will add in hints and answers where applicable. Do note that some of the steps have no  correct  answer. This will be noted in the corresponding answer. \n     \n          The goal of this activity will be to create a new repository and write two poems (or paste your favorite poems, with attributions). Good luck and have fun!\n         \n            First, you need to create a new repository. Navigate to GitHub and create a new repository. Name it appropriately for the end goal   you can't change it later. Make sure you initialize with a README file.\n           \n            Use one of the multiple methods to create a new repo in GitHub. Perhaps name it  poems  or  fav-poems ? This part is up to you as long as the name accurately describes the future repo contents. Check the box that says to add a README file.\n           \n            Clone your repo on your computer. Navigate to the new repo using your terminal.\n           \n            Make sure you are not  inside  your previous repositories. Nested repositories will not work. So  cd  to the folder in which you want to place your new repo.\n           \n            Copy the HTTPS link on GitHub. Use  git clone <copied-link> . Use  cd <repo-name>  to move your terminal into that repo.\n           \n            You will edit your README file first. Create and switch to a new branch, named appropriately.\n           \n             git branch readme  then  git switch readme  OR  git switch -c readme \n           \n            You may use any branch name you like as long as it's clear what the branch is for.  readme  seems like it will work nicely.\n           \n            Open the README file. Change the default title to a better title. Add a sentence or two explaining what this repo is and why you are creating it. Add any other relevant information you think might help other people looking at your repo would need or like. Save the file.\n           \n            Perhaps a better title would be  My Favorite Poems  or  Two Original Poems . This can vary. You might explain that this repository contains two of your favorite poems (or two poems you wrote yourself) and this it was born from a project in  Better Git Started  to help you get more familiar with GitHub and Git functions. This can also vary.\n           \n            Check if Git is tracking the README file you just edited. \n           \n             git status \n           \n            Stage your file for committing.\n           \n             git add .  OR  git add README.md , maybe  git status  to confirm?\n           \n            Commit your changes. Add an informative commit message.\n           \n             git commit -m 'edit readme with repo info' , maybe  git status  to confirm?\n           \n            Of course, your commit message may be different. Perhaps  edit readme  and enough for you.\n           \n            Push your changes to GitHub.\n           \n             git push origin <your-branch-name> \n           \n            Go to GitHub and open a pull request. Merge your changes into your main branch. You may delete the old branch.\n           \n             Compare and pull request ,  Merge ,  Confirm merge . (Check the main branch on GitHub to make sure this worked.)\n           \n            Go back to your local computer. Switch back to main and pull in your changes.\n           \n             git switch main  then  git pull origin main \n           \n            You will now create your poems. Create and switch to an appropriately-named branch.\n           \n             git branch poems  then  git switch poems  OR  git switch -c poems \n           \n            You may use any branch name you like as long as it's clear what the branch is for.  poems  works for me.\n           \n            Note that you could split up each poem into its own branch. Depending on the length of your poems, you may want to do that in practice but here we will edit both on one branch. That way you can practice two commits in one push!\n           \n            Create a new  .md  file called  poem1.md .\n           \n            In  VS  Code, you can create a new file with the paper-with-a-plus icon in the  Explorer  panel in the top left.\n           \n            Use the hint or use your terminal ( touch poem1.md ).\n           \n            Open the file and use Markdown to write one original poem or paste one of your favorite poems. Make sure to add a title!\n           \n            If you are pasting someone else's poem, use proper attribution. They may include, but is not necessarily limited to, name, collection\/book from which you found the poem, date published, page numbers, etc.\n           \n            Stage your new file. Verify that it is in fact staged.\n           \n             git add .  OR  git add poem1.md , then  git status \n           \n            Your text editor might also indicate that this worked. For instance,  VS  Code will show an  A  next to the file name.\n           \n            Commit your new file with a good commit message. Verify that it is committed. \n           \n             git commit -m \"<commit-message>\" ,  git status \n           \n            Your text editor might also indicate that this worked. For instance,  VS  Code will remove and letters and colors next to the file name. It will also show your commit message in the  Timeline  panel on the bottom left.\n           \n            Do not push yet! You will add your second poem in a second commit before you push. (So this push will have two commits at one time.)\n           \n            Create a new file titled  poem2.md . Open it and add your second original poem or paste your second-favorite poem (with attribution, of course!). Stage this file and commit it with a good commit message.\n           \n            After editing,  git add .  or  git add poem2.md . Then  git commit -m \"<message>\" .  git status  might be useful here.\n           \n            Push your new files to GitHub, open a pull request, and merge your changes into  main .\n           \n             git push origin <branch-name> ,  Compare and pull request ,  Merge ,  Confirm merge .\n           \n            Go back to local and pull in your new changes on main.\n           \n             git switch main , then  git pull origin main \n           \n            For extra credit, create a new branch and write\/paste a third poem. Follow the same processes as above.\n           \n          If you'd like, use   to delete your repository. I won't be using it again in this book and this might be good practice to see what deleting a repo looks like. On the contrary, it might be nice to keep the repository to show other people that you are active on GitHub and are open to learning how things work. You can always write this fact in a statement on your README.\n         \n      And that's that! Hopefully you're starting to get the hang of this process. If you ever need to practice this again (or need a refresher on what to do), revisit this page. It might take a little bit to become fully comfortable with the process and to remember the order in which to do things. In time, you will get it!\n     "
},
{
  "id": "git-big-act",
  "level": "2",
  "url": "S_gitbigact.html#git-big-act",
  "type": "Activity",
  "number": "4.11",
  "title": "",
  "body": "\n          The goal of this activity will be to create a new repository and write two poems (or paste your favorite poems, with attributions). Good luck and have fun!\n         \n            First, you need to create a new repository. Navigate to GitHub and create a new repository. Name it appropriately for the end goal   you can't change it later. Make sure you initialize with a README file.\n           \n            Use one of the multiple methods to create a new repo in GitHub. Perhaps name it  poems  or  fav-poems ? This part is up to you as long as the name accurately describes the future repo contents. Check the box that says to add a README file.\n           \n            Clone your repo on your computer. Navigate to the new repo using your terminal.\n           \n            Make sure you are not  inside  your previous repositories. Nested repositories will not work. So  cd  to the folder in which you want to place your new repo.\n           \n            Copy the HTTPS link on GitHub. Use  git clone <copied-link> . Use  cd <repo-name>  to move your terminal into that repo.\n           \n            You will edit your README file first. Create and switch to a new branch, named appropriately.\n           \n             git branch readme  then  git switch readme  OR  git switch -c readme \n           \n            You may use any branch name you like as long as it's clear what the branch is for.  readme  seems like it will work nicely.\n           \n            Open the README file. Change the default title to a better title. Add a sentence or two explaining what this repo is and why you are creating it. Add any other relevant information you think might help other people looking at your repo would need or like. Save the file.\n           \n            Perhaps a better title would be  My Favorite Poems  or  Two Original Poems . This can vary. You might explain that this repository contains two of your favorite poems (or two poems you wrote yourself) and this it was born from a project in  Better Git Started  to help you get more familiar with GitHub and Git functions. This can also vary.\n           \n            Check if Git is tracking the README file you just edited. \n           \n             git status \n           \n            Stage your file for committing.\n           \n             git add .  OR  git add README.md , maybe  git status  to confirm?\n           \n            Commit your changes. Add an informative commit message.\n           \n             git commit -m 'edit readme with repo info' , maybe  git status  to confirm?\n           \n            Of course, your commit message may be different. Perhaps  edit readme  and enough for you.\n           \n            Push your changes to GitHub.\n           \n             git push origin <your-branch-name> \n           \n            Go to GitHub and open a pull request. Merge your changes into your main branch. You may delete the old branch.\n           \n             Compare and pull request ,  Merge ,  Confirm merge . (Check the main branch on GitHub to make sure this worked.)\n           \n            Go back to your local computer. Switch back to main and pull in your changes.\n           \n             git switch main  then  git pull origin main \n           \n            You will now create your poems. Create and switch to an appropriately-named branch.\n           \n             git branch poems  then  git switch poems  OR  git switch -c poems \n           \n            You may use any branch name you like as long as it's clear what the branch is for.  poems  works for me.\n           \n            Note that you could split up each poem into its own branch. Depending on the length of your poems, you may want to do that in practice but here we will edit both on one branch. That way you can practice two commits in one push!\n           \n            Create a new  .md  file called  poem1.md .\n           \n            In  VS  Code, you can create a new file with the paper-with-a-plus icon in the  Explorer  panel in the top left.\n           \n            Use the hint or use your terminal ( touch poem1.md ).\n           \n            Open the file and use Markdown to write one original poem or paste one of your favorite poems. Make sure to add a title!\n           \n            If you are pasting someone else's poem, use proper attribution. They may include, but is not necessarily limited to, name, collection\/book from which you found the poem, date published, page numbers, etc.\n           \n            Stage your new file. Verify that it is in fact staged.\n           \n             git add .  OR  git add poem1.md , then  git status \n           \n            Your text editor might also indicate that this worked. For instance,  VS  Code will show an  A  next to the file name.\n           \n            Commit your new file with a good commit message. Verify that it is committed. \n           \n             git commit -m \"<commit-message>\" ,  git status \n           \n            Your text editor might also indicate that this worked. For instance,  VS  Code will remove and letters and colors next to the file name. It will also show your commit message in the  Timeline  panel on the bottom left.\n           \n            Do not push yet! You will add your second poem in a second commit before you push. (So this push will have two commits at one time.)\n           \n            Create a new file titled  poem2.md . Open it and add your second original poem or paste your second-favorite poem (with attribution, of course!). Stage this file and commit it with a good commit message.\n           \n            After editing,  git add .  or  git add poem2.md . Then  git commit -m \"<message>\" .  git status  might be useful here.\n           \n            Push your new files to GitHub, open a pull request, and merge your changes into  main .\n           \n             git push origin <branch-name> ,  Compare and pull request ,  Merge ,  Confirm merge .\n           \n            Go back to local and pull in your new changes on main.\n           \n             git switch main , then  git pull origin main \n           \n            For extra credit, create a new branch and write\/paste a third poem. Follow the same processes as above.\n           \n          If you'd like, use   to delete your repository. I won't be using it again in this book and this might be good practice to see what deleting a repo looks like. On the contrary, it might be nice to keep the repository to show other people that you are active on GitHub and are open to learning how things work. You can always write this fact in a statement on your README.\n         "
},
{
  "id": "S_collabconsider",
  "level": "1",
  "url": "S_collabconsider.html",
  "type": "Section",
  "number": "5.1",
  "title": "Before Beginning, Consider This",
  "body": "Before Beginning, Consider This github collaborate merge conflict \n    One of the great features of GitHub is the promotion of collaboration, adding new things, and improving others' work. If your repo is public, anyone can contribute to it. But as the repo owner, you have certain authorities. No one will be able to change things officially without your permission. The main branch will only be changed if you (or other moderators) approve it. This emphasizes the importance of branches (so you can test others' work) and forks (as explored in  ). \n   \n    As more people collaborate on a project at the same time, the complexity of the branch and fork system increases. With this, it is important to consider potential conflicts. Especially with larger projects, you could have multiple working on the same area at the same time. If two people decide to change the same part of the project at the same time, which edits win? Who gets the privilege of having their changes incorporated into  main ? Sadly, GitHub and Git cannot figure that out by themselves and create a merge conflict, leaving you, the repo moderator, to settle the dispute.\n   \n    Throughout this part, I will guide you through the process of editing with a team while providing warnings and lessons from what I have learned. I should say that the extent of my knowledge of this topic is not as developed as others' might be. With Git, I find it better to stick with the things I know how to do (add, commit, push, pull, fork, clone, etc.) and if a problem arises, I research how to fix it. As I learn how to correct Git errors, I will update this part of the book and especially  . Regardless, the focus of this book is on the basics and what you need to know to have a successful workflow. If that's what you need, read on.\n   "
},
{
  "id": "S_hubcollabsetup",
  "level": "1",
  "url": "S_hubcollabsetup.html",
  "type": "Section",
  "number": "5.2",
  "title": "Getting Set Up To Collaborate",
  "body": "Getting Set Up To Collaborate write access github collaborate write access Forking fork github forking \n      Recall from   that in order to edit files on our computer, we had to clone the respository from GitHub. Essentially, this was a copy of your repository on your computer. In order to edit someone else's files, we need to create a copy of their repository  on GitHub . Then, we edit our copied files and submit a pull request asking the moderator to incorporate our changes.\n     fork \n      You may have noticed that GitHub provides a  Fork  button in the top right corner of a repo's webpage (note that you cannot fork your own repos). See   for a visual reference then proceed to try your hand at forking.\n     The Fork Button on GitHub Location of the fork button on GitHub (near Watch button and Star button) Forking On GitHub \n          This activity focuses on forking a repo and getting a new project started that we will carry throughout this chapter: editing a file on a repository I created.\n         \n            First, navigate to my  aboutme  repository on GitHub .\n           \n            Locate the  Fork  button in the top right corner.\n           \n            Note the number next to it. This indicates the number of people who have forked a repo. This also applies to the Watch (people who receive notifications for the repo) and Star buttons. A good sense of how popular and how useful the contents of the repo are can be gained from looking at these numbers (where higher is better.)\n           \n            Click on the Fork button. A new webpage will appear allowing you to rename your fork and add a description. I recommend keeping the same name as the parent repository, as GitHub suggests. This will make it easier to remember what the repo is for.\n           \n            That being said, you cannot have two repos with the same name. If you have been following along with the book, you might already have a repository named  aboutme . In that case, you should choose a different name, but one that is close or similar to the parent repo's.\n           \n            Click on the Create Fork button.\n           \n            After a few seconds, your own fork will appear! Take a look at the top left corner where the name of the repo is displayed. You should notice that your personal username and repo name are there. But underneath that, in smaller font, GitHub tells you the username and repo name from which you forked. This is useful for reminding yourself that you are working on a copy of a repository, not the authoritative one.\n           \n      Congrats! You've just forked a repository! If you plan on collaborating with others forking will become something you get very used to.\n     \n      Remember that you just created a copy of my repository. You can make all the changes you want on your copy without asking for permisson from me. But as soon as you try to update my repo, you will have to submit a pull request. A fork is where you edit some things, try some things, and break some things before making a final product of whatever it is you were working on. Then send the changes over to the main repo!\n     "
},
{
  "id": "p-774",
  "level": "2",
  "url": "S_hubcollabsetup.html#p-774",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "write access "
},
{
  "id": "p-776",
  "level": "2",
  "url": "S_hubcollabsetup.html#p-776",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "fork "
},
{
  "id": "fig-hub-fork",
  "level": "2",
  "url": "S_hubcollabsetup.html#fig-hub-fork",
  "type": "Figure",
  "number": "5.2.1.1",
  "title": "",
  "body": "The Fork Button on GitHub Location of the fork button on GitHub (near Watch button and Star button) "
},
{
  "id": "act-hub-fork",
  "level": "2",
  "url": "S_hubcollabsetup.html#act-hub-fork",
  "type": "Activity",
  "number": "5.1",
  "title": "Forking On GitHub.",
  "body": "Forking On GitHub \n          This activity focuses on forking a repo and getting a new project started that we will carry throughout this chapter: editing a file on a repository I created.\n         \n            First, navigate to my  aboutme  repository on GitHub .\n           \n            Locate the  Fork  button in the top right corner.\n           \n            Note the number next to it. This indicates the number of people who have forked a repo. This also applies to the Watch (people who receive notifications for the repo) and Star buttons. A good sense of how popular and how useful the contents of the repo are can be gained from looking at these numbers (where higher is better.)\n           \n            Click on the Fork button. A new webpage will appear allowing you to rename your fork and add a description. I recommend keeping the same name as the parent repository, as GitHub suggests. This will make it easier to remember what the repo is for.\n           \n            That being said, you cannot have two repos with the same name. If you have been following along with the book, you might already have a repository named  aboutme . In that case, you should choose a different name, but one that is close or similar to the parent repo's.\n           \n            Click on the Create Fork button.\n           \n            After a few seconds, your own fork will appear! Take a look at the top left corner where the name of the repo is displayed. You should notice that your personal username and repo name are there. But underneath that, in smaller font, GitHub tells you the username and repo name from which you forked. This is useful for reminding yourself that you are working on a copy of a repository, not the authoritative one.\n           "
},
{
  "id": "S_hubcollabedit",
  "level": "1",
  "url": "S_hubcollabedit.html",
  "type": "Section",
  "number": "5.3",
  "title": "Editing",
  "body": "Editing github collaborate markdown \n      This part should seem familiar. Remember how to edit files on GitHub? (Hint:  .) Let's try editing a file on my  aboutme  repo. Click on the  aboutyou.md  file on the home page of the repo. This is a Markdown file, just like the README we were working with in  . Follow   to edit this file. Remember, things should look very similar to   and  .\n     Collaboration Editing: Start With Yourself \n          When most people collaborate, they make a bunch of changes on their fork. Then, when the changes are ready, they send them over to the main repository. This activity focuses on the first part of that process, editing files on your own fork.\n         \n            Click on the  edit  button (the pencil icon on the right side of the page)\n           \n            Follow the instructions on the file to add your own entry.\n             \n                To contribute, add your name as a level two heading. This can be just your first name, just your last name, both, all names, initials, a name you like, etc. In a paragraph, type the month, year, and the country and\/or state\/province you are contributing from. If you feel like it, tell us something cool about you! (See my example.)\n               \n                Responses will be moderated. No explicit content whatsoever will be accepted (keep things G rated please!).\n               \n           \n            Once you are done editing, scroll to the bottom of the page, to the Commit changes block. In the box that is autofilled with  Update aboutyou.md , type a more informative commit message. A description is not necessary.\n           \n            Do not select the button that says  Commit directly to the  main  branch . It is always a good idea to create a branch when editing someone else's work.\n           \n            Select the button that allows you to create a new branch and type in a better branch name.\n           \n            Notice that the green button now says  propose changes  rather than  commit changes . Again, this is because you do not have permission to commit changes to my repo, just propose them. Click on this button once you have changed the branch name.\n           \n            This will conveniently bring you right to the pull request page, which might look familiar. Your previous commit message will automatically be there. The only thing you really need to do is click on  Create pull request . (But read below before you click it.)\n           \n            Also take note at the top of this page GitHub tells you what branches are being merged. You will probably see \n             base: main compare: <your-branch-name> . \n             \n            This means that you are taking your branch and attempting to merge your changes into the main branch from the  base  repository, or  your repo .\n           \n            Like before, if you scroll down, you can see all of the changes you made. Later, I will be able to see this too, to make sure that you only changed what you were supposed to and didn't write anything R-rated.\n           \n            Now you can create the pull request.\n           \n            Here, you are asking yourself for permission to merge into your fork. Hopefully you give yourself permission to do so. Click on  Merge pull request  and then  Confirm merge . You may delete the branch if you'd like.\n           \n      Assuming you have completed  , you might notice that a new box has popped up in the main page of your fork. It might say something like  This branch is 2 commits ahead of  ian-curtis:main . This is how you create a pull request.\n     \n      Now you can make as many changes and commits as you want before opening a pull request (this will change the message on the dialog box). You don't even have to merge your changes into your fork's main branch before opening a pull request. However, I usually choose to do so just so I know that all of my changes from my various branches are included where they are supposed to be. Feel free to continue making edits and\/or commits to your entry in the  aboutyou.md  file before continuing!\n     Collaboration Editing: Sending Your Changes Away pull request github pull request base repository head repository merge github merge \n          This activity assumes you have been following along throughout the section.   must be completed before this activity. Just like in  , we will use the  Contribute  option on the Code tab of a repo (see  ) even though there are other ways to open a pull request.\n         The Contribute dialog box on GitHub. Image of top part of home page of a fork. This is the Code tab with main branch selected. At least one commit must be made to have the contribute dialog appear. \n            Make sure you are on your fork's home page (the Code tab). Click on the Contribute drop down menu and then the green Open pull request button. This will bring you to a new page containing familiar elements.\n           base repository head repository \n            Once you have found all of the above, go ahead and click on the  Create pull request  button. If your pull request has more than one commit, you will have to enter a title for the request. This is where a description might be helpful. Choose a title that describes what you are doing. If you would like to supply more information, ask a question, or give clarification, type as much as you want into the  Leave a comment  text box. Then click  Create pull request .\n           \n            This time notice that there is no option to  Merge  into the main branch. This is because you do not have write access to the parent repository. At this point, wait for a moderator from the authoritative repo to approve your pull request.\n           \n      Note that forking can drastically increase the complexity of the GitHub tree. Recall from   that branches make another branch on the tree which you eventually merge back into the main branch, or the trunk of the tree. Cloning made this more complex due to the copy on your computer. Forking adds another copy into the mix.   provides a possible diagram of the forking process. But there are many different variations to this diagram as it is up to you how many branches\/commits to make and to which branch you push.\n     Example of GitHub Tree with a fork Arrow diagram. Main repo to fork copy. Branches and edits are made on the fork and are merged into the fork's main branch. Then all edits are merged into main repo's main branch. \n      Now you can sit back and relax until a moderator reviews your contribution. If they make a comment or approve your pull request, you will get an email to the email address on your account. Once they approve your work, great! Congrats! Are you done? Proceed to   to find out!\n     "
},
{
  "id": "edit-aboutyou",
  "level": "2",
  "url": "S_hubcollabedit.html#edit-aboutyou",
  "type": "Activity",
  "number": "5.2",
  "title": "Collaboration Editing: Start With Yourself.",
  "body": "Collaboration Editing: Start With Yourself \n          When most people collaborate, they make a bunch of changes on their fork. Then, when the changes are ready, they send them over to the main repository. This activity focuses on the first part of that process, editing files on your own fork.\n         \n            Click on the  edit  button (the pencil icon on the right side of the page)\n           \n            Follow the instructions on the file to add your own entry.\n             \n                To contribute, add your name as a level two heading. This can be just your first name, just your last name, both, all names, initials, a name you like, etc. In a paragraph, type the month, year, and the country and\/or state\/province you are contributing from. If you feel like it, tell us something cool about you! (See my example.)\n               \n                Responses will be moderated. No explicit content whatsoever will be accepted (keep things G rated please!).\n               \n           \n            Once you are done editing, scroll to the bottom of the page, to the Commit changes block. In the box that is autofilled with  Update aboutyou.md , type a more informative commit message. A description is not necessary.\n           \n            Do not select the button that says  Commit directly to the  main  branch . It is always a good idea to create a branch when editing someone else's work.\n           \n            Select the button that allows you to create a new branch and type in a better branch name.\n           \n            Notice that the green button now says  propose changes  rather than  commit changes . Again, this is because you do not have permission to commit changes to my repo, just propose them. Click on this button once you have changed the branch name.\n           \n            This will conveniently bring you right to the pull request page, which might look familiar. Your previous commit message will automatically be there. The only thing you really need to do is click on  Create pull request . (But read below before you click it.)\n           \n            Also take note at the top of this page GitHub tells you what branches are being merged. You will probably see \n             base: main compare: <your-branch-name> . \n             \n            This means that you are taking your branch and attempting to merge your changes into the main branch from the  base  repository, or  your repo .\n           \n            Like before, if you scroll down, you can see all of the changes you made. Later, I will be able to see this too, to make sure that you only changed what you were supposed to and didn't write anything R-rated.\n           \n            Now you can create the pull request.\n           \n            Here, you are asking yourself for permission to merge into your fork. Hopefully you give yourself permission to do so. Click on  Merge pull request  and then  Confirm merge . You may delete the branch if you'd like.\n           "
},
{
  "id": "collab-pr",
  "level": "2",
  "url": "S_hubcollabedit.html#collab-pr",
  "type": "Activity",
  "number": "5.3",
  "title": "Collaboration Editing: Sending Your Changes Away.",
  "body": "Collaboration Editing: Sending Your Changes Away pull request github pull request base repository head repository merge github merge \n          This activity assumes you have been following along throughout the section.   must be completed before this activity. Just like in  , we will use the  Contribute  option on the Code tab of a repo (see  ) even though there are other ways to open a pull request.\n         The Contribute dialog box on GitHub. Image of top part of home page of a fork. This is the Code tab with main branch selected. At least one commit must be made to have the contribute dialog appear. \n            Make sure you are on your fork's home page (the Code tab). Click on the Contribute drop down menu and then the green Open pull request button. This will bring you to a new page containing familiar elements.\n           base repository head repository \n            Once you have found all of the above, go ahead and click on the  Create pull request  button. If your pull request has more than one commit, you will have to enter a title for the request. This is where a description might be helpful. Choose a title that describes what you are doing. If you would like to supply more information, ask a question, or give clarification, type as much as you want into the  Leave a comment  text box. Then click  Create pull request .\n           \n            This time notice that there is no option to  Merge  into the main branch. This is because you do not have write access to the parent repository. At this point, wait for a moderator from the authoritative repo to approve your pull request.\n           "
},
{
  "id": "fig-collab-fork",
  "level": "2",
  "url": "S_hubcollabedit.html#fig-collab-fork",
  "type": "Figure",
  "number": "5.3.0.2",
  "title": "",
  "body": "Example of GitHub Tree with a fork Arrow diagram. Main repo to fork copy. Branches and edits are made on the fork and are merged into the fork's main branch. Then all edits are merged into main repo's main branch. "
},
{
  "id": "S_hubcollabfetch",
  "level": "1",
  "url": "S_hubcollabfetch.html",
  "type": "Section",
  "number": "5.4",
  "title": "Fetching Upstream",
  "body": "Fetching Upstream First, Fetching fetch github fetch \n    To answer the question in  , we are not quite done. See, even though your fork and the parent repository are connected, updates in one are not automatically reflected in the other. So if you just contributed to a repository and the pull request was accepted, you should be fine. But if someone else's pull request also got approved, your fork will not have those changes. You have to tell GitHub to grab those changes and update your fork.\n   fetching merge \n    You might remember using  git pull  to fetch in changes. As we will see later, this essentially is the same thing. Pulling fetches and merges at the same time.\n   \n    Before continuing, you must wait until I accept your pull request from  .\n   Second, Upstream upstream remote upstream upstream \n    Any repository you own will have the remote identifier of  origin , for you. Any repo you do not own  and that you fork  will have the remote identifier of  upstream . Remember that a remote is like a connection between repositories; it's the definition of the link between them. When you fork a repo, you are creating a remote connection between the parent repo (upstream) and your newly-created fork (origin). As we will explore in  , when you clone a repo, you are create a remote connection between your repo (origin), which would be a fork, and your personal computer (local). \n   Third, Fetching Upstream fetch upstream github fetch fetch upstream \n      First, though, go back to the homepage of your fork. You might notice that a slightly different box has appeared. Now it might say something like  This branch is 1 commit  behind   ian-curtis:main  (you could have a different number). Earlier you were  ahead  of  ian-curtis:main . What's going on here?\n     Ahead vs. Behind commit ahead and behind ahead behind \n        As an example, you might have a message like  This branch is 2 commits ahead, 3 commits behind  <parent-repo>:main . This means you have made 2 commits that are not on the parent repo and that the parent repo has 3 commits that you have not fetched.\n       Fetch Upstream Often \n        In my opinion, you want to keep the least amount of commits behind. If you are working on someone else's work, you want to stay up to date. If some big change happens, you should make sure you have that change on your fork. Why? Well, you don't want to overwrite anything someone else just did. You also don't want to work on adding a new feature that is already incorporated. Maybe the new change helps you do your work better\/faster. You also want to avoid potential merge conflicts because someone else changed the same files you are working on.\n       \n        Therefore, it is usually recommended practice to fetch upstream as often as you can. At the very least, daily, especially if the project is popular and updated frequently. It is possible that there is no new upstream content to fetch but hey, at least you checked!\n       \n        This warning will repeat in   when we talk about pulling and pushing.\n       \n      You may be wondering why you are even any commits behind! If your addition to my repository was accepted, then our repos should match, right? Not quite. Actually, that act of accepting your pull request and merging into my main branch was a commit in itself which is where the mystery commit comes from.\n     Fetching Upstream \n          Enough talk, let's fetch that upstream!\n         \n            Find the  Fetch upstream  dialog box on the home page of your fork.\n           \n            Notice that GitHub will fetch and merge the upstream changes in one step (even though it is technically two steps). Great!\n           \n            It also emphasizes   through a somewhat passive-aggressive reminder:  Keep your fork up-to-date with the upstream repository .\n           \n            To make the magic happen, click on  Fetch and merge .\n           \n            Bam. Done. But do make sure your fork now says  This branch is up to date with  ian-curtis\/aboutme:main  (in general, this would be the name of whatever repo you forked from). Yours may also say, depending on when you fetched, that your branch is a number of commits ahead (but none behind).\n           \n      And there you go! Now you are ready to keep on editing or to go about your day. If you are interested in some other GitHub features related to collaborating, continue to  . Otherwise, go to   to see how to use Git commands and local edits to collaborate.\n     "
},
{
  "id": "p-819",
  "level": "2",
  "url": "S_hubcollabfetch.html#p-819",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "fetching merge "
},
{
  "id": "p-822",
  "level": "2",
  "url": "S_hubcollabfetch.html#p-822",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "upstream "
},
{
  "id": "p-824",
  "level": "2",
  "url": "S_hubcollabfetch.html#p-824",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "fetch upstream "
},
{
  "id": "p-826",
  "level": "2",
  "url": "S_hubcollabfetch.html#p-826",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ahead behind "
},
{
  "id": "warn-fetch-often",
  "level": "2",
  "url": "S_hubcollabfetch.html#warn-fetch-often",
  "type": "Warning",
  "number": "5.4.3.1",
  "title": "Fetch Upstream Often.",
  "body": "Fetch Upstream Often \n        In my opinion, you want to keep the least amount of commits behind. If you are working on someone else's work, you want to stay up to date. If some big change happens, you should make sure you have that change on your fork. Why? Well, you don't want to overwrite anything someone else just did. You also don't want to work on adding a new feature that is already incorporated. Maybe the new change helps you do your work better\/faster. You also want to avoid potential merge conflicts because someone else changed the same files you are working on.\n       \n        Therefore, it is usually recommended practice to fetch upstream as often as you can. At the very least, daily, especially if the project is popular and updated frequently. It is possible that there is no new upstream content to fetch but hey, at least you checked!\n       \n        This warning will repeat in   when we talk about pulling and pushing.\n       "
},
{
  "id": "act-fetch-upstream",
  "level": "2",
  "url": "S_hubcollabfetch.html#act-fetch-upstream",
  "type": "Activity",
  "number": "5.4",
  "title": "Fetching Upstream.",
  "body": "Fetching Upstream \n          Enough talk, let's fetch that upstream!\n         \n            Find the  Fetch upstream  dialog box on the home page of your fork.\n           \n            Notice that GitHub will fetch and merge the upstream changes in one step (even though it is technically two steps). Great!\n           \n            It also emphasizes   through a somewhat passive-aggressive reminder:  Keep your fork up-to-date with the upstream repository .\n           \n            To make the magic happen, click on  Fetch and merge .\n           \n            Bam. Done. But do make sure your fork now says  This branch is up to date with  ian-curtis\/aboutme:main  (in general, this would be the name of whatever repo you forked from). Yours may also say, depending on when you fetched, that your branch is a number of commits ahead (but none behind).\n           "
},
{
  "id": "S_gitcollabsetup",
  "level": "1",
  "url": "S_gitcollabsetup.html",
  "type": "Section",
  "number": "6.1",
  "title": "Getting Set Up: A Few Extra Steps",
  "body": "Getting Set Up: A Few Extra Steps fork \n      Before you are able to jump right in and start editing files locally, there are some things that have to happen first. Like in  , we need to fork the repository you would like to edit. Although it is possible to use Git to edit on a repository that has not been forked, you will find problems when you try to push your changes since you do not have write access to the repo.\n     \n      So, to continue on with this section, make sure you have my  aboutme  repository forked. Recall that we did this in  . If you've done this already, you do not need to do it again. If you haven't, review the instructions in  .\n     \n      I would also like to repeat something I said back in  :\n       \n          It's not always feasible to edit file on GitHub, as we did in   and  . Certain text editors (for instance, Visual Studio Code which you might also have installed) have features built in to ease coding and file editing.  VS  Code extensions might add color to text to help you see what's going on in your code. Others provide bug fixing and error catching before the errors actually occur. In general, you will edit files on your personal computer and will want to share them with the world.  I would stay away from editing on GitHub unless you have a small correction and\/or you don't need any special editing tools. \n         \n     \n      The rest of this section and chapter will look a lot like   and   with a few changes. With that being said, do you remember what the first step to editing locally was?\n     Cloning A Fork clone git clone \n      Hopefully you didn't peek ahead! The first step is to clone our repo. Remember that in order to edit files locally, we need a copy of the repository on our computer and the way to do that is to clone.\n     \n      This again increases the complexity of the Git tree. From an authoritative repo we made a copy on GitHub, called a fork. We did this so that we could have all freedom to edit the files as we pleased without breaking any of the official files. From there, we need to clone to make a copy of the fork on our computer. Do make sure you are cloning your fork,  not the repo you forked .\n     \n          So go ahead, use your terminal clone your fork of my  aboutme  repository. Before you do so, make sure that your branch is up to date with  ian-curtis\/aboutme:main .\n         \n          Don't remember how to do this?   might be useful, as may be the solution to this exercise.\n         \n          Use the green code tab  on your fork  to copy the  HTTPS  link. Then use  git clone <https-link> . Make sure you have used  cd  to get to the right place first!\n         \n      Great! Your repo should now be cloned on to your computer. Carry on.\n     Don't Forget About Branches! branches git branches \n      For nearly every edit we've made in this book, we've made a corresponding branch. This is no different. I hope you understand the importance of branches, even if you are working with yourself. Since my repository is public, anyone can edit the files there. Therefore, I will approve pull requests from anyone as I will assume they are working through this book. However, the task in this chapter will be exclusive to just those who are reading this book. There is file called  secret.txt  with no instructions or anything at all. Later on, you will be adding a line to this text file.\n     \n      For now, create a good branch name for this edit, perhaps  secret ? Remember that cloning a repo does not navigate inside of the repo so make sure you use  cd <your-repo-name>  before creating a branch.\n     \n          Make a new branch. Switch to that branch. See   if you need a refresher.\n         \n          There are a couple of choices here.\n           \n               \n                 git branch <name>  then  git switch <name> \n               \n             \n               \n                 git switch -c <name> \n               \n             \n         Diagram of a fork, a clone, and a branch Arrow diagram depicting main repo copied to a fork, then a clone. Edits on a branch from the clone are merged into main branch of the fork, then merged in to main branch of authoritative repo. \n      Take a look at   for a visualization of what the Git tree might look like at the end of the editing process. This is the end goal. Then, let's get to editing.\n     "
},
{
  "id": "exercise-16",
  "level": "2",
  "url": "S_gitcollabsetup.html#exercise-16",
  "type": "Checkpoint",
  "number": "6.1.1.1",
  "title": "",
  "body": "\n          So go ahead, use your terminal clone your fork of my  aboutme  repository. Before you do so, make sure that your branch is up to date with  ian-curtis\/aboutme:main .\n         \n          Don't remember how to do this?   might be useful, as may be the solution to this exercise.\n         \n          Use the green code tab  on your fork  to copy the  HTTPS  link. Then use  git clone <https-link> . Make sure you have used  cd  to get to the right place first!\n         "
},
{
  "id": "exercise-17",
  "level": "2",
  "url": "S_gitcollabsetup.html#exercise-17",
  "type": "Checkpoint",
  "number": "6.1.2.1",
  "title": "",
  "body": "\n          Make a new branch. Switch to that branch. See   if you need a refresher.\n         \n          There are a couple of choices here.\n           \n               \n                 git branch <name>  then  git switch <name> \n               \n             \n               \n                 git switch -c <name> \n               \n             \n         "
},
{
  "id": "fig-git-fork-clone",
  "level": "2",
  "url": "S_gitcollabsetup.html#fig-git-fork-clone",
  "type": "Figure",
  "number": "6.1.2.2",
  "title": "",
  "body": "Diagram of a fork, a clone, and a branch Arrow diagram depicting main repo copied to a fork, then a clone. Edits on a branch from the clone are merged into main branch of the fork, then merged in to main branch of authoritative repo. "
},
{
  "id": "S_gitcollabedit",
  "level": "1",
  "url": "S_gitcollabedit.html",
  "type": "Section",
  "number": "6.2",
  "title": "Collaboration Editing With Git",
  "body": "Collaboration Editing With Git edit files git edit \n    As before, the title is a little misleading. Git does not offer editing features, but, once again, it does keep track of your edits and commits for version control.\n   \n    This section will be very short. All you need to do is open  secret.txt  and type one line of whatever you want (G-rated of course). Literally could be anything. Just something random. Maybe the following will inspire you:\n     \n         \n           Tick tock  went the tick tock croc.\n         \n       \n         \n          Have you ever tried ham and peanut butter?\n         \n       \n         \n          The jalepeno, who was too hot, walked into the ocean to cool off and was eaten by a shark who became the first creature to breath fire underwater.\n         \n       \n         \n          I recently tripped up the stairs.\n         \n       \n   \n    Whatever you choose, try to stick to one line. When you are done, save the file (which will tell Git that there are active changes) and move on. The next steps are similar, but not exactly the same as those in  .\n   "
},
{
  "id": "S_gitcollabfinalize",
  "level": "1",
  "url": "S_gitcollabfinalize.html",
  "type": "Section",
  "number": "6.3",
  "title": "Revisiting the Three Step Process",
  "body": "Revisiting the Three Step Process three step process git three step process \n      Just as in  , this is a very important section. Take care to do everything in the correct order and with the correct keywords.\n     \n      Recall that the three step process for sending changes back to GitHub consists of\n       \n           \n            Staging your files for sending\n           \n         \n           \n            Commiting your changes\n           \n         \n           \n            Pushing your changes to GitHub\n           \n         \n     \n      Since we've already covered much of this material, I won't go into as much detail. I will, however, point out any significant differences. As you move forward, don't forget about the handy  git status  command to remind you what files have been edited, staged, or committed.\n     Staging Files staging git stage \n      This step will not be any different from before. Use   to stage your edited  secret.txt  file.\n     \n      Remember that  git add  is pretty flexible. If you've edited more than one file, you can choose which files to add. Maybe you want to make two commits. In that case, stage some files and commit them, then stage the other files and commit them.\n     Committing Files commit files git commit \n      This step will also not be any different from before. Just remember that you should try to design your commit messages to be short and descriptive. If the repo you are contributing to has a preference for how commit messages are written, you should try to follow that as best you can. Otherwise, don't be offended when your commit message is changed.\n     \n        will probably be helpful as will the reminders at the end of  . Commit your  secret.txt  file and provide an apt commit message (especially one that shows you were reading this book).\n     Pushing Files push files git push \n      Alright, here is where some small changes come up. In  , we pushed to the origin repository. But from   and  , when you fork, you introduce another remote: upstream. And now that we have a clone, we also have a local repo.\n     \n      Alright, so what about right now? You have your changes staged and committed, but to where do you push? Local? That won't work since you already have the changes locally. Upstream? It might make sense to push directly to the authoritative repo, but since you don't have write access, this will likely not work. The right thing to do here is push to origin. Remember,  origin  in this case, refers to your fork.\n     \n      From   (and  ) can you figure out what to type into the terminal to push to origin?\n     \n      Remember you need to specify the remote and the branch you are pushing to so  git push origin <branch-name>  will do nicely.\n     \n      Believe it or not,   was written in generic terms, so it applies here as well! Keep it handy, or perhaps keep   and   in mind as you proceed in your Git career. Now let's go create a pull request from that push we just made.\n     "
},
{
  "id": "S_gitcollabpr",
  "level": "1",
  "url": "S_gitcollabpr.html",
  "type": "Section",
  "number": "6.4",
  "title": "The Final Steps",
  "body": "The Final Steps \n    All that's left to do is to create some pull requests. There are technically two ways you could make this work. You can either open a pull request from your new branch directly to the authoritative main branch or you can merge from your new branch to your fork's main branch and then to the authoritative main branch.\n   Opening a Pull Request pull request github pull request merge github merge head repository base repository \n      Use   to go back to GitHub and start opening a pull request. When you arrive at the pull request creation screen (titled  Comparing changes ), you generally have two choices, as mentioned above. The following list describes the branches and repos you should have selected at the top of the screen, under the page heading.\n       \n           Merge from your new branch to your fork, then to the authoritative \n           \n            Your base repository should be  <your-username>\/<your-fork> , base should be  main , and compare should be  <your-branch . Do note that once you select your fork for the base repository, the page will reload and the base and head repository options will disappear.\n           \n           \n            Then, click Create pull request and merge in to main. You may now open another pull request with options base repository of  <authoritative-username>\/<authoritative-repo> , base should be  main , head repository should be  <your-username><your-fork>  and compare should be  main .\n           \n         \n           Merge from your new branch directly to the authoritative \n           \n            Your base repository should be  <authoritative-username>\/<authoritative-repo> , base should be  main , head repository should be  <your-username><your-fork>  and compare should be  <your-branch> .\n           \n         \n     \n      After either of those two, click on  Create pull request , enter a title, and click  Create pull request  again. From there, you will have to wait for approval and moderator merge.\n     Pulling\/Fetching Upstream fetch upstream upstream remote upstream pull git pull \n      Recall from   that you can update your fork with the latest upstream changes through the  Fetch upstream  button. That works great for updating the fork, but it doesn't update your local clone. There are two main ways in which you can update both your fork and for clone with new changes to upstream.\n     Updating Origin and Local, Method 1 git pull pull origin remote origin \n          This method will first fetch upstream on GitHub, then pull in changes from origin.\n         \n            Use   to fetch (and merge) upstream content into the main branch of your fork (origin).\n           \n            Now, head back to your terminal and make sure you are navigated to your clone. Do a check to make sure you are on your main branch; if not, use  git switch main .\n           \n            If you are planning on making more changes to a branch, but want it updated to the latest upstream changes, you can stay on a branch. If you have any uncommitted changes, you might make a merge conflict.\n           \n            Now use  git pull  to pull in the changes from your recently-updated fork.   may be helpful. Just remember that you are pulling in changes from the main branch on origin.\n           \n             git pull origin main  (if you are pulling from origin, just  git pull  can work, too)\n           Updating Origin and Local, Method 2 git add remote remote origin remote upstream upstream pull push git pull git push \n          This method will first set up a remote to upstream, pull in changes from upstream, then push changes to origin.\n         \n            Head to your terminal and make sure you are navigated to your clone. Do a check to make sure you are on your main branch; if not, use  git switch main .\n           \n            If you are planning on making more changes to a branch, but want it updated to the latest upstream changes, you can stay on a branch. If you have any uncommitted changes, you might make a merge conflict.\n           \n            This step will only have to be done once per repo that you have forked, then cloned. When you clone a fork, the connection between origin and upstream is not carried over. If I tried to pull from upstream without this connection, I would get an error:\n             \n              fatal: 'upstream' does not appear to be a git repository\n              fatal: Coult not read from remote repository.\n\n              Please make sure you have the correct access rights\n              and the repository exists.\n               \n           \n            This is troublesome! Clearly upstream exists; how else would we have forked it? To fix this, you need to manually set the remote connection. Again, this only has to be done once per forked\/cloned repo.\n           \n                Navigate to the authoritative repo's homepage and copy its  HTTPS  clone link, just as if you were going to clone the repo.\n               \n                Head back to your terminal and use  git remote add upstream <https-link> . There will be no output.\n               \n                Verify that it worked with  git remote -v . This will print out the HTTPS links for origin and upstream. Make sure your username is on the origin remotes and the official repo\/username is on the upstream remotes.\n               \n              Ok, that was the hardest part. Once again, that only has to be done once. After that, every time you want to pull from upstream and update local and origin, you just need two commands:  git pull upstream main  and  git push origin main .\n             \n               git pull  will fetch and merge upstream changes from its main branch and  git push  will take all of your files and push them to origin, updating them there.\n             Use  git pull  Frequently \n        On a repository for which you are an active editor, do not get behind on your pulls. As mentioned in  , sometimes changes to upstream can improve or change how you work locally. Pulling often keeps your work at the very edge of the Git tree and reduces the likelihood you create a merge conflict. You also want to push back to origin often to prevent merge conflicts with yourself.\n       "
},
{
  "id": "try-git-pull-origin",
  "level": "2",
  "url": "S_gitcollabpr.html#try-git-pull-origin",
  "type": "Git Procedure",
  "number": "6.1",
  "title": "Updating Origin and Local, Method 1.",
  "body": "Updating Origin and Local, Method 1 git pull pull origin remote origin \n          This method will first fetch upstream on GitHub, then pull in changes from origin.\n         \n            Use   to fetch (and merge) upstream content into the main branch of your fork (origin).\n           \n            Now, head back to your terminal and make sure you are navigated to your clone. Do a check to make sure you are on your main branch; if not, use  git switch main .\n           \n            If you are planning on making more changes to a branch, but want it updated to the latest upstream changes, you can stay on a branch. If you have any uncommitted changes, you might make a merge conflict.\n           \n            Now use  git pull  to pull in the changes from your recently-updated fork.   may be helpful. Just remember that you are pulling in changes from the main branch on origin.\n           \n             git pull origin main  (if you are pulling from origin, just  git pull  can work, too)\n           "
},
{
  "id": "try-git-pull-upstream",
  "level": "2",
  "url": "S_gitcollabpr.html#try-git-pull-upstream",
  "type": "Git Procedure",
  "number": "6.2",
  "title": "Updating Origin and Local, Method 2.",
  "body": "Updating Origin and Local, Method 2 git add remote remote origin remote upstream upstream pull push git pull git push \n          This method will first set up a remote to upstream, pull in changes from upstream, then push changes to origin.\n         \n            Head to your terminal and make sure you are navigated to your clone. Do a check to make sure you are on your main branch; if not, use  git switch main .\n           \n            If you are planning on making more changes to a branch, but want it updated to the latest upstream changes, you can stay on a branch. If you have any uncommitted changes, you might make a merge conflict.\n           \n            This step will only have to be done once per repo that you have forked, then cloned. When you clone a fork, the connection between origin and upstream is not carried over. If I tried to pull from upstream without this connection, I would get an error:\n             \n              fatal: 'upstream' does not appear to be a git repository\n              fatal: Coult not read from remote repository.\n\n              Please make sure you have the correct access rights\n              and the repository exists.\n               \n           \n            This is troublesome! Clearly upstream exists; how else would we have forked it? To fix this, you need to manually set the remote connection. Again, this only has to be done once per forked\/cloned repo.\n           \n                Navigate to the authoritative repo's homepage and copy its  HTTPS  clone link, just as if you were going to clone the repo.\n               \n                Head back to your terminal and use  git remote add upstream <https-link> . There will be no output.\n               \n                Verify that it worked with  git remote -v . This will print out the HTTPS links for origin and upstream. Make sure your username is on the origin remotes and the official repo\/username is on the upstream remotes.\n               \n              Ok, that was the hardest part. Once again, that only has to be done once. After that, every time you want to pull from upstream and update local and origin, you just need two commands:  git pull upstream main  and  git push origin main .\n             \n               git pull  will fetch and merge upstream changes from its main branch and  git push  will take all of your files and push them to origin, updating them there.\n             "
},
{
  "id": "warn-pull-often",
  "level": "2",
  "url": "S_gitcollabpr.html#warn-pull-often",
  "type": "Warning",
  "number": "6.4.2.1",
  "title": "Use <code class=\"code-inline tex2jax_ignore\">git pull<\/code> Frequently.",
  "body": "Use  git pull  Frequently \n        On a repository for which you are an active editor, do not get behind on your pulls. As mentioned in  , sometimes changes to upstream can improve or change how you work locally. Pulling often keeps your work at the very edge of the Git tree and reduces the likelihood you create a merge conflict. You also want to push back to origin often to prevent merge conflicts with yourself.\n       "
},
{
  "id": "S_gitcollabsumm",
  "level": "1",
  "url": "S_gitcollabsumm.html",
  "type": "Section",
  "number": "6.5",
  "title": "Summary",
  "body": "Summary summary git collaborate \n      This section is a complete summary of the Git\/GitHub process. In some cases, there is more than one way to do a step. I try to provide all methods, but truthfully, I don't use certain methods. I've found a workflow that works for me and I've done it so much that the commands are second nature now. You might think about saving this section for future reference.\n     \n      Some of these pieces are very similar to the summary in  , but is designed for collaborative work (where you are editing someone else's repository). You are welcome to follow the instructions in   and have others edit your files, too.\n\n       \n           \n            Navigate to a repository you would like to edit and fork that repository. See   in  .\n           \n         \n           \n            Use  git clone  to clone your fork (not the repo you forked from) on your personal computer. See  .\n           \n         \n           \n            Create a good branch name (make sure you switch to that branch after you make it). See   and  .\n           \n         \n           \n            Edit those files! ( )\n           \n         \n           \n            Follow the three step process as described in  . Don't forget about the usefulness of  git status  throughout ( )!\n             \n                 \n                  Stage your files with  git add . See   and  .\n                 \n               \n                 \n                  Commit your files with  git commit -m . See   and  .\n                 \n               \n                 \n                  Push your files back to your fork on GitHub (on your current branch) with  git push origin . See  ,   and  .\n                 \n               \n           \n         \n           \n            Create a pull request to merge your changes into your fork's main branch.\n           \n           \n            Or create a pull request to merge your changes from your fork's branch directly to the authoritative repo's main branch. See  \n           \n         \n           \n            Wait for your changes to be merged into the main branch.\n           \n         \n           \n            After your changes have been merged, pull the changes into your local clone and your fork with  git pull upstream main  and then  git push origin main . Remember to do this often even if you don't have any pending changes to be merged. See  .\n           \n           \n            You may need to set an upstream with  git remote add upstream <link>  ( )\n           \n         \n     "
},
{
  "id": "S_gitcollabbigact",
  "level": "1",
  "url": "S_gitcollabbigact.html",
  "type": "Section",
  "number": "6.6",
  "title": "Working Together: The Culminating Experience",
  "body": "Working Together: The Culminating Experience culminating experience git collaborate \n    As in  , this part is a large activity designed to help you practice the skills and ideas learned in the previous sections. It also represents an example of what a typical workflow might look like. You are welcome and encouraged to refer back to the summary and the sections themselves.\n   \n    As before, the activity below is broken up into multiple parts. In order to help you remember the procedures, I will not be adding in cross references to the corresponding chapters. That being said, I will add in hints and answers where applicable. Do note that some of the steps have no “correct” answer. This will be noted in the corresponding answer.\n   \n        This activity will involve you contributing to the repository for this book. This will help me get an estimate of how many people are reading the book (since I can see the number of forks). You will be typing a short paragraph of your desired superpower.\n       \n          Navigate to the  GitHub repository for this book ,  ian-curtis\/gitstarted .\n         \n          Fork the repository.\n         \n          Click on the  Fork  button in the top right. (You can keep the same name.)\n         \n          Make sure your branch is up to date with  ian-curtis\/gitstarted:main .\n         \n          Clone your fork on to your computer. Navigate to the repo using your terminal.\n         \n          Copy the  HTTPS  link  to your fork  on GitHub. Use  git clone <copied-link> . Use  cd <repo-name>  to move your terminal into that repo.\n         \n          Create a new, appropriately-named branch. Switch to that branch.\n         \n          This could vary. Perhaps  superpower ,  power , or  add-superpower ?\n         \n          There is a file called  superpower.md  inside of the  book-activities  folder. Use your terminal to open that file (if using  VS  Code, use the terminal; if not, try to use your terminal).\n         \n           cd book-activities  first, then  code superpower.md  to open just the markdown file (not the entire repository) (if using  VS  Code); if using a different editor, use Google to find a good terminal command (or do it manually)\n         \n          OR  cd ..  to go backwards a folder, then  code gitstarted  to open the entire repository, then open the markdown file using work (to use Git functions again, you may have to  cd gitstarted  again)\n         \n          Edit the markdown file with your contribution. Instructions are in the file are pasted below:\n           \n            Here is the file for the culminating experience of   from  Git Started . Below, type your GitHub username as a level two heading and then type a short paragraph of the superpower you wish you had and why. This could be anything!! See my example.\n           \n         \n          Make sure to save the file when you are done.\n         \n          Make sure Git is tracking your file.\n         \n           git status \n         \n          Stage your file.\n         \n           \n               \n                 git add .  or\n               \n             \n               \n                 git add book-activities\/  or\n               \n             \n               \n                 git add book-activities\/superpower.md \n               \n             \n         \n          Check to make sure your file got staged correctly.\n         \n           git status \n         \n          Commit your file with a good commit message.\n         \n           git commit -m '<your-message>' \n         \n          Push your changes back to your fork on GitHub\n         \n           git push origin superpower \n         \n          Go back to GitHub and merge your changes into your fork's main branch, then into the upstream main branch.\n         \n          OR Go back to GitHub and open a pull request to merge your changes directly into the upstream branch.\n         \n          Create a pull reqeust from  superpower  to your fork's  main  then from your fork's  main  to upstream  main .\n         \n          OR Create a pull request from  superpower  directly to the upstream  main .\n         \n          Wait for me to accept your pull request and merge your changes into the main branch.\n         \n          In the meantime, switch back to main and set an upstream branch for your clone.\n         \n           git switch main , then\n         \n           git remote add upstream https:\/\/github.com\/ian-curtis\/gitstarted.git \n         \n          It is important to switch back to main or you will set an upstream remote for just your branch which is sometimes useful, but not here.\n         \n          Once I have accepted your changes, make sure your fork and your clone both have those changes.\n         \n          (on main branch)  git pull upstream main ,  git push origin main \n         \n          For extra credit, create a new branch and do some typo correction on this book. If you do more than one chapter\/section, try to do multiple commits. Submit a pull request explaining your changes and I might merge it!\n         \n          Or, learn  PreTeXt, the markup language this book is written in  and suggest some edits or new content.\n         \n          For as long as you wish to stay up-to-date on the code for this book, pull from upstream often.\n         \n      And that's that! Hopefully you're getting the hang of this process with all of this repetition. If you ever need to practice this again (or need a refresher on what to do), revisit this page. It might take a little bit to become fully comfortable with the process and to remember the order in which to do things. In time, you will get it! Good luck in the rest of your Git\/GitHub journey!\n     "
},
{
  "id": "bigact-gitcollab",
  "level": "2",
  "url": "S_gitcollabbigact.html#bigact-gitcollab",
  "type": "Activity",
  "number": "6.3",
  "title": "",
  "body": "\n        This activity will involve you contributing to the repository for this book. This will help me get an estimate of how many people are reading the book (since I can see the number of forks). You will be typing a short paragraph of your desired superpower.\n       \n          Navigate to the  GitHub repository for this book ,  ian-curtis\/gitstarted .\n         \n          Fork the repository.\n         \n          Click on the  Fork  button in the top right. (You can keep the same name.)\n         \n          Make sure your branch is up to date with  ian-curtis\/gitstarted:main .\n         \n          Clone your fork on to your computer. Navigate to the repo using your terminal.\n         \n          Copy the  HTTPS  link  to your fork  on GitHub. Use  git clone <copied-link> . Use  cd <repo-name>  to move your terminal into that repo.\n         \n          Create a new, appropriately-named branch. Switch to that branch.\n         \n          This could vary. Perhaps  superpower ,  power , or  add-superpower ?\n         \n          There is a file called  superpower.md  inside of the  book-activities  folder. Use your terminal to open that file (if using  VS  Code, use the terminal; if not, try to use your terminal).\n         \n           cd book-activities  first, then  code superpower.md  to open just the markdown file (not the entire repository) (if using  VS  Code); if using a different editor, use Google to find a good terminal command (or do it manually)\n         \n          OR  cd ..  to go backwards a folder, then  code gitstarted  to open the entire repository, then open the markdown file using work (to use Git functions again, you may have to  cd gitstarted  again)\n         \n          Edit the markdown file with your contribution. Instructions are in the file are pasted below:\n           \n            Here is the file for the culminating experience of   from  Git Started . Below, type your GitHub username as a level two heading and then type a short paragraph of the superpower you wish you had and why. This could be anything!! See my example.\n           \n         \n          Make sure to save the file when you are done.\n         \n          Make sure Git is tracking your file.\n         \n           git status \n         \n          Stage your file.\n         \n           \n               \n                 git add .  or\n               \n             \n               \n                 git add book-activities\/  or\n               \n             \n               \n                 git add book-activities\/superpower.md \n               \n             \n         \n          Check to make sure your file got staged correctly.\n         \n           git status \n         \n          Commit your file with a good commit message.\n         \n           git commit -m '<your-message>' \n         \n          Push your changes back to your fork on GitHub\n         \n           git push origin superpower \n         \n          Go back to GitHub and merge your changes into your fork's main branch, then into the upstream main branch.\n         \n          OR Go back to GitHub and open a pull request to merge your changes directly into the upstream branch.\n         \n          Create a pull reqeust from  superpower  to your fork's  main  then from your fork's  main  to upstream  main .\n         \n          OR Create a pull request from  superpower  directly to the upstream  main .\n         \n          Wait for me to accept your pull request and merge your changes into the main branch.\n         \n          In the meantime, switch back to main and set an upstream branch for your clone.\n         \n           git switch main , then\n         \n           git remote add upstream https:\/\/github.com\/ian-curtis\/gitstarted.git \n         \n          It is important to switch back to main or you will set an upstream remote for just your branch which is sometimes useful, but not here.\n         \n          Once I have accepted your changes, make sure your fork and your clone both have those changes.\n         \n          (on main branch)  git pull upstream main ,  git push origin main \n         \n          For extra credit, create a new branch and do some typo correction on this book. If you do more than one chapter\/section, try to do multiple commits. Submit a pull request explaining your changes and I might merge it!\n         \n          Or, learn  PreTeXt, the markup language this book is written in  and suggest some edits or new content.\n         \n          For as long as you wish to stay up-to-date on the code for this book, pull from upstream often.\n         "
},
{
  "id": "S_custterm_mac",
  "level": "1",
  "url": "S_custterm_mac.html",
  "type": "Section",
  "number": "A.1",
  "title": "For Mac Users",
  "body": "For Mac Users command line mac \n      Sorry, Windows users, this is only for MacOS users. If you are a Mac user, you will likely appreciate and benefit from these customizations.\n     A New Terminal: iTerm2 iTerm2 \n      Instead of using the built-in terminal that comes with your computer, consider downloading  a new terminal, iTerm2 . The default Mac terminal does great but if you are having trouble seeing what's going on and want more colors or wish you didn't have to type so much, then iTerm2 is for you.\n     \n      This new terminal is free and has  many nice features  such as\n       \n           \n            split panes\/tabs\n           \n         \n           \n            search\n           \n         \n           \n            fun colors\n           \n         \n           \n            autocomplete\n           \n         \n           \n            copy mode\n           \n         \n           \n            paste history\n           \n         \n      and many more. I personally don't see any disadvantage to this terminal. Plus, it works with all the popular shells. To download, visit the link above and simply download it. Once it's installed, it works immediately.\n     A New Shell:  fish shell fish fish (shell) \n        Many computers rely on  bash  to do most of their work. Mac computers now use  zsh  as their default shell. Shells have their own unique aspects and differences and frankly, it doesn't really matter which shell you use unless you have a good technical reason to change. Shells are pretty advanced and I honestly don't have much information to provide other than what a simple Google search can do.\n       \n        That being said, I do recommend the shell  fish . This shell brings more nice colors, better autocomplete than iTerm2 (it will recommend as you type!) and, in my opinion, organizes the information on your terminal quite nicely.\n       \n        Installing is very easy, too. If you used Homebrew to install Git (  in  ) or other things, then installation is even easier. Simply type  brew install fish  into your terminal, then change your shell to  fish  with  chsh -s \/user\/local\/bin\/fish . After restarting your terminal, everything will be ready for use! ( fish  is installable on Linux and Windows Subsystem for Linux)\n       \n        If you don't like  fish , you can switch back to  bash  or  zsh  with  chsh -s \/bin\/bash  or  chsh -s \/bin\/zsh .\n       "
},
{
  "id": "S_custterm_windows",
  "level": "1",
  "url": "S_custterm_windows.html",
  "type": "Section",
  "number": "A.2",
  "title": "For Windows Users (*)",
  "body": "For Windows Users (*) command line windows "
},
{
  "id": "S_custterm_linux",
  "level": "1",
  "url": "S_custterm_linux.html",
  "type": "Section",
  "number": "A.3",
  "title": "For Linux Users (*)",
  "body": "For Linux Users (*) command line linux "
},
{
  "id": "S_custterm_all",
  "level": "1",
  "url": "S_custterm_all.html",
  "type": "Section",
  "number": "A.4",
  "title": "For All",
  "body": "For All A New Git Interface gitkraken git gitkraken \n        Now that you know Git basics and terminology, you might like interfaces that reduce your terminal usage.  GitKraken  is one of those choices. Although I haven't used it, it does look nice. It is free with a paid option and is available on Windows, Mac, and Linux.\n       \n        From a simple browse of the website there appears to be a good brach\/contribution graph and clear tabs with specific functions. Perhaps worth trying out!\n       GitHub Desktop github desktop github desktop \n        GitHub does offer a  desktop interface  to help you with Git features and managing collaboration. If you would rather do these things with an app (as opposed to switching from your text editor to a website) it might be worth downloading GitHug Desktop. The website itself is pretty basic, but  the GitHub documentation  has a good start-up guide and more.\n       A New Shell:  fish shell fish fish (shell) \n        Many computers rely on  bash  to do most of their work. Mac computers now use  zsh  as their default shell. Shells have their own unique aspects and differences and frankly, it doesn't really matter which shell you use unless you have a good technical reason to change. Shells are pretty advanced and I honestly don't have much information to provide other than what a simple Google search can do.\n       \n        That being said, I do recommend the shell  fish . This shell brings nice colors, autocomplete and, in my opinion, organizes the information on your terminal quite nicely.\n       \n        Installing is very easy, too. If you have used Homebrew to install anything, then installation is even easy. Simply type  brew install fish  into your terminal, then change your shell to  fish  (a Google search will likely be necessary unless you are a Mac user, see  ). After restarting your terminal, everything will be ready for use! ( fish  is installable on Linux and Windows Subsystem for Linux)\n       \n        If you don't like  fish , you can switch back to  bash  or  zsh .\n       "
},
{
  "id": "S_hubissues",
  "level": "1",
  "url": "S_hubissues.html",
  "type": "Section",
  "number": "B.1",
  "title": "The Issues Tab",
  "body": "The Issues Tab issues github issues \n      You've seen when making pull requests that you can add comments or descriptions to help moderators understand what you are doing. This feature is also used as a place for conversation regarding the pull request and the problems is solves or brings up.\n     \n      But what happens if you want to talk about a problem without a pull request? What if you don't have the time or experience to edit a repository's contents but want to let moderators know of a potential bug or feature request? GitHub has something for you!\n     \n      The issues tab is designed as a place of conversation between developers, users, and other members of the community. It runs like a forum where anyone can create a thread (including the repo's owner) and anyone can reply or supply advice. Moderators will often tag issues and with a well-designed commit message, can close an issue automatically.\n     \n      Some issues have a label of  good first issue . This indicates that the problem mentioned in the issue is not very difficult to fix and with a basic understand of that repo's files, a beginner could fix the issue. If you are interested in developing, I would recommend starting with good first issues.\n     \n      Note that the Issues tab will not appear on forks, only on the authoritative repository.\n     Example Issues page for this book Issues page for this book, Git Started. No issues are present. Example Issues page for the  Python module  scikit-learn Issues page for  scikit-learn . Lots of issues are present, with tags and many contributors. "
},
{
  "id": "fig-hub-issues-gs",
  "level": "2",
  "url": "S_hubissues.html#fig-hub-issues-gs",
  "type": "Figure",
  "number": "B.1.0.1",
  "title": "",
  "body": "Example Issues page for this book Issues page for this book, Git Started. No issues are present. "
},
{
  "id": "fig-hub-issues-skl",
  "level": "2",
  "url": "S_hubissues.html#fig-hub-issues-skl",
  "type": "Figure",
  "number": "B.1.0.2",
  "title": "",
  "body": "Example Issues page for the  Python module  scikit-learn Issues page for  scikit-learn . Lots of issues are present, with tags and many contributors. "
},
{
  "id": "S_hub-seecommits",
  "level": "1",
  "url": "S_hub-seecommits.html",
  "type": "Section",
  "number": "B.2",
  "title": "Commit History",
  "body": "Commit History commit history github commit history \n      On the home page (Code tab) for all repositories a commit history can be found, full with contributor usernames, commit messages, and links to further information. Directly above the list of files, you can find information on the most recent commit. At the right side of this area is a clock icon with an arrow circling counterclockwise followed by a number of commits (See  ). This is the total number of commits to that repository.\n     The number of commits to a repository Most-recent-commit bar (above list of files). Contains total number of commits for a repository. \n      Clicking on this will give you more information on how often someone updates a repository and how many people do so. You are also able to see past branch names. Clicking on a specific commit will bring to a page with the files changed and any comments that were made.\n     \n      Not everyone will be interested in this feature, but it is useful to know it is there should you want to take advantage of it.\n     "
},
{
  "id": "fig-hub-ncommits",
  "level": "2",
  "url": "S_hub-seecommits.html#fig-hub-ncommits",
  "type": "Figure",
  "number": "B.2.0.1",
  "title": "",
  "body": "The number of commits to a repository Most-recent-commit bar (above list of files). Contains total number of commits for a repository. "
},
{
  "id": "S_hub-about",
  "level": "1",
  "url": "S_hub-about.html",
  "type": "Section",
  "number": "B.3",
  "title": "The About Panel",
  "body": "The About Panel github about panel \n      Most popular repositories have created and worked hard on their about panel. On any repo, this appears on the right side of the home page (Code tab) and it titled  About . This panel may include\n       \n           \n            A short description\n           \n         \n           \n            A website\n           \n         \n           \n            Topics (these are like tags)\n           \n         \n           \n            A release version number\n           \n         \n           \n            Any packages published in the repository\n           \n         \n           \n            Any environments associated with the repository (such as GitHub Pages)\n           \n         \n     \n      Also on this side of the page is a list of contributors, and the distribution of the langauges of the files in the repo (this can be off since GitHub doesn't recognize some file extensions). It's always nice to glance at this part of the page when looking at a repository just to get a general idea of what's going on or if it's what you are looking for. (A README will also help you understand more specific ideas about the repo content.)\n     "
},
{
  "id": "S_hubcollabtree",
  "level": "1",
  "url": "S_hubcollabtree.html",
  "type": "Section",
  "number": "B.4",
  "title": "The Branch Tree Diagram (Network Graph)",
  "body": "The Branch Tree Diagram (Network Graph) tree diagram github tree diagram branches tree diagram network graph tree diagram \n      Scattered throughout the book are various tree diagrams (created by me) depicting example branch pathways. Of course, these are highly variable depending on how many branches you have, commits you make, and contributors there are.\n     \n      Turns out, GitHub actually makes a graph of your branches for you, as you create, push, merge, and delete them. This is visible on all public repos. To get to this graph, visit the Insights tab and then the Network page from the left sidebar. And there it is! It might not look very exciting, depending on your workflow. Consider the one for this book as of May 2022 in  .\n     Network graph for this book (as of May 2022) Branch diagram for this book. Mostly a straight line (main branch) with small projections coming off and coming back in (branches and merging). "
},
{
  "id": "fig-network-graph",
  "level": "2",
  "url": "S_hubcollabtree.html#fig-network-graph",
  "type": "Figure",
  "number": "B.4.0.1",
  "title": "",
  "body": "Network graph for this book (as of May 2022) Branch diagram for this book. Mostly a straight line (main branch) with small projections coming off and coming back in (branches and merging). "
},
{
  "id": "S_hub_delete_repo",
  "level": "1",
  "url": "S_hub_delete_repo.html",
  "type": "Section",
  "number": "B.5",
  "title": "Deleting a Repository",
  "body": "Deleting a Repository repository delete github delete repository \n      So you really to delete a repository? Think long and hard about this one. Are you sure? Are you really sure? Deleting repos are  irreversible  and can have lasting effects. For instance, all forks will be broken, but not deleted. If you delete a private repo, all forks will also be deleted. Any website that contains a link to your repo will no longer work and people might wonder where it went. And so on.\n     \n      But here you are, so clearly you have decided to delete one. To delete a repository, you have to enter the danger zone ( Top Gun  anyone?).\n     Deleting a Repository \n            Navigate to the repo you want to delete.\n           \n            Click on the Setting tab. This should be the settings for the repo itself, not the general settings for your profile.\n           \n            Scroll all the way down to the Danger Zone.\n           \n            Click on  Delete this repository \n           \n            Read the dialog box that pops up. Once you have decided to delete the repo, type in what GitHub prompts you to type in and hit confirm.\n           "
},
{
  "id": "hub-delete-repo",
  "level": "2",
  "url": "S_hub_delete_repo.html#hub-delete-repo",
  "type": "Activity",
  "number": "B.1",
  "title": "Deleting a Repository.",
  "body": "Deleting a Repository \n            Navigate to the repo you want to delete.\n           \n            Click on the Setting tab. This should be the settings for the repo itself, not the general settings for your profile.\n           \n            Scroll all the way down to the Danger Zone.\n           \n            Click on  Delete this repository \n           \n            Read the dialog box that pops up. Once you have decided to delete the repo, type in what GitHub prompts you to type in and hit confirm.\n           "
},
{
  "id": "SS_reverseadd",
  "level": "1",
  "url": "SS_reverseadd.html",
  "type": "Section",
  "number": "C.1",
  "title": "Uh Oh, I Staged the Wrong Files!",
  "body": "Uh Oh, I Staged the Wrong Files! git add staging \n        Once you get the hang of Git, it's easy to just fly through the three-step process. In doing so, you will inevitably stage (with  git add ) a file or folder on accident. This is relatively simple to fix. To undo this, follow the next procedure. \n       Reversing  git add \n          Oh shoot. What if you add a file you didn't mean to? This is one reason why there are so many steps to sending files to GitHub. Humans make mistakes and Git gives you the chance to correct any. Should you ever add a file you didn't mean to add, revist this procedure.\n         \n            Identify the file name(s) and extension(s) of the file(s) you mistakenly added.\n           \n            Use  git restore --staged <your-file-name(s)>  to un-stage any files. Like  git add , this command can be run many times.\n           \n            It might be wise to verify with  git status  that everything looks good.\n           "
},
{
  "id": "reverse-git-add",
  "level": "2",
  "url": "SS_reverseadd.html#reverse-git-add",
  "type": "Git Procedure",
  "number": "C.1",
  "title": "Reversing <code class=\"code-inline tex2jax_ignore\">git add<\/code>.",
  "body": "Reversing  git add \n          Oh shoot. What if you add a file you didn't mean to? This is one reason why there are so many steps to sending files to GitHub. Humans make mistakes and Git gives you the chance to correct any. Should you ever add a file you didn't mean to add, revist this procedure.\n         \n            Identify the file name(s) and extension(s) of the file(s) you mistakenly added.\n           \n            Use  git restore --staged <your-file-name(s)>  to un-stage any files. Like  git add , this command can be run many times.\n           \n            It might be wise to verify with  git status  that everything looks good.\n           "
},
{
  "id": "SS_reversecommit",
  "level": "1",
  "url": "SS_reversecommit.html",
  "type": "Section",
  "number": "C.2",
  "title": "Uh Oh, I Committed Too Early!",
  "body": "Uh Oh, I Committed Too Early! git commit commit files \n        We've all been there. You  add  all the files you need, double check to make sure you aren't missing anything,  commit  with a message and suddenly remember a file you should have added. Never fear,  git reset  is here!\n       Reversing  git commit \n          You will only need this command:  git reset --soft HEAD^1 . It should be safe to copy\/paste this command directly into your command line and run it.\n         \n           git reset  gives no output so it is super important to check that the command worked with  git status  ( ). If everything worked, you should see output as if you had used  git status  after a  git add  step. \n         \n          Depending on how many commits you made, you may need to run this above command more than once. If so, make sure to use  git status  after each try!\n         \n          Your previously staged files should still exist. From this point, use  git add  to add your missing file(s) and proceed with  git commit .\n         "
},
{
  "id": "reverse-git-commit",
  "level": "2",
  "url": "SS_reversecommit.html#reverse-git-commit",
  "type": "Git Procedure",
  "number": "C.2",
  "title": "Reversing <code class=\"code-inline tex2jax_ignore\">git commit<\/code>.",
  "body": "Reversing  git commit \n          You will only need this command:  git reset --soft HEAD^1 . It should be safe to copy\/paste this command directly into your command line and run it.\n         \n           git reset  gives no output so it is super important to check that the command worked with  git status  ( ). If everything worked, you should see output as if you had used  git status  after a  git add  step. \n         \n          Depending on how many commits you made, you may need to run this above command more than once. If so, make sure to use  git status  after each try!\n         \n          Your previously staged files should still exist. From this point, use  git add  to add your missing file(s) and proceed with  git commit .\n         "
},
{
  "id": "S_untrackfiles",
  "level": "1",
  "url": "S_untrackfiles.html",
  "type": "Section",
  "number": "C.3",
  "title": "Git Has Been Updating Files, But Now I Don't Want It To",
  "body": "Git Has Been Updating Files, But Now I Don't Want It To tracking git tracking \n      This is actually pretty common. Maybe you are writing a book and your abandoned chapters were on GitHub for your editors to look at. Now that the book is published, you don't want those chapters online. Maybe you are using an API and when you were developing a project had your app's API connection keys available and not that the project is public you want to remove the file containing them.\n     tracking \n        Untracking files from Git  does not delete them from your local computer . However, the next time you push to GitHub, they will no longer be there. Thus, the next time your collaborators pull from the repository, their copy of the file will be deleted.\n       Untracking Files from Git \n            Identify the  files  you wish to remove from Git's tracking service\n           \n            Use  git rm --cached <filename> . You may also add multiple files as done with  git add  ( ).\n           \n            Want to untrack folders? You will need the  -r  recursive option. So,  git rm -r --cached <folder-name>  will do the trick.\n           \n            The above options will not delete the file(s)\/folder(s) from your local computer. If you would like the files deleted and untracked, use the above commands with out the  --cached  feature:  git rm <filenames>  and  git rm -r <folder-names> .\n           "
},
{
  "id": "p-1023",
  "level": "2",
  "url": "S_untrackfiles.html#p-1023",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "tracking "
},
{
  "id": "warning-6",
  "level": "2",
  "url": "S_untrackfiles.html#warning-6",
  "type": "Warning",
  "number": "C.3.0.1",
  "title": "",
  "body": "\n        Untracking files from Git  does not delete them from your local computer . However, the next time you push to GitHub, they will no longer be there. Thus, the next time your collaborators pull from the repository, their copy of the file will be deleted.\n       "
},
{
  "id": "project-14",
  "level": "2",
  "url": "S_untrackfiles.html#project-14",
  "type": "Git Procedure",
  "number": "C.3",
  "title": "Untracking Files from Git.",
  "body": "Untracking Files from Git \n            Identify the  files  you wish to remove from Git's tracking service\n           \n            Use  git rm --cached <filename> . You may also add multiple files as done with  git add  ( ).\n           \n            Want to untrack folders? You will need the  -r  recursive option. So,  git rm -r --cached <folder-name>  will do the trick.\n           \n            The above options will not delete the file(s)\/folder(s) from your local computer. If you would like the files deleted and untracked, use the above commands with out the  --cached  feature:  git rm <filenames>  and  git rm -r <folder-names> .\n           "
},
{
  "id": "S_forcemerge",
  "level": "1",
  "url": "S_forcemerge.html",
  "type": "Section",
  "number": "C.4",
  "title": "Git Won't Let Me Pull From Upstream or Origin!",
  "body": "Git Won't Let Me Pull From Upstream or Origin! git pull remote upstream remote origin upstream origin \n        Ah, perhaps you forgot to make a branch. This error happens to me a lot when I have a lot of work on the main branch because I never made a separate branch (not smart of me, I know).\n       \n        Or maybe not. Either way, Git says you have a problem with your code and won't let you merge from upstream. Maybe you get a message like this:\n         git pull upstream main \nerror: Your local changes to the following files would be overwritten by merge:\n        <file-name(s)>\nPlease commit your changes or stash them before you merge.\nAborting\n \n       \n        This error occurs when you have local, uncommitted changes and a merge from origin or upstream has changes in the same exact places. Git has no idea whose changes to keep so it does nothing. There are a couple of different things you can do in this situation depending on how you feel about your changes.\n       Your Local Changes Are Irrelevant and You Want Them Overwritten force merge \n        This definitely happens! Perhaps you tried a few things and they didn't work so you want to pull from upstream or origin and start over. Maybe you corrected some typos and someone else beat you to it so you want to merge their corrections in and keep working. I could go on and on. It's not difficult at all to force Git to make this happen, just make sure this is what you want to do!\n       Forcing an Upstream or Origin Merge \n              First, create a backup branch just in case things go haywire:  git branch backup . Since  git branch  does not automatically switch you to that branch, you are free to carry on.\n             \n              Now, just fetch the changes. Remember that merging and fetching are separate processes. Fetching just collects the changes, attempting to merge will throw the error. Use  git fetch <remote> <branch-name> . Example:  git fetch upstream main .\n             \n              Now reset your current branch to the contents you just fetched. This is not a merge, this is a complete reset. You are reverting all of your content to match what you just fetched. This is why we created a backup in case something gets deleted that you didn't want to be.\n             \n              In the event that a file you created gets deleted from the reset, just navigate to the backup branch, stage just the missing file and commit just the missing file to origin. Then pull from origin.\n             \n              But to reset, use  git reset --hard <remote>\/<branch-name> . Continuing the example from above,  git reset --hard upstream\/main \n             Your Local Changes are Good and You Want to Keep Them git stash stash \n        Sometimes your changes are valid and you want them to be kept, but you still want to pull in changes. One option is to force a merge conflict and deal with it in your editor, choosing which version to keep. If this is what you want to do, just  add  the troublesome files,  commit  them, then  pull . Again, this will force a merge conflict but you can fix things from there.\n       \n        Alternatively, you can keep your changes by using  git stash . Stashing will store your changes locally without committing and will let you pull. To bring your changes back you can use  git stash pop . In my experience, things have worked out quite nicely with  git stash . I just type  git stash  before pulling, then I pull, then I use  git stash pop  and my changes are popped right back into where they were. For more information, you might find  opensource.com  useful.\n       "
},
{
  "id": "project-15",
  "level": "2",
  "url": "S_forcemerge.html#project-15",
  "type": "Git Procedure",
  "number": "C.4",
  "title": "Forcing an Upstream or Origin Merge.",
  "body": "Forcing an Upstream or Origin Merge \n              First, create a backup branch just in case things go haywire:  git branch backup . Since  git branch  does not automatically switch you to that branch, you are free to carry on.\n             \n              Now, just fetch the changes. Remember that merging and fetching are separate processes. Fetching just collects the changes, attempting to merge will throw the error. Use  git fetch <remote> <branch-name> . Example:  git fetch upstream main .\n             \n              Now reset your current branch to the contents you just fetched. This is not a merge, this is a complete reset. You are reverting all of your content to match what you just fetched. This is why we created a backup in case something gets deleted that you didn't want to be.\n             \n              In the event that a file you created gets deleted from the reset, just navigate to the backup branch, stage just the missing file and commit just the missing file to origin. Then pull from origin.\n             \n              But to reset, use  git reset --hard <remote>\/<branch-name> . Continuing the example from above,  git reset --hard upstream\/main \n             "
},
{
  "id": "S_diverge_branch",
  "level": "1",
  "url": "S_diverge_branch.html",
  "type": "Section",
  "number": "C.5",
  "title": "Git Says I Have Divergent Branches!",
  "body": "Git Says I Have Divergent Branches! \n      I recently experiences this issue for the first time and had to do some searching to figure out how to fix it. I relied on  Davide Casiraghi's question on StackOverflow  and  adrianvlupu's question also on StackOverflow  to create this guide and you might find these resources more helpful than mine.\n     \n      This is a preemptive warning of a merge conflict and occurs when you are trying to pull in or push out a commit and another commit gets in the way. Git doesn't want to create them, so it refuses to push or pull until you fix something. This is not the same error as in  , although it is closely related. You might get something like this:\n       git push To <repo-you-are-pushing-to>.git\n ! [rejected]        main -> main (fetch first)\nerror: failed to push some refs to '<repo-you-are-pushing-to>.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n \n    This looks kind of scary. Let's see how to fix this.\n     Consolidating Divergent Branches \n            The first step will be to try to pull in changes before you push. Use  git pull <remote> <branch>  as needed. If this works, then try to push and everything should be ok.\n           \n            You might get another error like this:\n             git pull origin main remote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1\/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1\/1), 659 bytes | 659.00 KiB\/s, done.\nFrom <repo-you-are-pushing-to>\n   2417195..8b492ee  main       -> origin\/main\nhint: You have divergent branches and need to specify how to reconcile them.\nhint: You can do so by running one of the following commands sometime before\nhint: your next pull:\nhint: \nhint:   git config pull.rebase false  # merge\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint: \nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.\nfatal: Need to specify how to reconcile divergent branches.\n \n            which is quite overwhelming.\n           rebase \n            If you want to avoid potential large error messages like this again, you might consider changing Git's default behavior. Instead of fetching and merging, you can do a fast-forward merge which does not do a merge commit. When a fast forward is not possible, the error message is much shorter and then you can use the rebase command to fix things.\n           \n            To begin this process, first enter  git config --global pull.ff only  into your terminal. This will change the default pull behavior for Git.\n           \n            Now try  git pull . Things might work. Great! But if you get an error message of  fatal: Not possible to fast-forward, aborting. , use  git pull --rebase  to perform a rebase. Then  git push  back to origin or upstream.\n           \n            If you ever want to change the default behavior back to what it was, use  git config pull.rebase false . If you want to keep that behavior change we just did and you want to do a one-time fetch-merge pull, use  git pull --ff .\n           "
},
{
  "id": "try-git-rebase",
  "level": "2",
  "url": "S_diverge_branch.html#try-git-rebase",
  "type": "Git Procedure",
  "number": "C.5",
  "title": "Consolidating Divergent Branches.",
  "body": "Consolidating Divergent Branches \n            The first step will be to try to pull in changes before you push. Use  git pull <remote> <branch>  as needed. If this works, then try to push and everything should be ok.\n           \n            You might get another error like this:\n             git pull origin main remote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1\/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1\/1), 659 bytes | 659.00 KiB\/s, done.\nFrom <repo-you-are-pushing-to>\n   2417195..8b492ee  main       -> origin\/main\nhint: You have divergent branches and need to specify how to reconcile them.\nhint: You can do so by running one of the following commands sometime before\nhint: your next pull:\nhint: \nhint:   git config pull.rebase false  # merge\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint: \nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.\nfatal: Need to specify how to reconcile divergent branches.\n \n            which is quite overwhelming.\n           rebase \n            If you want to avoid potential large error messages like this again, you might consider changing Git's default behavior. Instead of fetching and merging, you can do a fast-forward merge which does not do a merge commit. When a fast forward is not possible, the error message is much shorter and then you can use the rebase command to fix things.\n           \n            To begin this process, first enter  git config --global pull.ff only  into your terminal. This will change the default pull behavior for Git.\n           \n            Now try  git pull . Things might work. Great! But if you get an error message of  fatal: Not possible to fast-forward, aborting. , use  git pull --rebase  to perform a rebase. Then  git push  back to origin or upstream.\n           \n            If you ever want to change the default behavior back to what it was, use  git config pull.rebase false . If you want to keep that behavior change we just did and you want to do a one-time fetch-merge pull, use  git pull --ff .\n           "
},
{
  "id": "S_hub_revert_commit",
  "level": "1",
  "url": "S_hub_revert_commit.html",
  "type": "Section",
  "number": "C.6",
  "title": "Reverting To a Previous Commit",
  "body": "Reverting To a Previous Commit commit revert revert commit git commit commit hash commit hash \n      I have never had to do this (yet) so I don't have direct experience here. However,  user gunjanpatel on GitHub  has created a nice guide. It appears that  git reset HEAD^ --hard  and then  git push origin -f  will work. The  -f  switch forces the push and ignores errors.\n     commit hash "
},
{
  "id": "p-1050",
  "level": "2",
  "url": "S_hub_revert_commit.html#p-1050",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "commit hash "
},
{
  "id": "S_mergeconflict",
  "level": "1",
  "url": "S_mergeconflict.html",
  "type": "Section",
  "number": "C.7",
  "title": "Merge Conflicts",
  "body": "Merge Conflicts \n      Hopefully you never have to deal with these. Sometimes, they are pretty simple to fix. Other times, it can cause some headaches. To avoid merge conflicts, pull from upstream often (  and  ). Merge conflicts are caused when more than one person edits the same line of a file. It is possible for two people to edit the same file, but on different lines, and not cause a conflict.\n     \n      I have never caused or had to deal with a serious merge conflict.  The GitHub documentation  has a good post on how to resolve conflicts on GitHub. GitHub will even show you the two (or more) versions and let you choose how to resolve them. You can also  resolve merge conflicts on the command line  or in your text editor.\n     \n      I have accidentally caused a merge conflict with myself and with working on the same repository from two different computers and two different accounts. Oops! This is an easy fix because I made the conflict with myself so I know which version is the correct one. If this happens to you, Git might send you to an unfamiliar screen when you try to push or pull. You'll know you have this case if your terminal asks you to type in a reason why the merge must happen or how the conflict is resolved. This typically happens when you try to merge from an upstream main into a local main that has active changes (so create branches!).\n     \n      If you start to get stuck, do a quick Google search. There are many guides and resources out there to help with merge conflicts.  Jennifer Bryan  has a good guide on merge conflict basics (and some other potential Git issues!) so start there and explore more as needed.\n     Merging from main to main (remote contains changes not on local) \n          This is for when you are sent into a command line editing tool or a default text editor asking you to provide a reason why the merge is necessary.\n         \n            Type  i \n           \n            Type a merge message. This can be something as simple as  I have to merge to move on  or  I know what I want, let me do it  (yes, I have actually put that as message is this good? Who knows?).\n           \n            Press  esc .\n           \n            Type  :wq  (this stands for write and quit)\n           \n            Press  Enter  and you should be ok to move forward.\n           "
},
{
  "id": "project-17",
  "level": "2",
  "url": "S_mergeconflict.html#project-17",
  "type": "Git Procedure",
  "number": "C.6",
  "title": "Merging from main to main (remote contains changes not on local).",
  "body": "Merging from main to main (remote contains changes not on local) \n          This is for when you are sent into a command line editing tool or a default text editor asking you to provide a reason why the merge is necessary.\n         \n            Type  i \n           \n            Type a merge message. This can be something as simple as  I have to merge to move on  or  I know what I want, let me do it  (yes, I have actually put that as message is this good? Who knows?).\n           \n            Press  esc .\n           \n            Type  :wq  (this stands for write and quit)\n           \n            Press  Enter  and you should be ok to move forward.\n           "
},
{
  "id": "app_answers",
  "level": "1",
  "url": "app_answers.html",
  "type": "Appendix",
  "number": "D",
  "title": "Answers to All Activities and Exercises",
  "body": "Answers to All Activities and Exercises "
},
{
  "id": "index-1",
  "level": "1",
  "url": "index-1.html",
  "type": "Index",
  "number": "",
  "title": "Index",
  "body": "Index "
},
{
  "id": "colophon-2",
  "level": "1",
  "url": "colophon-2.html",
  "type": "Colophon",
  "number": "",
  "title": "Colophon",
  "body": "\n      This book was authored in  PreTeXt .\n     "
}
]

var ptx_lunr_idx = lunr(function () {
  this.ref('id')
  this.field('title')
  this.field('body')

  ptx_lunr_docs.forEach(function (doc) {
    this.add(doc)
  }, this)
})
